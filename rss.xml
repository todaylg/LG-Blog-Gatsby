<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[LG-Blog]]></title><description><![CDATA[LG-Blog]]></description><link>www.todaylg.com</link><generator>RSS for Node</generator><lastBuildDate>Sun, 16 Dec 2018 12:46:23 GMT</lastBuildDate><item><title><![CDATA[Blender 2.80 快捷键笔记]]></title><link>www.todaylg.com/blender2.80/</link><guid isPermaLink="false">www.todaylg.com/blender2.80/</guid><content:encoded>&lt;div style=&quot;text-align: center&quot;&gt;  
&lt;img src=&quot;https://github.com/todaylg/LG-Blog-Gatsby/blob/master/content/posts/2018-12-16--blender2.80/Blender2.80.png&quot;&gt;  
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[MikuMikuMi]]></title><description><![CDATA[中了Miku的毒。。。MikuMikuMi～]]></description><link>www.todaylg.com/miku-setup/</link><guid isPermaLink="false">www.todaylg.com/miku-setup/</guid><content:encoded>&lt;p&gt;中了Miku的毒。。。MikuMikuMi～&lt;/p&gt;</content:encoded></item><item><title><![CDATA[备忘册]]></title><description><![CDATA[Vue工程结构目录及注意事项（18-7-1） Vue Document 好的基础开发结构可以大大便于之后的维护于拓展。 因为之前使用Vue都是赶时间所以Store没有进行过模块化，组件拆得也不够细（业务和纯组件能解构还是要解耦滴），通常components…]]></description><link>www.todaylg.com/problem-set/</link><guid isPermaLink="false">www.todaylg.com/problem-set/</guid><content:encoded>&lt;h2&gt;Vue工程结构目录及注意事项（18-7-1）&lt;/h2&gt;
&lt;h3&gt;Vue Document&lt;/h3&gt;
&lt;p&gt;好的基础开发结构可以大大便于之后的维护于拓展。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;.
├── assets                            // 公共资源
│   ├── api                            // 公共API
│   ├── lib                            // 公共第三方库
├── components                        // 公共组件
├── pages                            // 页面集
│   ├── page                        // 具体页面
│   │   ├── common                    // 页面公共资源
│   │   ├── components                // 组件（不含业务代码）
│   │   ├── containers                // 根据业务代码对组件进行整合形成的容器,
                                    // 包含自身的数据管理
│   │   ├── store                    // 数据模块化分散至容器
│   │   ├── router                    // 路由分配
├── app.vue/js/html                    // 入口&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;因为之前使用Vue都是赶时间所以Store没有进行过模块化，组件拆得也不够细（业务和纯组件能解构还是要解耦滴），通常components直接替代掉了containers这一层，有时间讲道理还是要解耦的。&lt;/p&gt;
&lt;h3&gt;注意事项&lt;/h3&gt;
&lt;h4&gt;自定义指令及过滤器&lt;/h4&gt;
&lt;p&gt;自定义指令着实是没有用到过，Vue.directive了解一下。&lt;/p&gt;
&lt;p&gt;过滤器是自个给忘了，Vue.filter复习一下。&lt;/p&gt;
&lt;h4&gt;易忽视的测试点&lt;/h4&gt;
&lt;p&gt;写了测试用例讲道理是要照用例完完全全过一遍对，但是老是会对一些细枝末节的地方有所忽略。&lt;/p&gt;
&lt;p&gt;1.这辈子请别再用”+”这样拼接字符串啦！&lt;/p&gt;
&lt;p&gt;2.除非是万不得已，别用setTimeInterval！！！并且切记与clear是同生共死的！&lt;/p&gt;
&lt;p&gt;3.没有一种初始值叫做undefined！却有一种赋值叫做99999999*n。请容错！&lt;/p&gt;
&lt;p&gt;自己用的场景还是偏少，所以命令根本记不住。。。备忘把常用的简单指令记一下。&lt;/p&gt;
&lt;h2&gt;VIM基本操作备忘（18-7-7）&lt;/h2&gt;
&lt;h3&gt;基本移动&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;h&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;j&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;k&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;l&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;⬅️&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;⬇️&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;⬆️&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;➡️&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;H&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;本屏首行&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;L&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;本屏末行&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;o&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;这一行的最前处&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;$&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;这一行的最末尾&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;G&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;移动到整个文档最后一行&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;gg&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;移动到整个文档首行，相当于1g&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;n+Enter&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;向下移动n行&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;nG&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;跳转到第n行&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3&gt;搜索替换&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;/word&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;在文档中向下搜索’word’&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;?word&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;在文档中向上搜索’word’&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;n/N&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;按下Enter搜索完后显示下/上一个匹配项&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;:1,$s /word1/word2/g&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;全文替换&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3&gt;删除&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;x/X&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;向前/后删除一个字符&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;dd&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;删除整行（ndd）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;yy&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;复制整行（nyy）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;p/P&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;粘贴在光标上/下一行处&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3&gt;撤销&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;u&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;复原上一个动作&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;ctrl+r&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;重做上一个动作&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3&gt;模式&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;:w&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong&gt;保存&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;:w!&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;强存（权限问题）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;:q&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;退出&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;:q!&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;强退（不保存）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;:wq&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;保存完走&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2&gt;CSS问题集（18-7-14）&lt;/h2&gt;
&lt;p&gt;丢了CSS一段时间后突然拿起来用发现一下懵圈了。。。一些原来很基本的问题都忘完了。。把遇到的问题记一下，捡一捡吧。。&lt;/p&gt;
&lt;h4&gt;层级问题&lt;/h4&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;https://code.h5jun.com/junor/3/edit?html,css,output&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;相关：&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/&quot;&gt;层级&lt;/a&gt;、&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2011/08/css%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%BA%94%E4%B9%8Bz-index%E7%AF%87/&quot;&gt;z-index&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;图片文字垂直居中&lt;/h4&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;https://code.h5jun.com/junor/1/edit?html,css,output&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;相关：&lt;a href=&quot;https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;多行文本与单行文本垂直居中&lt;/h4&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;https://code.h5jun.com/junor/2/edit?html,css,output&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h2&gt;神奇的JSONP（18-7-29）&lt;/h2&gt;
&lt;p&gt;遇见了一个较为特殊的场景：&lt;/p&gt;
&lt;p&gt;在短时间内（几乎同时），连续发起两次jsonp跨域请求一个有CDN的后端接口（cache为true），几乎必现首次请求失败(走error回调)，后次请求成功（走success回调），神奇的是NetWork显示请求只发出了一次，看起来就像jsonp直接处决掉了首次请求。。。换为cache:false（加时间戳）后两次请求正常，单次请求也正常，换用CORS也正常。&lt;/p&gt;
&lt;p&gt;也可能是JQ的坑，待有空了再做研究。因为感觉Jsonp应该是被时代所淘汰的东西，研究一项注定被淘汰的技术总是没啥动力，比如Flash。。。。&lt;/p&gt;
&lt;p&gt;还有个webpack打包完以后window下的全局函数访问不了的问题- -也记一下&lt;/p&gt;</content:encoded></item><item><title><![CDATA[初探WebVR与Web Audio API]]></title><description><![CDATA[借着毕设的机会，接触了一下WebVR和Web Audio API，以及通信本行的数字信号处理的知识： WebVR-Audio-Visualizer 当年在DPS…]]></description><link>www.todaylg.com/webVR-and-web-audio-api/</link><guid isPermaLink="false">www.todaylg.com/webVR-and-web-audio-api/</guid><content:encoded>&lt;p&gt;借着毕设的机会，接触了一下WebVR和Web Audio API，以及通信本行的数字信号处理的知识：&lt;a href=&quot;https://github.com/todaylg/WebVR-Audio-Visualizer&quot;&gt;WebVR-Audio-Visualizer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当年在DPS和高数课上流的口水化成了如今流下的泪水。。。内心不尽五味杂陈，&lt;strong&gt;技多不压身&lt;/strong&gt;属实是有道理的呀，学的时候觉得没有用，用的时候才后悔没好好学，人家毕业扔课本，我却寄课本：高数、DSP、从隔壁计科借过来的四大门课本，缺的东西属实有点忒多了。。。&lt;/p&gt;
&lt;p&gt;总结一句精辟的话：排除两个前提条件（起步早、天赋高）的前提下，本科阶段跨离自己本专业自学转软件方向最大的两个问题在于&lt;strong&gt;知识体系的完整程度&lt;/strong&gt;和&lt;strong&gt;研究深度&lt;/strong&gt;。这些问题只能靠自己后面用时间给填回来，希望自己继续加油吧！&lt;/p&gt;
&lt;p&gt;回到正题，因为涉及的新东西有点多，所以小结拆分为3个部分，分别介绍&lt;strong&gt;WebVR&lt;/strong&gt;、&lt;strong&gt;Web Audio API&lt;/strong&gt;、&lt;strong&gt;音乐节奏检测&lt;/strong&gt;。走你～&lt;/p&gt;
&lt;h2&gt;WebVR&lt;/h2&gt;
&lt;p&gt;因为穷和宅，在此之前一直没有体验过VR设备，就更别说啥VR开发了。印象里VR都是有钱人才能玩的东西，其实并不是这样，穷人也可以通过穷人版VR来进行VR体验，这穷人版VR就包括WebVR啦。&lt;/p&gt;
&lt;h3&gt;VR设备&lt;/h3&gt;
&lt;p&gt;为了避免一脸懵逼，我们先了解一下当前市面上的VR设备：&lt;/p&gt;
&lt;p&gt;目前主流的VR设备为头戴式VR设备，即VR头显，功能差异主要体现在以下方面：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;头显自由度&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;控制器自由度&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;供电&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;3自由度（旋转跟踪）&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3自由度（旋转跟踪）&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;PC供电&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;6自由度（定位跟踪）&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6自由度（定位跟踪）&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;移动设备供电&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;旋转跟踪就是允许人们环顾四周或者旋转物体（所有VR头显都支持旋转跟踪），而定位跟踪则对用户在一定范围内的位置变化进行追踪。&lt;/p&gt;
&lt;h4&gt;穷人版VR头显&lt;/h4&gt;
&lt;p&gt;穷人版VR头显泛指使用手机作为头显显示器的设备，部分提供控制器，体验成本较低。&lt;/p&gt;
&lt;p&gt;最最便宜的Cardboard&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;  
&lt;img src=&quot;http://photocdn.sohu.com/20160108/Img433906043.jpeg&quot;&gt;  
&lt;/div&gt;
&lt;p&gt;高贵一点的Daydream&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;  
&lt;img src=&quot;https://img1.tuicool.com/3yARZbr.jpg!web&quot;&gt;  
&lt;/div&gt;
&lt;p&gt;穷人版VR头显设备之间的核心差别其实就在于镜片的好坏以及佩戴的舒适程度，显示效果的好坏以及性能高低取决于你的手机显示屏分辨率的高低和手机性能的高低。没有测试过4k屏，但是1920和2k屏手机的显示效果实测下来都不理想，颗粒状明显。总的来说，穷人版VR更适用于进行初步体验。&lt;/p&gt;
&lt;h4&gt;土豪版VR头显&lt;/h4&gt;
&lt;p&gt;土豪版VR头显不仅拥有为定位跟踪配置的硬件设备，并且头显配备了专用的显示器，渲染则是通过高GPU配置的PC进行，什么1080TI、四路泰坦啥的了解一下。总体来说，效果已较为理想。&lt;/p&gt;
&lt;p&gt;VIVE&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;  
&lt;img style=&quot;width:500px&quot; src=&quot;https://media.wired.com/photos/5af4e6e53733a15a44c5d038/master/w_2400,c_limit/HEADER-HTC-Vive-Pro-Full-Kit-SOURCE-HTC_topart.jpg&quot;&gt;  
&lt;/div&gt;
&lt;p&gt;Oculus&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;  
&lt;img src=&quot;http://www.gamelook.com.cn/wp-content/uploads/2017/10/18-4.jpg&quot;&gt;  
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;那到底WebVR是个啥呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一图胜前言：&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;  
&lt;img style=&quot;width:600px;&quot; src=&quot;http://pazg80lq8.bkt.clouddn.com/WebVR%20Intro.png&quot;&gt;  
&lt;/div&gt;
&lt;p&gt;正如之前介绍的，当前VR设备种类繁多，生态圈处于支离破碎的状态，各个VR设备拥有各自的生态，比如应用商店、控制器等等，各个VR设备、操作系统之间又有着不同的开发规范，给用户及开发者的跨终端体验都带来了极大的不便。WebVR便孕育而出了，其最早由Mozilla所倡导，现由W3C组织来制定，如今已经成为了一种通用开放标准，它提供了统一的JavaScript API，使开发者可以获取VR设备的输入信息。跨终端不再需要付出庞大的工作量，只需要你的VR设备上装有一个支持WebVR的浏览器，是不是美滋滋。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;VR平台&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;浏览器支持&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Cardboard&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;chrome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Dayream&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;chrome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;GearVR&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Oculus Carmel、Samsung Internet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Oculus Rift&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Firefox、Chromium experimental分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;HTC Vive&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Firefox、Chromium experimental分支、Servo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;WebVR框架&lt;/h3&gt;
&lt;p&gt;WebVR开发依赖于WebGL，所以一般WebVR框架都是基于Three.js的。国外主要由谷歌和Facebook对WebVR生态布局，Facebook和火狐都开发了自己的WebVR框架，即&lt;a href=&quot;https://github.com/facebook/react-360&quot;&gt;React VR&lt;/a&gt;和&lt;a href=&quot;https://github.com/aframevr/aframe&quot;&gt;A-Frame&lt;/a&gt;。其中当数A-Frame最为知名，这次使用的也是A-Frame框架，值得一提的是他的可视化调试面板是相当的牛，感觉都快整出Unity的感觉了。&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;  
&lt;img style=&quot;width:600px;&quot; src=&quot;http://pazg80lq8.bkt.clouddn.com/%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF.png&quot;&gt;  
&lt;/div&gt;
&lt;p&gt;因为只实际使用了A-Frame这一个框架，所以在此就不进行框架对比了。A-Frame使用下来文档完善且例子丰富，还是非常容易上手的，并且其和Unity有点像的实体-组件开发架构也提高了拓展性和可维护性。但是说到底不管什么WebVR框架，吃的还是开发者WebGL以及Three.js的功底，因为框架只不过是为开发者提供了一些简单常用物体的封装，当需要实现一些稍微复杂的效果还是得上Three.js甚至WebGL。这块自己是缺东西的，所以毕设中使用到的3D物体要么是框架自带封装，要么就是从官方例子那扒过来的😂😂😂。。。&lt;/p&gt;
&lt;h2&gt;Web Audio API&lt;/h2&gt;
&lt;p&gt;首先Web Audio API是啥？Web Audio API提供了在Web上分析或处理底层音频数据的一个通用的规范，是Web平台上对音频处理的一套高级API，这个API设计的初衷是用来编写游戏声音引擎以及完成在各种音乐制作软件中对声音的编辑和混缩的，所以十分复杂和强大，体量相当于Canvas API，通过Web Audio API可以获取音频时频域信息（音乐可视化）、过滤特定频率（通过高通、低通等各种滤波器）、立体声、各个声道处理，甚至生成音效等等。值得一提的是这个API对于时间精度控制得非常精确，实测确实几乎没有延迟。&lt;/p&gt;
&lt;p&gt;在音频上下文中的各个音频节点通过输入输出相互连接，形成一个链，即代表了整个音频数据的处理流程。一个通过Web Audio API处理音频的基本流程如下图所示：&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;  
&lt;img style=&quot;width:200px;&quot; src=&quot;http://pazg80lq8.bkt.clouddn.com/Web%20Audio%20API%20%E6%B5%81%E7%A8%8B.png&quot;&gt;  
&lt;/div&gt;
&lt;p&gt;开发者在Web Audio API中处理音频文件首先需要创建音频上下文（AudioContext），处理音频的过程都将在音频上下文中进行。之后在音频上下文中创建音频源，可以是audio元素或者是音频流。通过连接不同的效果节点，对音频数据进行不同效果的加工处理，如混响、滤波等。最后连接一个输出节点，比如麦克风，扬声器等等，再经过音频渲染进行最终的效果输出。&lt;/p&gt;
&lt;p&gt;简单的示例代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; audioCtx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; （window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AudioContext &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webkitAudioContext）（）&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//创建实时音频上下文&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; analyser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; audioCtx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;createAnalyser（）&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//创建实时分析节点&lt;/span&gt;
source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; audioCtx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;createMediaStreamSource（stream）&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//连接声源&lt;/span&gt;
source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connect（analyser）&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//声源连接分析节点&lt;/span&gt;
analyser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connect（distortion）&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//分析节点连接输出设备&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;接下来对API所接触到的各部分进行介绍和示例演示：&lt;/p&gt;
&lt;h3&gt;音频上下文&lt;/h3&gt;
&lt;p&gt;因为使用Web Audio API处理音频的过程都在音频上下文中进行，所以首先对音频上下文进行介绍。&lt;/p&gt;
&lt;p&gt;类似于Canvas API分为2D绘制上下文和3D绘制上下文，Web Audio API的音频上下文也又分类，分为离线音频上下文（offline AudioContext）和实时音频上下文（AudioContext），顾名思义也可猜出个大概区别：在离线音频上下文中对音频数据的渲染将不经过硬件，说白了就是预分析，输入的音频有多长就渲染多长，并提供一个回调函数尽量快的返回渲染结果（PCM数据）；而实时音频上下文对音频数据的渲染将会经过硬件进行实时渲染。&lt;/p&gt;
&lt;p&gt;离线渲染示例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; OfflineContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OfflineAudioContext&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OfflineContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; audioLength &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sampleRateGuess&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sampleRateGuess&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//numOfChannels,length,sampleRate&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//LoadBuffer封装根据musicSrc发送XMLHttpRequest请求获取音频数据（ArrayBuffer）&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;LoadBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; musicSrc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; destination &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//离线渲染也需要指定输出设备(非硬件，没声)&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createBufferSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; buffer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//ArrayBuffer&lt;/span&gt;

        source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startRendering&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//离线音频上下文特有的回调函数&lt;/span&gt;
            console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`预分析完毕，结果为：&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;buffer&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//AudioBuffer&lt;/span&gt;
            audio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;实时渲染示例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AudioContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; analyser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createAnalyser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//实时分析节点&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; levels &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;analyser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;frequencyBinCount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//频域数据&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; waveform &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;analyser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fftSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//时域数据&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//RAF&lt;/span&gt;
window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;requestAnimationFrame &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;requestAnimationFrame
        &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webkitRequestAnimationFrame
        &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mozRequestAnimationFrame
        &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getLevels&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//实时获取音频频域数据&lt;/span&gt;
  analyser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByteFrequencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;freqByteData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;renderFFT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//可视化效果同步&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getWaveform&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//实时获取音频时域数据&lt;/span&gt;
    analyser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByteTimeDomainData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;waveform&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;renderFFT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//可视化效果同步&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;翻阅W3C规范会发现Web Audio API的很多规定参数都是个迷。。。比如实时取得的频域数据数组大小为什么规定为FFT大小的一半？猜想是浏览器底层实现FFT时为了防止频谱泄露使用了加窗函数（一般取50%)?包括Web Audio API 的卷积运算（Convolution）功能实现环境音效的模拟。在声学中，回声可以用源声音与一个反映各种反射效应的波形的卷积表示（具体怎么实现的呢？）而要验证则需要看浏览器的实现代码。。。所以现在还是老老实实先放一放吧。&lt;/p&gt;
&lt;h2&gt;节奏检测&lt;/h2&gt;
&lt;p&gt;详见&lt;a href=&quot;https://github.com/todaylg/WebVR-Audio-Visualizer&quot;&gt;WebVR-Audio-Visualizer&lt;/a&gt;代码，应用的节奏检测基于时域能量比较和频域能量比较，针对音乐高潮部分节奏点和伴随全曲的节奏点进行检测。&lt;/p&gt;
&lt;h2&gt;To Be Continue&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Hello World!!]]></title><description><![CDATA[伴随着学生机的到期，又迎来了一次新的”Hello World”，博客从Wordpress=>自己整=>Hexo=>Gatsby，在这曲折的更换过程中我越来越认识到 没钱 就老老实实弄静态页的真理。 首先先来安利一波 Gatsby ，对比当下较流行静态网站生成器Jekyll…]]></description><link>www.todaylg.com/hello-world/</link><guid isPermaLink="false">www.todaylg.com/hello-world/</guid><content:encoded>&lt;p&gt;伴随着学生机的到期，又迎来了一次新的”Hello World”，博客从Wordpress=&gt;自己整=&gt;Hexo=&gt;Gatsby，在这曲折的更换过程中我越来越认识到&lt;strong&gt;没钱&lt;/strong&gt;就老老实实弄静态页的真理。&lt;/p&gt;
&lt;p&gt;首先先来安利一波&lt;a href=&quot;https://github.com/gatsbyjs/gatsby&quot;&gt;Gatsby&lt;/a&gt;，对比当下较流行静态网站生成器Jekyll和Hexo，其核心优势在于其基于全新的Web技术，前端React + Webpack，后端(伪)数据读取使用的Graphql，还自带Google的PRPL标准（PWA的最佳实践），技术栈新得让人害怕。。。同样功能Vue阵营的&lt;a href=&quot;https://github.com/nuxt/nuxt.js&quot;&gt;Nuxt&lt;/a&gt;以及&lt;a href=&quot;https://github.com/vuejs/vuepress&quot;&gt;VuePress&lt;/a&gt;也可以做到。虽然当前两者因为比较新，相比较于Hexo以及Jekyll在Themes（Starter）的积累处于完败的阵势（又少又丑），但毕竟是面向未来的，相信以后应该还是会慢慢将Hexo和Jekyll给淘汰掉。&lt;/p&gt;
&lt;p&gt;初衷是想为Gatsby贡献一套Anime主题的Starter的，奈何青春所剩无几，React+Graphql+Dota2 = GG。过几天又得回去工作了。。。想必是怼不动了，还是交给年轻人或者效率高得令人发指的大佬们吧。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[初探WebGL(二)]]></title><description><![CDATA[Part 4 Welcome to 3D!! 三维比二维多了一个深度信息(Z轴)，所以为了确定孤独的观测者的状态需要确定三个信息：1.观测的目标的坐标。2.观测者的坐标（视点）。…]]></description><link>www.todaylg.com/webGL-learning-2/</link><guid isPermaLink="false">www.todaylg.com/webGL-learning-2/</guid><content:encoded>&lt;h2&gt;Part 4&lt;/h2&gt;
&lt;p&gt;Welcome to 3D!!&lt;/p&gt;
&lt;p&gt;三维比二维多了一个深度信息(Z轴)，所以为了确定孤独的观测者的状态需要确定三个信息：1.观测的目标的坐标。2.观测者的坐标（视点）。3.上方向（比如你坐着不动头却乱扭，看到的场景也会变）。有了这三个矢量就可以创建出对应的视图矩阵，具体怎么算的我们暂且先不深入：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/19/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;在代码中我们将创建出来的视图矩阵直接与顶点坐标相乘，简单粗暴。WebGL默认视点(0,0,0)，观测点(0,0,-1),上方向（0,1,0）。&lt;/p&gt;
&lt;p&gt;其实视点是可以不需要移动的，比如视点后移一个单位，是完全等价于把被观察对象向前平移一个单位的，二者本质是一样的，都可以用矩阵来描述。&lt;/p&gt;
&lt;p&gt;而将旋转矩阵、平移矩阵、缩放矩阵和视图矩阵组合（就是矩阵相乘），比如先对三角形进行旋转变换，再怼旋转后的三角形进行与移动视点等效的变换，得到的就是在某个视点观察旋转后的三角形的图像了，而相乘后的矩阵就叫模型视图矩阵。&lt;/p&gt;
&lt;h3&gt;键盘控制移动视点&lt;/h3&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/20/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;但是会发现转着转着会少一个角，这是因为我们没有指定可视范围造成的，即观察者的可视空间。常用的可视空间为正射投影（长方体）、金字塔(透视)投影（四棱锥）。&lt;/p&gt;
&lt;h3&gt;正射投影&lt;/h3&gt;
&lt;p&gt;首先可视空间都是由前后两个矩形表面来确定的，分别是近裁剪面和远裁剪面，前者的四个顶点为(right,top,-near),(-left,top,-near),(-left,-bottom,-near),(right,-bottom,-near)，后者的四个顶点为(right,top,-far),(-left,top,-far),(-left,-bottom,-far),(right,-bottom,-far).&lt;/p&gt;
&lt;p&gt;而正射投影是长方体的可视空间，那么其在xy轴上的坐标都是一样的，也就是需要确定的参数为：left,right,bottom,top,near,far。通过这些参数我们就可以计算得出正射投影矩阵（怎么算先不研究）,左右箭头修改near和far的值：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/21/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;知道了这个道理我们就可以修复之前缺角的情况了，无非就是把far调远一点,那顶点坐标再乘以一个投影矩阵呗：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/22/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h3&gt;透视投影&lt;/h3&gt;
&lt;p&gt;在正射投影中物体不管距离的远近是多大就多大，但是我们真实世界中很明显物体是近大远小的，这就是透视投影的可视空间了。&lt;/p&gt;
&lt;p&gt;透视投影需要的参数与正射投影不一样，需要确定的是可视空间顶面和底面的夹角fov、近裁剪面的宽高比aspect、near、far的位置四个参数，也是通过这几个参数可以计算出透视投影的矩阵（具体怎么算出来的先不研究）：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/23/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;将投影矩阵、视图矩阵、模型矩阵相乘可以得到模型试图投影矩阵。。。。上面的例子画了9个三角形，其实我们只需要画三个，剩下的通过变换即可得到:&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/23/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h3&gt;前后关系&lt;/h3&gt;
&lt;p&gt;WebGL默认会按照缓冲区中的顺序绘制图形，后面的盖前面的，为了解决前后关系的问题，WebGL提供了隐藏面消除的功能：&lt;/p&gt;
&lt;h3&gt;gl.enable(cap)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cap&lt;/td&gt;
&lt;td&gt;指定需要开启的功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.DEPTH_TEST(隐藏面消除)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.BLEND(混合)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.POLYGON
_
OFFSET
_
FILL(多边形位移)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;gl.clear()除了可以清楚颜色缓冲区，还可以清除深度缓冲区，深度缓冲区就是为了帮助WebGL进行隐藏面的消除，用来存储深度信息的。在绘制任意一帧之前都必须清除深度缓冲区，以消除绘制上一帧时留下的痕迹。&lt;/p&gt;
&lt;p&gt;我们只需要开启应场面消除，在绘制之前清空深度缓冲区，之后就不用在意放入缓冲区的顺序（倒着放入也无所谓）了：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/24/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;但是当Z轴的值完全一样的时候就会出现深度冲突的情况，因为两个表面过于接近，深度缓冲区的有限精度已经不能区分前后关系了，这时候再开启多边形偏移即可：&lt;/p&gt;
&lt;h3&gt;gl.polygonOffset(factor,units)&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;指定加到每个顶点会之后Z值上的偏移量，偏移量按照公式m x factor+ r x units计算(m表示顶点所在表面相对于观察者视线的角度，r表示硬件能够区分两个Z值之差的最小值)：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/25/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;先画了一个绿色的三角形，然后通过gl.polygonOffset()设置了多边形偏移参数，使得之后的绘制受到多边形偏移机制影响，再画一个黄色三角形，这样就避免了深度冲突了。&lt;/p&gt;
&lt;h3&gt;画个立方体&lt;/h3&gt;
&lt;p&gt;画立方体有很多种方法，比如一个面用两个三角形拼，6个面就是6x6=36个顶点，或者用gl.TRIANGLE_FAN来画，四个顶点就可以绘制一个四边形，就只需要4x6=24个顶点，一般我们都是使用gl.drawElements()替代gl.drawArrays()来进行绘制，能够避免重复定义顶点，保持顶点数量最小，立方体的话就是8个顶点，每个三角形与顶点列表的三个顶点相关联。&lt;/p&gt;
&lt;h3&gt;gl.drawElements(mode,count,type,offset)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mode&lt;/td&gt;
&lt;td&gt;指定绘制方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;指定绘制顶点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;指定索引值数据类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;offset&lt;/td&gt;
&lt;td&gt;指定索引数组中开始绘制的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们需要将顶点索引写入到缓冲区并绑定到gl.ELEMENT_ARRAY_BUFFER上：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/26/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;你会发现每个顶点的颜色影响到了三个面，我们只要单独把顶点坐标拎出来即可：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/27/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h2&gt;Part 5&lt;/h2&gt;
&lt;p&gt;OF光呢！！！？？？&lt;/p&gt;
&lt;p&gt;常见的光为以下三种：&lt;/p&gt;
&lt;p&gt;1.平行光。可以用一个方向和一个颜色来定义。&lt;/p&gt;
&lt;p&gt;2.点光源光。可以用一个坐标和颜色来定义。&lt;/p&gt;
&lt;p&gt;3.环境光。只需要颜色即可。&lt;/p&gt;
&lt;p&gt;反射类型分为：&lt;/p&gt;
&lt;p&gt;1.漫反射。漫反射是针对于平行光或者点光源而言的，反射光的颜色取决于入射光的颜色x表面基底色xcos(angle)(angle为入射光与表面形成的入射角，可以根据光线和表面的方向计算得出)&lt;/p&gt;
&lt;p&gt;2.环境反射。环境反射是针对于环境光而言的，反射光的方向可以认为就是入射光的反方向，即取决于入射光颜色x表面基底色。&lt;/p&gt;
&lt;p&gt;如果二者同时存在就直接相加。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/28/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;再加上环境光：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/29/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;要是加上变换的话情况就更复杂了，平移还好，不会改变平面的法向量，但是旋转就会了，这时候强大的逆转置矩阵就有声音了，怎么计算经过变换（乘以模型矩阵）后的法向量呢？只要将变换之前的法向量乘以模型矩阵的逆转置矩阵即可。首先逆矩阵是什么，矩阵乘以逆矩阵为单位矩阵，转置就是行列进行调换。（果然全是数学😂。。想放弃治疗了。。😢）&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/30/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;换成点光源光（需要光源的世界坐标了）：&lt;/p&gt;
&lt;p&gt;逐顶点：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/31/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;逐片元：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/32/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;动起来：&lt;/p&gt;
&lt;p&gt;环境光：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/33/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;点光源光：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;420&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/34/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h3&gt;initShaders()&lt;/h3&gt;
&lt;p&gt;其作用总的来说就是编译GLSL ES代码，创建和初始化着色器（顶点和片元）：&lt;/p&gt;
&lt;p&gt;1.创建着色器对象（gl.createShader()）&lt;/p&gt;
&lt;p&gt;2.向着色器对象中填充着色器程序的源代码（gl.shaderSource()）&lt;/p&gt;
&lt;p&gt;3.编译着色器（gl.compileShader()）&lt;/p&gt;
&lt;p&gt;4.创建程序对象（gl.createProgram()）&lt;/p&gt;
&lt;p&gt;5.为程序对象分配着色器（gl.attachShader()）&lt;/p&gt;
&lt;p&gt;6.连接程序对象（gl.linkProgram()）&lt;/p&gt;
&lt;p&gt;7.使用程序对象（gl.useProgram()）&lt;/p&gt;
&lt;p&gt;这里的着色器对象用于管理一个顶点着色器或者一个片元着色器，每一个着色器都有一个着色器对象。程序对象是管理着色器对象的容器，在WebGL中一个程序对象必须包含一个顶点着色器和一个片元着色器。所以一般都是两个着色器（顶点加片元）对象和一个程序对象。&lt;/p&gt;
&lt;h3&gt;1.创建着色器对象（gl.createShader()）&lt;/h3&gt;
&lt;p&gt;所有的着色器对象都必须通过调用gl.createShader()来创建。&lt;/p&gt;
&lt;h3&gt;gl.createShader(type)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;gl.VERTEX
_
SHADER(顶点着色器)或者gl.FRAGMENT
_
SHADER(片元着色器)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;有create必有delete，所以gl.deleteShader()函数则是用来删除（不是马上删除，会等到程序对象不再使用该着色器后再删除）着色器对象的。&lt;/p&gt;
&lt;h3&gt;2.向着色器对象中填充着色器程序的源代码（gl.shaderSource()）&lt;/h3&gt;
&lt;h3&gt;gl.shaderSource(shader, source)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;shader&lt;/td&gt;
&lt;td&gt;指定需要传入代码的着色器对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;source&lt;/td&gt;
&lt;td&gt;指定字符串形式的代码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;3.编译着色器（gl.compileShader()）&lt;/h3&gt;
&lt;p&gt;传入源代码之后还需要编译之后才能使用（所以要是更新了源代码想要效果也跟着更新就还需要重新编译）&lt;/p&gt;
&lt;h3&gt;gl.compileShader(shader)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;shader&lt;/td&gt;
&lt;td&gt;待编译的着色器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;debug的话可以调用gl.getShaderParameter()函数来检查着色器的状态。&lt;/p&gt;
&lt;h3&gt;gl.getShaderParameter(shader, pname)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;shader&lt;/td&gt;
&lt;td&gt;指定待获取参数的着色器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shader&lt;/td&gt;
&lt;td&gt;指定待获取参数的类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.SHADER_TYPE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.DELETE_STATUS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.COMPILE_STATUS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;要是直接编译失败gl.getShaderParameter会返回false，我们可以通过getShaderInfoLog（shader）来查看信息日志&lt;/p&gt;
&lt;h3&gt;4.创建程序对象（gl.createProgram()）&lt;/h3&gt;
&lt;p&gt;之前使用的gl.getAttribLocation和gl.getUniformLocation函数的第一个参数就是这个程序对象。&lt;/p&gt;
&lt;h3&gt;gl.createProgram()&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一旦程序对象被创建之后，需要向程序附上两个着色器：&lt;/p&gt;
&lt;h3&gt;5.为程序对象分配着色器（gl.attachShader()）&lt;/h3&gt;
&lt;h3&gt;gl.attachShader(program, shader)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;program&lt;/td&gt;
&lt;td&gt;指定程序对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shader&lt;/td&gt;
&lt;td&gt;指定着色器对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;同样的gl.detachShader函数用来解除分配给程序对象的着色器。&lt;/p&gt;
&lt;h3&gt;6.连接程序对象（gl.linkProgram()）&lt;/h3&gt;
&lt;p&gt;在为程序对象分配了两个着色器对象后，还需要将顶点着色器和片元着色器连接起来。&lt;/p&gt;
&lt;h3&gt;gl.linkProgram(program)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;program&lt;/td&gt;
&lt;td&gt;连接指定程序对象中的着色器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;程序对象进行连接操作，目的是保证顶点着色器和片元着色器的varying变量同名同类型且一一对应；顶点着色器对每个varying变量赋了值；顶点着色器和片元着色器中的同名uniform变量也是同类型的（无需一一对应）；着色器中的attribute、uniform、varying变量的个数没有超过着色器的上限。&lt;/p&gt;
&lt;p&gt;查看是否连接成功可以通过调用gl.getProgramPara-meters()函数来实现，如果连接失败了也可以通过调用gl.getProgramInfoLog从信息日志中获取连接出错信息。&lt;/p&gt;
&lt;h3&gt;7.使用程序对象（gl.useProgram()）&lt;/h3&gt;
&lt;p&gt;最后就是通过调用gl.useProgram()来告知WebGL系统绘制时使用哪个程序对象&lt;/p&gt;
&lt;h3&gt;gl.useProgram(program)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;program&lt;/td&gt;
&lt;td&gt;指定待使用的程序对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;所以initShaders()函数的内部流程也是这几步。&lt;/p&gt;
&lt;h3&gt;放弃治疗了放弃治疗了。。。。&lt;/h3&gt;
&lt;h2&gt;实例分析&lt;/h2&gt;
&lt;p&gt;这是CodePen上一个大佬的WebGL粒子效果的例子，瞅了瞅发现好像不是那么复杂，决定好好研究下代码，先上个改巴改巴后的最终效果（jsfiddle效果直接出不来。。。所以换成了codepen）：&lt;/p&gt;
&lt;iframe height=&apos;307&apos; scrolling=&apos;no&apos; title=&apos;WebGL_Learning_Day1&apos; src=&apos;//codepen.io/todaylg/embed/GOwdWM/?height=307&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/todaylg/pen/GOwdWM/&apos;&gt;WebGL_Learning_Day1&lt;/a&gt; by todaylg (&lt;a href=&apos;https://codepen.io/todaylg&apos;&gt;@todaylg&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;代码分析：&lt;/p&gt;
&lt;p&gt;首先看到html，其中定义了简单的顶点着色器和片元着色器代码：&lt;/p&gt;
&lt;p&gt;顶点着色器：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;attribute vec3 vertexPosition;
uniform mat4 modelViewMatrix;
uniform mat4 perspectiveMatrix;

void main(void) {
    gl_Position = perspectiveMatrix * modelViewMatrix * vec4(  vertexPosition, 1.0);
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;片元着色器：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;#ifdef GL_ES
precision highp float;
#endif
void main(void) {
    gl_FragColor = vec4(0.2, 0.3, 0.4, 1.0);
    //gl_FragColor = vec4(0.4, 0.2, 0.3, 1.0);
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;顶点着色器程序创建了模型矩阵、投影矩阵、3维顶点坐标，为了统一计算把3维顶点坐标换为了四维参与运算得到最终的位置。片元着色器程序则是直接简单粗暴的写死了粒子的颜色。&lt;/p&gt;
&lt;p&gt;转到js：&lt;/p&gt;
&lt;p&gt;loadScene()函数相当于做了initSharder()函数的活，完成了程序对象的创建和使用，之后开启混合模式并且对随机变量进行初始化、金字塔投影矩阵的初始化、模型矩阵的初始化。&lt;/p&gt;
&lt;p&gt;setup()中初始化的rad代表粒子旋转轨迹圆的半径，theta相当于angle，velTheta相当于变换的幅度（角度变换），freq和boldRate不用管，没有用到，randomPosX/Y是整个屏幕内的随机坐标。&lt;/p&gt;
&lt;p&gt;核心方法在draw0/draw1/draw2方法，这几个方法会在一定间隔时间以内循环依次调用。&lt;/p&gt;
&lt;h3&gt;draw0：&lt;/h3&gt;
&lt;hr&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; py&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pTheta&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rad&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; targetX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; targetY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; numLines &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//因为是线，粒子数量乘以2，然后将多复制出来的一份粒子坐标略做偏移，之后相连，效果就出来了？？？？？并不对i+=2才是导致numLines * 2的原因&lt;/span&gt;
    count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    bp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//确保线起始点一致&lt;/span&gt;

    num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    targetX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; randomTargetXArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//init时的随机位置&lt;/span&gt;
    targetY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; randomTargetYArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


    px &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    px &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetX &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.04&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//相较于上一时刻的位置略做偏移&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//所以虽然是线但是两个点的坐标相差不大。&lt;/span&gt;


    &lt;span class=&quot;token comment&quot;&gt;//py = (Math.sin(cn) + 1) * .2 * (Math.random() * .5 - .25);&lt;/span&gt;
    py &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    py &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; py&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.04&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.06&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//位置略做偏移&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; py&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;这里需要注意因为缓冲区里面只存放顶点的坐标信息，而不带大小、透明度等其他信息，所以gl.drawArray的时候要是画点（即第一个参数传入gl.POINTS），那么粒子亮度很低（因为太小了），视觉效果不好。这里采用的办法是画线，而每次绘制时先同步线的起终点，之后对线的终点做微小的位移，draw0/1/2都是如此。&lt;/p&gt;
&lt;p&gt;draw0最简单，就是把各个坐标朝最开始全屏随机分配的坐标归位回去，也就是回到分散状态的动画效果。&lt;/p&gt;
&lt;h3&gt;draw1&lt;/h3&gt;
&lt;hr&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; py&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pTheta&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rad&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; targetX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; targetY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; numLines &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    bp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    pTheta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; thetaArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    rad &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; velRadArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    pTheta &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; velThetaArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    thetaArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pTheta&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    targetX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rad &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pTheta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    targetY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rad &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pTheta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    px &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    px &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetX &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//朝方向缓动&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//py = (Math.sin(cn) + 1) * .2 * (Math.random() * .5 - .25);&lt;/span&gt;
    py &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    py &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; py&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; py&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;draw1则是朝屏幕中心（WebGL的原点）以rad为半径，每次变换velThetaArr角度的圆为轨迹运动。&lt;/p&gt;
&lt;h3&gt;draw2&lt;/h3&gt;
&lt;hr&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cn &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; py&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pTheta&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rad&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; numLines &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    bp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// copy old positions&lt;/span&gt;

    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    pTheta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; thetaArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    rad &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; velRadArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// + Math.cos(pTheta + i * freqArr[i]) *  boldRateArr[num];&lt;/span&gt;

    pTheta &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; velThetaArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    thetaArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pTheta&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    px &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    px &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; rad &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pTheta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//cos、sin都会有负值&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;token comment&quot;&gt;//py = (Math.sin(cn) + 1) * .2 * (Math.random() * .5 - .25);&lt;/span&gt;
    py &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    py &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; rad &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pTheta&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//p *= ( Math.random() -.5);&lt;/span&gt;
    vertices&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bp &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; py&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;draw2的角度变化和draw1是一致的，但是粒子旋转的轨迹圆不在是以屏幕中心为统一坐标，而是分散开来了。&lt;/p&gt;
&lt;p&gt;最后通过timer和draw：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  drawType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;drawType &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;drawType&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;draw1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;draw2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;draw0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;在三者之间循环依次调用，效果就完成啦。&lt;/p&gt;
&lt;iframe height=&apos;307&apos; scrolling=&apos;no&apos; title=&apos;WebGL_Learning_Day1&apos; src=&apos;//codepen.io/todaylg/embed/GOwdWM/?height=307&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/todaylg/pen/GOwdWM/&apos;&gt;WebGL_Learning_Day1&lt;/a&gt; by todaylg (&lt;a href=&apos;https://codepen.io/todaylg&apos;&gt;@todaylg&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;h2&gt;Rewrite (18-08-20)&lt;/h2&gt;
&lt;p&gt;打算重新再从顶向下学习一下WebGL，主要目的是补齐相关的图形学知识，这主要是我发现了一本相当相当适合缺知识块的同学入坑的好书：&lt;strong&gt;交互式计算机图形学（基于WebGL的自顶向下方法）&lt;/strong&gt;，是一本国外的图形学教材，但是基于的是WebGL，很全面的覆盖了图形学的知识点，感觉要是好好怼完这本书，应该是收获蛮大的。&lt;/p&gt;
&lt;h3&gt;Sierpinski&lt;/h3&gt;
&lt;iframe height=&apos;357&apos; scrolling=&apos;no&apos; title=&apos;Sierpinski&apos; src=&apos;//codepen.io/todaylg/embed/gjjgXZ/?height=357&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/todaylg/pen/gjjgXZ/&apos;&gt;Sierpinski&lt;/a&gt; by todaylg (&lt;a href=&apos;https://codepen.io/todaylg&apos;&gt;@todaylg&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;h3&gt;ParticleLine&lt;/h3&gt;
&lt;iframe height=&apos;400&apos; scrolling=&apos;no&apos; title=&apos;WebGL\_Learning\_Day1&apos; src=&apos;//codepen.io/todaylg/embed/GOwdWM/?height=307&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/todaylg/pen/GOwdWM/&apos;&gt;WebGL\_Learning\_Day1&lt;/a&gt; by todaylg (&lt;a href=&apos;https://codepen.io/todaylg&apos;&gt;@todaylg&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[初探WebGL(一)]]></title><description><![CDATA[Part 1 万里长征的第一步吧。。。也不知道自己能走几步，毕竟底子真是差啊（方程都解不出来的人研究什么WebGL，好好搬砖不行吗？！经常这样想），但是奈何脑子里的骚操作不上3D…]]></description><link>www.todaylg.com/webGL-learning-1/</link><guid isPermaLink="false">www.todaylg.com/webGL-learning-1/</guid><content:encoded>&lt;h2&gt;Part 1&lt;/h2&gt;
&lt;p&gt;万里长征的第一步吧。。。也不知道自己能走几步，毕竟底子真是差啊（方程都解不出来的人研究什么WebGL，好好搬砖不行吗？！经常这样想），但是奈何脑子里的骚操作不上3D又没法实现出来，但是效果后面又都是腿都跪麻的数学。。。很难受。。。总之先读本入门的书瞅瞅吧！有个大致了解再说啦！&lt;/p&gt;
&lt;p&gt;先上一张Adobe的图：
&lt;img src=&quot;http://wwwimages.adobe.com/content/dam/acom/en/devnet/flashplayer/articles/how-stage3d-works/fig02.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;一些基本的概念记上来：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;着色器&lt;/strong&gt;：运行在GPU中负责渲染算法的程序。最常用的为顶点着色器和片元着色器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GLSL&lt;/strong&gt;: openGL Shading Language (Directx为Hight-Level Shading Language(HLSL))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;光栅化&lt;/strong&gt;：“连续”的三维场景显示到”离散”（红绿蓝LED）的显示器上所经过的过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;片元&lt;/strong&gt;：和最终显示在屏幕上的像素很接近，但是是一对一或多对一的关系，片元能否显示为像素还需要经过深度测试、透明度测试等。&lt;/p&gt;
&lt;h2&gt;最短的WebGL程序：清空绘图区&lt;/h2&gt;
&lt;p&gt;说是清空，其实是用黑色填充了绘图区&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;一般都将上下文取名为gl，因为WebGL基于OpenGL ES，这样命名可以使WebGL与OpenGL ES中的函数名对应（gl.clearColor就相当于glClearColor这样）。&lt;/p&gt;
&lt;p&gt;gl.clearColor()接受的四个参数代表RGBA（0.0~1.0,不是0~255！！），指定一次颜色后会缓存起来直到下一次重新设置颜色才会改变。&lt;/p&gt;
&lt;h4&gt;gl.clearColor()&lt;/h4&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;0.0~1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;0.0~1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;0.0~1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;0.0~1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后的clear()方法传入了一个奇怪的参数：gl.COLOR_BUFFER_BIT。清空绘图区域实际上是清空颜色缓冲区(color buffer)，传参gl.COLOR_BUFFER_BIT就是告诉WebGL清空颜色缓冲区（WebGL还有其他缓冲区：深度缓冲区和模板缓冲区）。&lt;/p&gt;
&lt;h4&gt;gl.clear()&lt;/h4&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;相关函数&lt;/th&gt;
&lt;th&gt;函数默认值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;gl.COLOR
_
BUFFER
_
BIT&lt;/td&gt;
&lt;td&gt;指定颜色缓冲区&lt;/td&gt;
&lt;td&gt;gl.clearColor(r,g,b,a)&lt;/td&gt;
&lt;td&gt;(0.0,0.0,0.0,0.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.DEPTH
_
BUFFER
_
BIT&lt;/td&gt;
&lt;td&gt;指定深度缓冲区&lt;/td&gt;
&lt;td&gt;gl.clearDepth(depth)&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.STENCIL
_
BUFFER
_
BIT&lt;/td&gt;
&lt;td&gt;指定模板缓冲区&lt;/td&gt;
&lt;td&gt;gl.clearStencil(s)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可以用位操作符OR(|)指定多个缓冲区。&lt;/p&gt;
&lt;h2&gt;画个点&lt;/h2&gt;
&lt;p&gt;着色器出场了。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/1/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;注意着色器程序里分号是不能少的。着色器程序和C一样必须包含一个main函数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;vec4&lt;/td&gt;
&lt;td&gt;gl_Position&lt;/td&gt;
&lt;td&gt;四个浮点数组成的矢量，在这里表示顶点的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;gl_PointSize&lt;/td&gt;
&lt;td&gt;浮点数，在这里表示点的尺寸(像素数)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;vec4()&lt;/h4&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;v0,v1,v2,v3 四个浮点型分量&lt;/td&gt;
&lt;td&gt;由这四个分量组成的vec4对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;由4个分量组成的矢量被称为齐次坐标，齐次坐标可以提高处理三维数据的效率，所以很常用。虽然齐次坐标是四维的，但是如果最后一个分量是1.0，那这个齐次坐标就可以表示前面三个分量为其坐标值的那个点。所以需要用齐次坐标表示顶点坐标的时候，最后一个分量直接赋1.0就行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;齐次坐标：&lt;/strong&gt;(x,y,z,w)，等价于三维坐标：(x/w,y/w,z/w)，当w为1的时候就可以当三维坐标来用。齐次坐标的存在使得使用矩阵乘法来描述顶点变换成为了可能。&lt;/p&gt;
&lt;h4&gt;gl.drawArray()&lt;/h4&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mode(指定绘制的方式)&lt;/td&gt;
&lt;td&gt;gl.POINTS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.LINES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.LINE_STRIP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.LINE_LOOP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;first(指定从哪个顶点开始绘制)&lt;/td&gt;
&lt;td&gt;整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;count(指定绘制需要用到多少个顶点)&lt;/td&gt;
&lt;td&gt;整数型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在清空绘制区域之后，可以使用强大的gl.drawArray()来绘制各种图形。gl.drawArray()执行count次，从first开始每次处理一个顶点。顶点着色器执行完后片元着色器开始执行，最后完成绘制。
3&lt;/p&gt;
&lt;h2&gt;WebGL的坐标系&lt;/h2&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/2/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;WebGL坐标系和canvas坐标系不一样，canvas原点在左上角，沿x轴向右为正值，没y轴向下为正值。而WebGL原点在中心，沿x轴向右为正值，没y轴向上为正值，z轴由屏幕向外为正值，即右手坐标系（右手大拇指开始依次x、y、z轴）&lt;/p&gt;
&lt;h2&gt;再画个点&lt;/h2&gt;
&lt;p&gt;WebGL程序由JavaScript和着色器程序一起组成，那二者之间是如何通信的呢？有两种方法可以做到这点：attribute变量和uniform变量，前者用于传输顶点相关的数据，后者用于传输与顶点无关的数据，现在用attrubute来传输顶点的坐标。&lt;/p&gt;
&lt;h4&gt;attrubute&lt;/h4&gt;
&lt;p&gt;attrubute是GLSL ES的变量，用于从外部向顶点着色器传输数据，只有顶点着色器可以使用。就相当于定义这个变量，再把这个变量赋给要给的值，之后向这个变量传递数据就行了。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/3/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;attribute vec4 a_Position;这句代码中的attribute称为存储限定符，表示接下来的变量是一个attribute变量，attribute变量必须是全局变量，数据从外部传给它，声明格式为存储限定符-类型-变量名。&lt;/p&gt;
&lt;h4&gt;gl.getAttribLocation&lt;/h4&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;program&lt;/td&gt;
&lt;td&gt;指定包含顶点着色器和片元着色器的着色器程序对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;指定想要获取其存储地址的attribute变量名称&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;参数gl.program先不管，方法会返回指定的attribute变量的存储地址（没有则返回-1）&lt;/p&gt;
&lt;h4&gt;gl.vertexAttrib3f（vertexAttrib+3个参数+float）&lt;/h4&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;location&lt;/td&gt;
&lt;td&gt;指定将要修改的attribute变量的存储位置（就是上面那个方法取到的地址）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v0&lt;/td&gt;
&lt;td&gt;指定填充attribute变量第一个分量的值 (x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;指定填充attribute变量第二个分量的值 (y)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;指定填充attribute变量第三个分量的值 (z)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其实是有v3的，但是这个方法直接不写默认就会把第四个分量设置为1.0,何乐而不为。&lt;/p&gt;
&lt;p&gt;同理gl.vertexAttrib1f就是只传v0，2f就是v0和v1，4f就是v0,v1,v2,v3.少传的参数除了第四个会填充上1.0以外，其他的都填充0.0。&lt;/p&gt;
&lt;p&gt;现在直接在JavaScript里修改给gl.vertexAttrib3f传的参数值就可以动态修改画出的点的坐标了。同理更改a_PointSize也是这样。再此基础上稍微修改下程序就实现点哪画哪啦：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/4/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;注意和canvas的坐标需要换算一下。&lt;/p&gt;
&lt;h4&gt;uniform&lt;/h4&gt;
&lt;p&gt;要是想动态改变颜色的话那就得上uniform了，步骤和atrribute变量传递是类似的，一个套路。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/5/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;这里的gl.getUniformLocation和gl.getAttribLocation一个意思，差别在于当name不存在时前者返回的是-1而不是null。gl.uniform4f和gl.vertexAttrib3f也是一个套路，同族函数什么的（什么123f）就不赘述了。&lt;/p&gt;
&lt;h2&gt;Part 2&lt;/h2&gt;
&lt;p&gt;早知道线性代数这么有用，当初就好好学啦。。。矩阵来袭！！&lt;/p&gt;
&lt;h2&gt;一次性多画几个点&lt;/h2&gt;
&lt;p&gt;WebGL提供了一个缓冲区对象，可以一次性向着色器传入多个顶点的数据&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/6/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;一下出现了很多新的东西，总的来说initVertexBuffers()方法的作用是创建顶点缓冲区对象，并且把多个顶点的数据保存在缓冲区中，然后将缓冲区传给顶点着色器进行绘制。&lt;/p&gt;
&lt;p&gt;整体的流程是：&lt;/p&gt;
&lt;p&gt;1.先创建缓冲区对象(gl.createBuffer())=&gt;&lt;/p&gt;
&lt;p&gt;2.绑定缓冲区对象(gl.bindBuffer())=&gt;&lt;/p&gt;
&lt;p&gt;3.将数据写入缓冲区对象(gl.bufferData())=&gt;&lt;/p&gt;
&lt;p&gt;4.将缓冲区对象分配给一个attribute变量(gl.vertexAttribPointer())=&gt;&lt;/p&gt;
&lt;p&gt;5.开启attribute变量（gl.enableVertexAttribArray()）。&lt;/p&gt;
&lt;h3&gt;创建缓冲区对象(gl.createBuffer())&lt;/h3&gt;
&lt;p&gt;调用gl.createBuffer()后会创建一个新的缓冲区对象，方法返回这个新创建的缓冲区对象。相对应的还有一个gl.deleteBuffer(buffer)函数可以删除其创建出来的缓冲区对象。&lt;/p&gt;
&lt;h3&gt;绑定缓冲区对象(gl.bindBuffer())&lt;/h3&gt;
&lt;p&gt;绑定是绑定到哪呢？绑定的这个目标是什么？为什么要绑定这个目标？&lt;/p&gt;
&lt;p&gt;原因是我们不能直接向缓冲区写入数据，而只能向目标写入数据，所以要向缓冲区写数据，就必须先绑定（理解为一个temp变量即可）。&lt;/p&gt;
&lt;p&gt;gl.bindBuffer(target, buffer)&lt;/p&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;target&lt;/td&gt;
&lt;td&gt;gl.ARRAY_BUFFER&lt;/td&gt;
&lt;td&gt;表示缓冲区对象中包含了顶点的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.ELEMENT
_
ARRAY
_
BUFFER&lt;/td&gt;
&lt;td&gt;表示缓冲区对象中包含了顶点的索引值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;指定之前由gl.createBuffer()返回的待绑定的缓冲区对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;缓冲区对象中存储着关于顶点的数据（位置坐标）时将其绑定到了gl.ARRAY_BUFFER上。绑定之后我们就可以向缓冲区对象写入数据了。&lt;/p&gt;
&lt;h3&gt;将数据写入缓冲区对象(gl.bufferData())&lt;/h3&gt;
&lt;p&gt;和上面所说的一样，这里写入缓冲区对象其实是写到target再由target写入缓冲区对象的。&lt;/p&gt;
&lt;p&gt;gl.bufferData(target, data, usage)&lt;/p&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;target&lt;/td&gt;
&lt;td&gt;gl.ARRAY
_
BUFFER或者gl.ELEMENT
_
ARRAY_BUFFER&lt;/td&gt;
&lt;td&gt;前面绑定的啥这就是啥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;写入缓冲区对象的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;usage&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;表示程序将如何使用存储在缓冲区对象中的数据。这个参数可以帮助WebGL优化，传的不对也没事，就是慢点而已。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.STATIC_DRAW&lt;/td&gt;
&lt;td&gt;只会向缓冲区对象中写入一次数据，但需要绘制很多次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.STREAM_DRAW&lt;/td&gt;
&lt;td&gt;只会向缓冲区对象中写入一次数据，然后绘制若干次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.DYNAMIC_DRAW&lt;/td&gt;
&lt;td&gt;会向缓冲区对象中多次写入数据，并绘制很多次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里传入的数据是一个JavaScript的Float32Array对象，使用Float32Array是因为这类特殊数组对大量元素都是同一种类型这种情况进行优化（普通的数组对象里面啥都可以存，没有优化），这类特殊数组称为类型化数组。&lt;/p&gt;
&lt;h3&gt;类型化数组&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数组类型&lt;/th&gt;
&lt;th&gt;每个元素所占字节数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Int8Array&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8位整型数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uint8Array&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8位无符号整型数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Int16Array&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16位整型数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uint16Array&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16位无符号整型数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Int32Array&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;32位整型数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uint32Array&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;32位无符号整型数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Float32Array&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;单精度32位浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Float64Array&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;双精度64位浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意类型化数组只能通过new来创建，并且没有push()和pop()方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;get(index)&lt;/td&gt;
&lt;td&gt;获取第index个元素值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set(index, value)&lt;/td&gt;
&lt;td&gt;设置第index个元素的值为value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set(array, offset)&lt;/td&gt;
&lt;td&gt;从第offset个元素开始讲数组array中的值填充进去&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;length&lt;/td&gt;
&lt;td&gt;数组长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BYTES
_
PER
_
ELEMENT&lt;/td&gt;
&lt;td&gt;数组中每个元素所占的字节数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;将缓冲区对象分配给一个attribute变量(gl.vertexAttribPointer())&lt;/h3&gt;
&lt;p&gt;之前使用gl.vertexAttrib[1234]f系列函数为attribute变量分配值，但是这个方法只能想其传输一个值。现在则是将整个数组中的值一次性分配给attribute变量。&lt;/p&gt;
&lt;p&gt;gl.vertexAttribPointer(location,size,type,normalized,stride,offset)&lt;/p&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;location&lt;/td&gt;
&lt;td&gt;指定待分配attribute变量的存储位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;指定缓冲区每个顶点的分量个数(1-4)，若size和attribute变量需要的分量有出入，会补全&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;指定数据格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.UNSIGHNED_BYTE(无符号字节，Uint8Array)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.SHORT(短整型，Int16Array)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.UNSIGHNED_SHORT(无符号短整型，Uint16Array)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.INT(整型，Int32Array)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.UNSIGNED_INT(无符号整型，Uint32Array)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.FLOAT(浮点型，Float32Array)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;normalize&lt;/td&gt;
&lt;td&gt;true or false 表明是否将非浮点型的数据归一化到
[
0,1
]
或
[
-1,1
]
之间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stride&lt;/td&gt;
&lt;td&gt;指定相邻两个顶点间的字节数，默认为0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;location&lt;/td&gt;
&lt;td&gt;指定缓冲区对象中的偏移量（attribute变量从缓冲区的何处开始存储的，从开始就存的设为0）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;现在再回到代码去看gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0);这里的2是因为在缓冲区中只提供了x,y。这样就把整个缓冲区对象分配给了attribute变量了。&lt;/p&gt;
&lt;h3&gt;开启attribute变量（gl.enableVertexAttribArray()）&lt;/h3&gt;
&lt;p&gt;就相当于打开开关一样，为了使顶点着色器能访问缓冲区内的数据，我们需要使用gl.enableVertexAttribArray()来激活attribute变量，使缓冲区对attitude变量的分配生效。&lt;/p&gt;
&lt;p&gt;gl.enableVertexAttribArray(location)就没啥好说的了，传入一个已经分配好的缓冲区attribute变量后就开启了该变量，更应该注意的是这个方法的名字看起来像是处理顶点数组的，其实处理的对象是缓冲区。相对应的gl.disableVertexAttribArray(location)则用于关闭。&lt;/p&gt;
&lt;p&gt;最后调用gl.drawArray(gl.POINTS, 0, n);从缓冲区的第一个坐标开始画起，画n次。总之，心里有个WebGL系统（JS+着色器），也就有了WebGL系统，心里有了缓冲区，也就有了缓冲区。😂&lt;/p&gt;
&lt;h2&gt;Hello Triangle&lt;/h2&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/7/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;代码只修改了两行，一行是删除gl_PointSize = 10.0，这句只有在画单个点的时候才起作用；一行则是修改gl.drawArrays的第一个参数为gl.TRIANGLES。这样三角形就画出来了。简单粗暴源自gl.drawArrays()的强大,其代表了WebGL所能绘制的基本图形：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本图形&lt;/th&gt;
&lt;th&gt;参数mode&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;点&lt;/td&gt;
&lt;td&gt;gl.POINTS&lt;/td&gt;
&lt;td&gt;一些列点，绘制在v0、v1、v2…处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;线段&lt;/td&gt;
&lt;td&gt;gl.LINES&lt;/td&gt;
&lt;td&gt;一些列单独的线段点，绘制在（v0，v1）、（v2，v3）…处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;线条&lt;/td&gt;
&lt;td&gt;gl.LINES_STRIP&lt;/td&gt;
&lt;td&gt;一些列连接的线段点，绘制在（v0，v1）、（v1，v2）…处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;回路&lt;/td&gt;
&lt;td&gt;gl.LINES_LOOP&lt;/td&gt;
&lt;td&gt;一些列连接的线段，相当于gl.LINES_STRIP+（vn,v0）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三角形&lt;/td&gt;
&lt;td&gt;gl.TRIANGLES&lt;/td&gt;
&lt;td&gt;一些列单独的三角形，绘制在（v0,v1,v2）、(v3,v4,v5)…处，不够三个点就忽略了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三角带&lt;/td&gt;
&lt;td&gt;gl.TRIANGLES_STRIP&lt;/td&gt;
&lt;td&gt;一些带状的三角形，每个三角形与前一个三角形共享一条边，即绘制在（v0,v1,v2）、(v2,v1,v3)、(v2,v3,v4)…处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三角扇&lt;/td&gt;
&lt;td&gt;gl.TRIANGLES_FAN&lt;/td&gt;
&lt;td&gt;一些列三角形组成的类似于扇形的图形，绘制在（v0,v1,v2）、(v0,v2,v3)、(v0,v3,v4)…处，不够三个点就忽略了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;WebGL只能绘制点、线段和三角形。但是三角形已经足够构建世界了，如果不够，那就再加几个。&lt;/p&gt;
&lt;h2&gt;Hello Rectangle&lt;/h2&gt;
&lt;p&gt;矩形就是两个三角形，可以用gl.TRIANGLES（6）、gl.TRIANGLES_STRIP（4）、gl.TRIANGLES_FAN（12，4个小三角形）来绘制。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/8/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h2&gt;平移、旋转和缩放&lt;/h2&gt;
&lt;h3&gt;平移&lt;/h3&gt;
&lt;p&gt;平移最简单，直接在每个分量上加上对应要改变的值即可，这是一个逐顶点操作而非逐片元操作，所以发生在顶点着色器上：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/9/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;我们使用uniform变量来表示三角形的平移距离，还是老套路，在着色器程序里创建后，在JavaScript代码中获取其存储位置，然后赋值数据，最后再把数据传给着色器。这里gl.uniform4f()最后一个分量之所以是0.0是因为vec4的各个分量相加时原坐标的最后一个分量为1.0，那要保证加出来的坐标最后一个分量也为1.0,那就只好让这个代表位移的vec4最后一个分量为0.0咯。&lt;/p&gt;
&lt;p&gt;注意GLSL ES中的赋值操作只能发生在相同类型的变量之间（没有JavaScript的隐式转换）。这里都是vec4所以可以直接相加。&lt;/p&gt;
&lt;h3&gt;旋转&lt;/h3&gt;
&lt;p&gt;旋转复杂一点，但都在初中数学范畴以内。描述一个旋转操作比如：绕Z轴（z轴坐标不用变了）旋转b角度（角度的正负按照右手法则旋转，大拇指指向轴的正方形，其他手指的方向就是旋转的正方向（正值））。一顿简单的三角函数和差化积得到旋转后xy和旋转前xy的关系：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/10/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;这样每次新的变换就重新求取一个新的关系式来实现是不科学的，所以。。。。。矩阵来袭。。。&lt;/p&gt;
&lt;h3&gt;变换矩阵：旋转&lt;/h3&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/11/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;一开始定义的u_xformMatrix类型为mat4类型，也就是4x4矩阵。JavaScript并没有专门的表示矩阵的类型，所以使用的是Float32Array，在数组中存储矩阵的每个元素。这就有牵扯到一个问题，数组是一维的，但是矩阵是二维的。WebGL和OpenGL一样，矩阵元素是按列主序列排列的，也就是aeimbfjncgkodnlp这样来的，而不是按行主序的abcdef…&lt;/p&gt;
&lt;h4&gt;gl.uniformMatrix4fv(location,transpose,array)&lt;/h4&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;location&lt;/td&gt;
&lt;td&gt;uniform变量的存储位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transpose&lt;/td&gt;
&lt;td&gt;在WebGL中必须指定为false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;待传输的类型化数组，4x4矩阵按列主序存储在其中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用变换矩阵进行平移、缩放也都是一个套路：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/12/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;不同于OpenGL提供了一系列有用的函数来帮助我们创建变换矩阵，WebGL没有提供矩阵函数，所以除了手动指定变换矩阵的每个元素外就是使用其他大佬的开源矩阵库了。&lt;/p&gt;
&lt;h2&gt;Part 3&lt;/h2&gt;
&lt;p&gt;要同时得到gl_Position和gl_PointSize的信息的话我们有两种方法：&lt;/p&gt;
&lt;p&gt;一种是再创建一个缓冲区对象，将数据写入缓冲区后分配给再创建的一个新的attribute变量，像这样：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/13/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;另一种则是只使用一个缓冲区对象，但是里面的数据是坐标和尺寸交错尺寸的，这时候读取数据的时候就有讲究了，即gl.vertexAttribPointer()函数的第五个参数stride和第六个参数offset派上用场的时候了：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/14/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;gl.vertexAttribPointer()之前有介绍过了，这里的stride参数代表去指定相邻两个顶点间的字节数，offset代表去指定缓冲区对象中的偏移量（即attribute变量是从缓冲区何处开始存储）直接看代码会好理解很多，就是（再配合size参数）指定了两套读取规则分别把数据读出即可。&lt;/p&gt;
&lt;p&gt;通过从顶点着色器传数据到片元着色器来绘制颜色。之前:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;#39;uniform vec4 u_FragColor;\n&amp;#39; + 
  &amp;#39;void main() {\n&amp;#39; +
  &amp;#39;  gl_FragColor = u_FragColor;\n&amp;#39; +
  &amp;#39;}\n&amp;#39;;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;通过uniform变量来将颜色信息传入片元着色器，但是uniform是一致的而不是可变的，一个一个顶点传颜色也太蠢了。所以该到varying变量登场了，其作用是从顶点着色器向片元着色器传输数据：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/15/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;只要片元着色器与顶点着色器用命名相同名字的varying变量数据就自动传过去了，将gl.drawArrays(gl.POINTS)改成gl.TRIANGLES，一个渐变的三角形就出现了！&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/16/embedded/result,js,css,html&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;贼漂亮，仅仅传了三个点的颜色怎么就能搞出一个渐变的三角形呢？？这是什么情况呢？？为什么我们制定三角形的顶点颜色，WebGL就会自动在三角形表面产生颜色的平滑过渡呢？&lt;/p&gt;
&lt;p&gt;顶点着色器和片元着色器之间有两个步骤：图形装配（将孤立的顶点坐标装配成几何图形，几何图形的类别由gl.drawArrays()函数的第一个参数决定）、光栅化（将装配好的几何图形转化为片元）。&lt;/p&gt;
&lt;p&gt;也就是由孤立的顶点到几何图形（点、线、面）再由几何图形分解为片元这么个过程，光栅化结束后程序就开始逐片元调用片元着色器，对于每个片元，片元着色器计算出该片元的颜色写入颜色缓冲区，最后显示出结果。在笔记一中也画过彩色三角形，当时是直接指定了每一个片元的颜色画出来的,比如我们换换，不是直接指定每一片元的颜色，而是让颜色跟随片元所在位置而有所区别：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/17/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;其中的gl_FragCoord是WebGL的内置变量，其第一个和第二个分量表示片元在canvas坐标系中的坐标。&lt;/p&gt;
&lt;p&gt;而使用varying变量完成内插则更为方便，根据顶点的颜色，WebGL会自你得改计算出线段上所有片元的颜色并且赋值到片元着色器中的varying
变量（即从0.0=&gt;1.0、1.0=&gt;0.0这样）。&lt;/p&gt;
&lt;h2&gt;纹理（Texture）&lt;/h2&gt;
&lt;p&gt;纹理映射的作用就是根据纹理图像，将之前光栅化的每个片元涂上合适的颜色，组成纹理图像的像素又称为纹素，每一个纹素的颜色都使用RGB或者RGBA格式编码。&lt;/p&gt;
&lt;p&gt;那这个纹理映射到底是怎么个映射规则呢？首先得知道纹理坐标系统，左下角为（0.0，0.0），右上角为(1.0,1.0)不管多少x多少，都是这样。常常说的uv、st就是指纹理坐标。纹理映射的过程需要顶点着色器和片元着色器的配合：首先在顶点着色器中为每个顶点指点纹理坐标，然后在片元着色器中根据每个片元的纹理坐标从纹理图像中抽取纹素颜色:&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;430&quot; src=&quot;//jsfiddle.net/todaylg/35br4q7m/18/embedded/result,js,css,html&quot; allowpaymentrequest allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;jsfiddle跨域的问题，图像加载不了。程序流程：首先顶点着色器中接收到顶点的纹理坐标，光栅化后传递给片元着色器，片元着色器根据片元的纹理坐标从纹理图像中抽取纹素颜色赋给当前片元，设置顶点的纹理坐标，加载纹理图像，加载完成后使用纹理。&lt;/p&gt;
&lt;p&gt;结合程序来看，首先是将顶点坐标和其对应的纹理坐标写入缓冲区分配给变量，之后调用gl.createTexture创建纹理对象，低啊用gl.getUniformLocation从片元着色器获取uniform变量u_Sampler的存储位置，改变量用来接收纹理图像，之后是重头戏配置纹理的函数loadTexture:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadTexture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; texture&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; u_Sampler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pixelStorei&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNPACK_FLIP_Y_WEBGL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Flip the image&apos;s y axis&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Enable texture unit0&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;activeTexture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TEXTURE0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Bind the texture object to the target&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bindTexture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; texture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Set the texture parameters&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;texParameteri&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TEXTURE_MIN_FILTER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LINEAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Set the texture image&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;texImage2D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TEXTURE_2D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;RGB&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;RGB&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNSIGNED_BYTE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Set the texture unit 0 to the sampler&lt;/span&gt;
  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;uniform1i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;u_Sampler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;COLOR_BUFFER_BIT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// Clear &lt;/span&gt;

  gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;drawArrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRIANGLE_STRIP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Draw the rectangle&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;我们一行行看。&lt;/p&gt;
&lt;p&gt;在使用图像之前必须先对其进行Y轴翻转，因为WebGL纹理坐标系统中的t轴方向和PNG/BMP/JPG等格式图片的坐标系统的Y轴方向是相反的：&lt;/p&gt;
&lt;h3&gt;gl.pixedStorei(pname,param)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pname&lt;/td&gt;
&lt;td&gt;gl.UNPACK
_
FLIP
_
Y_WEBGL&lt;/td&gt;
&lt;td&gt;对图形进行Y轴翻转，默认为false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.UNPACK
_
PREMULTIPLY
_
ALPHA_WEBGL&lt;/td&gt;
&lt;td&gt;将图像RGB颜色值的每一个分量乘以A，默认为false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;param&lt;/td&gt;
&lt;td&gt;指定非0或0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;翻转之后需要激活纹理单元，默认情况下WebGL至少支持8个纹理单元，一个单元负责管理一张纹理图象，使用纹理单元之前还需要调用gl.activeTexture来激活它：&lt;/p&gt;
&lt;h3&gt;gl.activeTexture(texUnit)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;textUnit&lt;/td&gt;
&lt;td&gt;指定准备激活的纹理单元：gl.TEXTURE0/1/2/3…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下还需要告诉WebGL系统纹理对象使用的是哪种类型的纹理，在操作纹理对象之前我们还需要先绑定它，这和缓冲区很像。WebGL支持两种类型的纹理：gl.TEXTURE_2D（二维纹理）、gl.TEXTURE_CUBE_MAP（立方体纹理）&lt;/p&gt;
&lt;h3&gt;gl.bindTexture(target, texture)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;target&lt;/td&gt;
&lt;td&gt;gl.TEXTURE
_
2D（二维纹理）或gl.TEXTURE
_
CUBE_MAP（立方体纹理）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;texture | 表示绑定的纹理单元&lt;/p&gt;
&lt;p&gt;这个方法开启纹理对象的通知将纹理对象绑定到纹理单元（已经用activeTexture激活了）上。&lt;/p&gt;
&lt;p&gt;接下来还需要配置纹理对象的参数，以此来设置纹理图象映射到图形上的具体方法：怎么获取纹素颜色，怎么重复填充&lt;/p&gt;
&lt;h3&gt;gl.texParameteri(target, pname, param)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;target&lt;/td&gt;
&lt;td&gt;gl.TEXTURE
_
2D（二维纹理）或gl.TEXTURE
_
CUBE_MAP（立方体纹理）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pname&lt;/td&gt;
&lt;td&gt;纹理参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.TEXTURE
_
MAG
_
FILTER（纹理放大）默认值：gl.LINEAR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.TEXTURE
_
MIN
_
FILTER（纹理缩小）默认值：gl.NEAREST
_
MIPMAP
_
LINEAR（金字塔纹理，即原始纹理图像的一系列不同分辨率的版本）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.TEXTURE
_
WRAP
_
S（纹理水平填充）默认值：gl.REPEAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.TEXTURE
_
WRAP
_
T（纹理垂直填充）默认值：gl.REPEAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;param&lt;/td&gt;
&lt;td&gt;纹理参数的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这个方法吧param的值赋给绑定到目标的纹理对象的pname参数上。pname可以指定4个纹理参数：放大方法（gl.TEXTURE_MAG_FILTER）表示当纹理的绘制范围比纹理本身还大的时候怎么取纹素颜色，缩小方法（gl.TEXTURE_MIN_FILTER）小了的时候取纹素颜色，纹理水平填（gl.TEXTURE_WRAP_S）如何对纹理图像左侧或者右侧的区域进行填充，纹理垂直填充就是上下。&lt;/p&gt;
&lt;p&gt;param由pname的不同也有不同的值可取：&lt;/p&gt;
&lt;p&gt;放大和缩小可取：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;取值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gl.LINEAR&lt;/td&gt;
&lt;td&gt;表示使用距离新像素中心最近的四个像素颜色值的加权平均作为新像素的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gl.NEAREST&lt;/td&gt;
&lt;td&gt;表示使用原纹理上距离映射后像素(新像素)中心最近(曼哈顿距离)的那个像素的颜色值（就是少了个加权平均）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;而对于水平和垂直填充则可使用:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;取值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gl.REPEAT&lt;/td&gt;
&lt;td&gt;平铺式的重复纹理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gl.MIRRORED_REPEAT&lt;/td&gt;
&lt;td&gt;镜像对称式的重复纹理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gl.CLAMP
_
TO
_
EDGE&lt;/td&gt;
&lt;td&gt;使用纹理图形边缘值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来将纹理图像分配给纹理对象：&lt;/p&gt;
&lt;h3&gt;gl.texImage2D(target, level, internalformat, format ,type, image)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;target&lt;/td&gt;
&lt;td&gt;gl.TEXTURE
_
2D（二维纹理）或gl.TEXTURE
_
CUBE_MAP（立方体纹理）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;level&lt;/td&gt;
&lt;td&gt;0(该参数为金字塔纹理准备的，不用金字塔纹理的话直接设置为0即可)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;internalformat&lt;/td&gt;
&lt;td&gt;图像的内部格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;format&lt;/td&gt;
&lt;td&gt;纹理数据的格式（必须与internalformat相同）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.RGB(比如图像是jpg的)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.RGBA(比如图像是png的)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.ALPHA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.LUMINANCE(灰度图像)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;纹理数据的类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.UNSIGNED_BYTE(无符号整型，每个颜色分量占据1字节，一般都用这个，其他是的用来压缩数据的)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.UNSIGNED
_
SHORT
_
5
&lt;em&gt;6&lt;/em&gt;
5(RGB每个分量分布占据5，6，5比特)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.UNSIGNED
_
SHORT
_
4
&lt;em&gt;4&lt;/em&gt;
4_4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;gl.UNSIGNED
_
SHORT
_
5
&lt;em&gt;5&lt;/em&gt;
5_1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;image&lt;/td&gt;
&lt;td&gt;包含纹理图像的Image对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这样Image对象中的图像就从JavaScript传入到WebGL系统中，并存储在纹理对象中了,而一旦纹理图像进入了WebGL系统，就必须将其传入片元着色器并映射到图形的表面上去，这时候可以用uniform来表示纹理（因为纹理图像不会随着片元变化），而因为是二维纹理，所以uniform变量的数据类型设为sampler2D&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;取值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sampler2D&lt;/td&gt;
&lt;td&gt;专用于绑定到gl.TEXTURE_2D上的纹理类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;samplerCube&lt;/td&gt;
&lt;td&gt;专用于绑定到gl.TEXTURE
_
CUBE
_
MAP上的纹理类型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们在获取了u_Sample的存储地址后将其作为参数传给了loadTexture函数，最后我们必须通过制定纹理单元编号将纹理对象传给u_Sample，也就是gl.uniformi的第二个参数为0。&lt;/p&gt;
&lt;p&gt;终于，片元着色器可以访问到纹理图像了！！&lt;/p&gt;
&lt;p&gt;之后使用老招数varying，通过attribute变量接收顶点的纹理坐标，然后通过varying传到片元着色器，顶点之间片元的纹理坐标也会在光栅化的过程中内插出来，这样就只需要根据片元的纹理坐标从纹理图像上抽取出纹素颜色，然后涂到当前的片元上即可。&lt;/p&gt;
&lt;p&gt;最后的最后，我们只需要在片元着色器中从纹理图像上获取纹素的颜色：&lt;/p&gt;
&lt;h3&gt;texture2D(sampler2D sampler, vec2 coord)&lt;/h3&gt;
&lt;hr&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;参数取值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sampler&lt;/td&gt;
&lt;td&gt;指定纹理单元编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;coord&lt;/td&gt;
&lt;td&gt;指定纹理坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其返回值的格式由前面的gl.textImage2D()的internalformat参数决定：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;internalformat&lt;/th&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gl.RGB&lt;/td&gt;
&lt;td&gt;(R,G,B,1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gl.RGBA&lt;/td&gt;
&lt;td&gt;(R,G,B,A)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gl.ALPHA&lt;/td&gt;
&lt;td&gt;(0.0,0.0,0.0,1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gl.LUMINANCE&lt;/td&gt;
&lt;td&gt;(L,L,L,1.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gl.LUMINANCE_ALPHA&lt;/td&gt;
&lt;td&gt;(L,L,L,A)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;修改一下纹理坐标与顶点坐标使纹理图像不够大的情况（改一下gl.texParameteri的参数来决定怎么渲染即可）以及多幅纹理的情况（从两个纹理取出纹素颜色来计算最终的片元颜色即可：比如二者分量相乘（遮罩效果）），实例就不上了，jsfiddle跨域问题解决不了也显示不出结果。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[初探Canvas2D渲染与数据可视化]]></title><description><![CDATA[主要是对当前Canvas2D渲染框架进行了了解学习，并最后基于Pixi.js以可视化框架Cytoscape为目标动手进行了一波实践： PGraph PixiJS 说到Pixi，如果你在玩一些H5游戏的时候有看过它的源码的话那相信你应该就不会陌生，很多游戏都是基于Pixi…]]></description><link>www.todaylg.com/canvas-renderermation/</link><guid isPermaLink="false">www.todaylg.com/canvas-renderermation/</guid><content:encoded>&lt;p&gt;主要是对当前Canvas2D渲染框架进行了了解学习，并最后基于Pixi.js以可视化框架Cytoscape为目标动手进行了一波实践：&lt;a href=&quot;https://github.com/todaylg/PGraph&quot;&gt;PGraph&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;PixiJS&lt;/h2&gt;
&lt;p&gt;说到Pixi，如果你在玩一些H5游戏的时候有看过它的源码的话那相信你应该就不会陌生，很多游戏都是基于Pixi开发的，大名鼎鼎的H5游戏框架Phaser也是基于Pixi的，但是基于Pixi可不仅仅只能开发游戏，包括很多炫酷的网站、效果、甚至App都可以基于Pixi开发，Pixi其实是一个超快的H5 2D渲染引擎，提供一个超快并且兼容所有设备的2D库，根据设备对WebGl、Canvas的支持情况智能进行渲染器的切换，从而保证兼容性与高速。头回打开 &lt;strong&gt;&lt;a href=&quot;http://www.pixijs.com/&quot;&gt;Pixi官网&lt;/a&gt;&lt;/strong&gt; 的我直接被液体云的效果给吓跪了=&gt;。。。之后手一个不小心又点到了它的 &lt;strong&gt;&lt;a href=&quot;http://www.pixijs.com/gallery&quot;&gt;画廊&lt;/a&gt;&lt;/strong&gt; 里，本年份的膝盖也都交代在那了。。。&lt;/p&gt;
&lt;p&gt;印象比较深的是 &lt;strong&gt;&lt;a href=&quot;http://www.weareuprising.com/work&quot;&gt;Weareuprising&lt;/a&gt;&lt;/strong&gt; 我次。。这碎片特效和噪点特效，简直了。。感觉还是按音频鼓点分散的。不知道是不是错觉。。一直没闲下时间来研究，有空一定要扒下来好好瞅瞅(Flag)！！！视音频结合玩的飞起的=&gt; &lt;strong&gt;&lt;a href=&quot;http://na.leagueoflegends.com/en/featured/champions/trial-of-the-kraken-priestess&quot;&gt;LOL&lt;/a&gt;&lt;/strong&gt;、 &lt;strong&gt;&lt;a href=&quot;http://goplaces.theheinekencompany.com/en/age-gate&quot;&gt;Goplaces&lt;/a&gt;&lt;/strong&gt; 居然还可以将交互和视频这样结合。。。真的是给跪了。。&lt;/p&gt;
&lt;h4&gt;Canvas/WebGL/SVG&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;既然咱们从零开始，那必然得先大概了解这三兄弟的关系，Web可视化的主流技术就是这三，而这三又各自有各自的特点。&lt;/p&gt;
&lt;p&gt;1.SVG&lt;/p&gt;
&lt;p&gt;SVG功能强大并且很灵活，并且有一些效果还是无法替代的(比如贝赛尔曲线上紧贴文字的效果)。但是每个SVG都是一个DOM元素，数量达到一定限度之后不可避免的会有明显卡顿，因为交互会使元素发生改变（位置移动、样式改变、增删改查等等）从而触发reflow，reflow会触发repaint，一个节点的reflow很可能导致子节点甚至是父节点或者同级节点的reflow，所以reflow的成本很高。SVG在处理千级的数量时就已经显得很吃力了。&lt;/p&gt;
&lt;p&gt;2.Canvas&lt;/p&gt;
&lt;p&gt;Canvas就没有reflow的概念了，只有repaint的概念，因此在性能上要好过SVG许多。因为Canvas实际上只是一个画布元素，通过getContext()方法，传入参数：‘2d’,可以获得2d绘图API接口对象：CanvasRenderingContext2D,或者传入参数’webgl’，则可获得3d绘图API。有时候在交流的时候一直念叨Canvas、Canvas的，但是意思却是在说CanvasRenderingContext2D,二者是一个父子级的关系，别搞混啦。CanvasRenderingContext2D是由浏览器按照 &lt;strong&gt;&lt;a href=&quot;https://www.w3.org/TR/2dcontext/#canvasrenderingcontext2d&quot;&gt;W3C&lt;/a&gt;&lt;/strong&gt; 规定的统一标准实现的。&lt;/p&gt;
&lt;p&gt;3.WebGL&lt;/p&gt;
&lt;p&gt;WebGL则是一种3D绘图标准，可以理解为OpenGL和JavaScript技术的结合。允许开发者直接和GPU进行通信，从而获得来自GPU的强大力量，渲染什么几十万级的数量都是洒洒水（显卡牛逼的话），并且之后不管什么粒子效果、图形纹理什么的，想画啥就能画啥，简直是为所欲为。但是对应的这东西有点复杂，画了个点就要接近100行的代码。。。还需要懂OpenGL。。感觉坑有点深。。。画了个点之后先跑路了。。&lt;/p&gt;
&lt;h4&gt;Pixi源码浅析&lt;/h4&gt;
&lt;p&gt;得益于Pixi的代码模块化分得很清楚，所以虽然具体的代码咱看不懂，但是文件名字看得懂啊，函数名字看得懂啊哈哈哈，也能大概知道个来龙去脉啦, 首先从入口文件index.js开始窥探一下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// import polyfills. Done as an export to make sure polyfills are imported first&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./polyfill&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// export core&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// export libs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; deprecation &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./deprecation&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//旧版存在，但是新版pixi已不再支持的特性做兼容性提示&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; accessibility &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./accessibility&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; extract &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./extract&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//such like saving an Image&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; extras &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./extras&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; filters &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./filters&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//WebGL-Only&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; interaction &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./interaction&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//events&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; loaders &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./loaders&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//loading assets, data, and other resources dynamically.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; mesh &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./mesh&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; particles &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./particles&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; prepare &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./prepare&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;这样看这个core应该就是boss了，果然不出所料：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./const&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//所有静态变量&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./math&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//数学相关计算&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; utils &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./utils&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//一些小的工具方法&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; ticker &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./ticker&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//时钟类，控制渲染帧率&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; settings &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./settings&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; CanvasRenderer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/canvas/CanvasRenderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; WebGLRenderer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/webgl/WebGLRenderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; settings&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; utils&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ticker&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; CanvasRenderer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; WebGLRenderer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; glCore &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pixi-gl-core&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Bounds &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./display/Bounds&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; DisplayObject &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./display/DisplayObject&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//可展示对象的基础，基础到直接继承自EventEmitter类,但是他却是一个抽象类，作为所有待展示对象的基类,继承之后复写了才有意义。&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Container &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./display/Container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//最强大的基础类&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Transform &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./display/Transform&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; TransformStatic &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./display/TransformStatic&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; TransformBase &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./display/TransformBase&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Sprite &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sprites/Sprite&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; CanvasSpriteRenderer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sprites/canvas/CanvasSpriteRenderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; CanvasTinter &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sprites/canvas/CanvasTinter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; SpriteRenderer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./sprites/webgl/SpriteRenderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Text &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./text/Text&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; TextStyle &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./text/TextStyle&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; TextMetrics &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./text/TextMetrics&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Graphics &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./graphics/Graphics&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//图形&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; GraphicsData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./graphics/GraphicsData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; GraphicsRenderer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./graphics/webgl/GraphicsRenderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; CanvasGraphicsRenderer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./graphics/canvas/CanvasGraphicsRenderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Spritesheet &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./textures/Spritesheet&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Texture &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./textures/Texture&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; BaseTexture &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./textures/BaseTexture&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; RenderTexture &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./textures/RenderTexture&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; BaseRenderTexture &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./textures/BaseRenderTexture&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; VideoBaseTexture &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./textures/VideoBaseTexture&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; TextureUvs &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./textures/TextureUvs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; CanvasRenderTarget &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/canvas/utils/CanvasRenderTarget&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Shader &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./Shader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; WebGLManager &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/webgl/managers/WebGLManager&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; ObjectRenderer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/webgl/utils/ObjectRenderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; RenderTarget &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/webgl/utils/RenderTarget&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Quad &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/webgl/utils/Quad&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; SpriteMaskFilter &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/webgl/filters/spriteMask/SpriteMaskFilter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Filter &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./renderers/webgl/filters/Filter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Application &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./Application&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; autoDetectRenderer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./autoDetectRenderer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;通过看继承关系可以大概了解到这个DisplayObject类是Pixi中所有可展示对象的基础了，是一个基础的抽象类，Container类继承于DisplayObject类,主要添加了一些对子元素的操作方法，Sprite类又继承于Container类，到这已经是我们可以看见的实例了，也就是已经具象化了的，所实现的方法返回的都已经是计算得出的具体数值了，Graph类也是如此，继承Container类，而Text类则继承自Sprite类，这些都是具象化的实例了。而穿插在其中的Texture比较复杂，十分懵逼。。感觉好像缺图形学的知识了。。所以瞟一眼得了先。。最原始的是BasicTexture类，根据不同的资源又有VideoBaseTexture这种处理具体类型资源的辅助类，最后RenderTexture根据WebGL和Canvas又会有RenderTarget类和CanvasBuffer类。。。。。额O__O “…还是不看了😂&lt;/p&gt;
&lt;p&gt;对了！我们主要研究的是图形，所以瞅瞅Graphics，Pixi渲染图形也支持WebGL简直美滋滋，正和我们意，具体到代码就是数学家与矩阵的狂欢了。。先跑路。&lt;/p&gt;
&lt;p&gt;我们先在Pixi中画一些基本的图形对比一下用WebGL和Canvas2d渲染的情况，方便我们对这两种方式有个大概的理解：&lt;/p&gt;
&lt;p&gt;先来WebGL：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/mcpg6wos/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;再看看Canvas2D：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/8cea3qw4/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;鼠标滚轮可以放大缩小，左键点击后可以拖拽（模仿Cytoscape），放大之后可以比较明显的看出二者渲染结果的差别了，WebGL渲染的图形即使加了抗锯齿、FXAA（Fast Approximate Anti-Aliasing 快速近似抗锯齿）但是效果还是和Canvas2D有差距，WebGL的抗锯齿效果并不是那么的理想（具体原因没搞明白，待研究WebGL），而Canvas2D的效果则是很棒了。虽然WebGLRender效果没有那么好，但是也还能凑合，等数量多了以后WebGLRender的优势就会凸显出来了。&lt;/p&gt;
&lt;h2&gt;Cytoscape&lt;/h2&gt;
&lt;p&gt;相比于D3的大红大紫， &lt;strong&gt;&lt;a href=&quot;http://js.cytoscape.org/#introduction/factsheet&quot;&gt;Cytoscape&lt;/a&gt;&lt;/strong&gt; 就显得低调很多了，Cytoscape是一个用于分析和可视化图形及关系网的库，不同于D3，Cytoscape只基于Canvas进行了
一系列的封装，作者是多伦多大学的Donnelly Centre（给数学家们献上膝盖。。。）功能十分强大。&lt;/p&gt;
&lt;h2&gt;PiCi&lt;/h2&gt;
&lt;p&gt;那既然有Cytoscape了，那还研究个啥？？正如之前所述，当数量达到万级的时候，Canvas2dRender也得GG了，这时候WebGL就称霸了。所以现在研究的就是能否基于Pixi，利用它支持WebGL渲染并且可以向下兼容Canvas的特性，在大数量渲染的时候把性能提升上去呢？比如在Pixi里面实现 &lt;strong&gt;&lt;a href=&quot;http://js.cytoscape.org/demos/visual-style/&quot;&gt;Cytoscape官网的一个基本例子&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/f6oj27am/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;这个例子麻雀虽小五脏俱全，包含的东西挺多的，首先是 &lt;strong&gt;节点的几何体（矩形、三角形、圆）&lt;/strong&gt;、&lt;strong&gt;节点、边上的字、边（直线和曲线）&lt;/strong&gt;、&lt;strong&gt;边两端的箭头&lt;/strong&gt;、&lt;strong&gt;合理的布局&lt;/strong&gt;、&lt;strong&gt;随鼠标焦点的拖拽和放大&lt;/strong&gt;，且！&lt;strong&gt;没有失真&lt;/strong&gt;！那么基于Pixi到底能否实现呢？先给答案再解释=&gt;不改源码的话=&gt;不行🚫！ok👌，先一点一点来吧~：&lt;/p&gt;
&lt;h3&gt;节点&lt;/h3&gt;
&lt;p&gt;首先自然是最基本的节点，节点是各种多边形，我们有两种方法可以实现出不错的效果：&lt;/p&gt;
&lt;p&gt;第一个当然是直接画，圆还好说（可以看前面的例子），只需要目标点的坐标以及圆半径即可。但是要是多边形的话就得吃数学了，需要自己计算出各个顶点的坐标，对于我这种高数 = 高中数学的选手，那自然是相当的吃力。&lt;/p&gt;
&lt;p&gt;第二种方法则是启动Ps，画出需要的图形，导出白色的图形，在Pixi中将图片转为Sprite，这下Pixi就厉害了，可以通过更改tint来更改颜色，这样一来你画得出什么图片，就能拿什么图片当节点啦，但是这样会出现两个问题：1.由于图片像素的限制也不能保证无限放大不失真了；2.还需要计算碰撞体积，还是吃数学。&lt;/p&gt;
&lt;p&gt;对于问题一咱们可以在Ps导出的时候就导出高分辨率的图片，这样就能保证在放大一定程度以内是没有失真的，这在实际使用中也是可以接受了的，毕竟谁去一直滚滚轮啊（和resize浏览器窗口一个道理，只有开发者才会闲得无聊这么干）。放大的问题解决了但是又发现sprite在缩小后边缘锯齿效果非常严重： &lt;strong&gt;&lt;a href=&quot;https://github.com/pixijs/pixi.js/issues/4205&quot;&gt;奇怪的问题&lt;/a&gt;&lt;/strong&gt;,原因还不得而知。。。所以贯彻我们曲线救国的方针，我们给sprite添上一个BlurFilter，效果一下又好了不少~&lt;/p&gt;
&lt;p&gt;但是对于问题二。。。。=&gt; 直接无解，直接忽视，直接不想！！咱们以圆为例子即可，不然话题将会没法继续了。&lt;/p&gt;
&lt;p&gt;这种方法最后实现的例子（滚轮放大）：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/todaylg/z8nwrhj8/7/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h3&gt;边&lt;/h3&gt;
&lt;p&gt;边分为直线和曲线两种，直线自不必多说，直接lineTo即可，曲线就得用贝塞尔曲线来画了，扯到这个贝塞尔曲线就又涉及到数学家们的狂欢了。。。什么二阶贝塞尔、三阶贝塞尔。。。那这个贝塞尔曲线到底是啥呢？&lt;/p&gt;
&lt;h4&gt;贝塞尔曲线&lt;/h4&gt;
&lt;p&gt;其实总而言之n阶的贝塞尔曲线就有n-1个控制点，而画出一段贝赛尔曲线就需要起点终点以及控制点的坐标,计算公式可见 &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Quadratic_curves&quot;&gt;Wiki&lt;/a&gt;&lt;/strong&gt;或者 &lt;strong&gt;&lt;a href=&quot;http://blog.csdn.net/zhaopenghhhhhh/article/details/17753615&quot;&gt;这里&lt;/a&gt;&lt;/strong&gt;,要是对推导过程有兴趣还可以看看 &lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/equal/p/6414263.html&quot;&gt;这里&lt;/a&gt;&lt;/strong&gt;(给数学家献上膝盖。。)，用的时候直接套公式即可，比如Cytoscape里的：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Cytoscape qbezierAt&lt;/span&gt;
math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;qbezierAt&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; p0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; p0 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; p1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;起点和终点我们通过手动赋值或者后面说的布局后就得到了其坐标位置了，但是控制点的位置该如何移动才能实现Cytoscape例子中那样Q弹的效果呢？&lt;/p&gt;
&lt;p&gt;仔细观察的话可以看出应该是二阶贝塞尔曲线，控制点取的应该是起终点的中点，但是高度应该随着距离的减小而增加，有了大致的想法后我们想想如何具体实现。&lt;/p&gt;
&lt;p&gt;第一个方法当然是直接去翻Cytoscape的源码看它是怎么算的就行啦~翻到Cytoscape源码extension/renderer/canvas/drawing-edges.js，又会发现CRp继承的是BRp，，往上翻回base下的coord-ele-math就是计算的具体方法了，一条边的绘制总共涉及四个点的坐标：source、mid-target、mid-source、target，根据线形状的不同以及箭头形状的不同各个点计算的方法又不同（涉及角度等等因素），膝盖跪穿了都没看懂具体是怎么算的。。。搞不懂计算的方法也就搞不懂代码中一些数值的含义。。但是直接从源码中扒出来也是可以直接用的。。。比如把画三角形箭头的代码给扒出来：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/nwf749rn/3/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;第二个方法自然就是自己来了呗。有了前面说的思路，起终点以箭头的几何状不同取不同的位置，比如圆取中心，三角形取底边中心这样，难点在控制点的计算上，列出了个二元二次方程组用万能公式都没解出来（菜的抠脚。。），总之保留这个思路嘛可以，等大神赐教一番或者补补高数以后再继续算吧。。。&lt;/p&gt;
&lt;p&gt;第三个方法则比较麻烦：由SVG转Canvas来直接绘制贝塞尔曲线。先看d3的一个基于SVG边是贝塞尔曲线的 &lt;strong&gt;&lt;a href=&quot;http://bl.ocks.org/mbostock/1153292&quot;&gt;例子&lt;/a&gt;&lt;/strong&gt;,它的贝塞尔曲线效果不正是我们需要的吗？看代码：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;linkArc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      dy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      dr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dx &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dx &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; dy &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;M&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;,&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; dr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;,&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; dr &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 0 0,1 &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;,&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;这里的实现非常的简单，就一句代码，那我们只要把SVG的ArcTo用Canvas里的arc()方法替代一下就ok啦，但是二者是不同的，具体怎么在Canvas里将SVG ArcTo做转换我整明白（又是个数学问题。。。）但是找找github果然已经有大佬实现了： &lt;strong&gt;&lt;a href=&quot;https://github.com/colinmeinke/svg-arc-to-cubic-bezier&quot;&gt;svg-arc-to-cubic-bezier&lt;/a&gt;&lt;/strong&gt; 这个库不知道为啥只有这么点star，但是很多其他库都是依赖它的，比如腾讯的 &lt;strong&gt;&lt;a href=&quot;https://github.com/AlloyTeam/pasition&quot;&gt;pasition&lt;/a&gt;&lt;/strong&gt; 。使用它可以将一段SVG Arc转换为一段或者多段三阶贝塞尔曲线实现，返回贝赛尔曲线的起终点和两个控制点坐标.而Canvas也封装了三阶贝塞尔曲线方法bezierCurveTo（二阶是quadraticCurveTo），所以方法三实现起来会比较舒服（但是中间多了一层转换，性能会差一点）。&lt;/p&gt;
&lt;h4&gt;箭头&lt;/h4&gt;
&lt;p&gt;箭头我想到的办法比较笨，就是简单的相似三角形加上四个象限分别讨论的方法确定坐标，比如三角形：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//这个三角形默认按顶角为50°，两个底角为65°来算，两边长先按一半nodeWidth来算吧&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nodeWidth&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;targetFlag &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sourcePos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sourcePos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetFlag &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; targetPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; targetPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//边界判定 =&gt; 贴一起了就别显示啦&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t_srcPos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; targetFlag &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; sourcePos &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; targetPos&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t_tgtPos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; targetFlag &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; targetPos &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; sourcePos&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; topAngle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;180&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//角度转弧度，注意Math的那些方法的单位是弧度&lt;/span&gt;
    sideEdge &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_nodeRadius&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//瞅着合适，先凑合&lt;/span&gt;
    halfBottomEdge &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;topAngle &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; sideEdge&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    centerEdge &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;topAngle &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; sideEdge&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//angle是一样的，先按node中心算，arrow中心算之后再说，先todo(直线版看出不这个问题，曲线就崩了)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; angle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t_srcPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t_srcPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; beginPosX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;angle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    beginPosY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;angle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    pos1X&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pos1Y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pos2X&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pos2Y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    centerX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; centerEdge&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;angle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    centerY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t_nodeRadius &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; centerEdge&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;angle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

pos1X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pos2X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;angle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; halfBottomEdge&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
pos1Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; pos2Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;angle&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; halfBottomEdge&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//简单的几何知识(手动抽搐😖)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//还需要分类讨论target和source的左右位置的各种情况&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//1234代表target相对source所在象限&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t_srcPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//source节点在右&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t_srcPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//下 ----&gt; 1&lt;/span&gt;
        beginPosX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; beginPosX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        beginPosY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; beginPosY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        centerX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; centerX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        centerY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; centerY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        pos1X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos1X&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        pos1Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pos1Y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//+ -&lt;/span&gt;

        pos2X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pos2X&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        pos2Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos2Y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//- +&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//上 ----&gt; 4&lt;/span&gt;
        beginPosX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; beginPosX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        beginPosY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; beginPosY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        centerX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; centerX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        centerY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; centerY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        pos1X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos1X&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        pos1Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos1Y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//+ +&lt;/span&gt;

        pos2X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pos2X&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        pos2Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pos2Y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//- -&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//source节点在左&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t_srcPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//下 ----&gt; 2&lt;/span&gt;
        beginPosX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; beginPosX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        beginPosY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; beginPosY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        centerX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; centerX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        centerY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; centerY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        pos1X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pos1X&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        pos1Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pos1Y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//- -&lt;/span&gt;

        pos2X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos2X&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        pos2Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos2Y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//+ +&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//上 ----&gt; 3&lt;/span&gt;
        beginPosX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; beginPosX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        beginPosY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; beginPosY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        centerX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; centerX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        centerY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t_tgtPos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; centerY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        pos1X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pos1X&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        pos1Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos1Y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//- +&lt;/span&gt;

        pos2X &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; pos2X&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        pos2Y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; pos2Y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//+ -&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//Draw triangle&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; triangle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Graphics&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

triangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;beginFill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x66CCFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
triangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lineStyle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x66CCFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
triangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;beginPosX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; beginPosY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
triangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pos1X&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pos1Y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
triangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pos2X&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pos2Y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
triangle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endFill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;最后的效果：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/todaylg/z8nwrhj8/3/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h3&gt;Zoom/Scale&lt;/h3&gt;
&lt;p&gt;这个就没有那么多好说的了，D3也有封装好的d3-zoom,自己实现的话需要注意的就是stage(canvas也一样)放大的中心是左上角(即(0,0)),所以要保证放大之后鼠标位置的图形还保持不动，就得分两步走：1.先把当前鼠标在浏览器中的位置转换为在stage中的位置；2.根据放大还是缩小，stage做与当前坐标相反的差值位移。这样放大或者缩小后鼠标在stage中的指向位置就不会变了。Scale也是类似的倒立，只不过要注意stage做负向位移的时候要考虑当前放大倍数的因素。&lt;/p&gt;
&lt;h3&gt;布局(Layout)&lt;/h3&gt;
&lt;p&gt;节点少的时候我们还可以人工的手动给赋值，或者直接随机赋值，但是当数量大了的时候这两者的问题就暴露得很明显了，因为节点和节点之间是有关系的，不能随机乱放，手动赋值则赋值到手抽筋。。。所以布局还是很重要的，好的布局能让关系凸显的更加清楚。&lt;/p&gt;
&lt;h4&gt;Dracula&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.graphdracula.net/&quot;&gt;Dracula&lt;/a&gt;就是用于布局图形和关系网的,只需要添加边信息即可赋予节点位置，核心代码如下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dracula&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Graph&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; l &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; edges&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; edges&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEdge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;source&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; layouter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dracula&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Spring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
layouter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; renderer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dracula&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Renderer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Raphael&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;canvas&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;canvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; canvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

renderer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//这里改动了Dragular的源码,这个draw方法不再进行渲染&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//根据g生成的位置进行初始化&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; nodesObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nodes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; node &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; nodesObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;因为想省时间的原因没有单把其布局算法抽出来，而是粗暴的直接删掉渲染方法提出坐标信息。Dracula作为静态布局效果不错，但是并不考虑节点的大小问题(width)，估计得自己在其代码基础上进行修改，所以先不深入了。&lt;/p&gt;
&lt;h4&gt;D3-force&lt;/h4&gt;
&lt;p&gt;力布局就显得效果炫酷很多了，而且得益于D3 V4模块化分得很清楚，可以把D3-force单独拎出来用于布局：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/todaylg/z8nwrhj8/8/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;关于d3-force的具体介绍可以看 &lt;strong&gt;&lt;a href=&quot;https://github.com/xswei/d3js_doc/tree/master/API/d3-force-master#link_distance&quot;&gt;这里&lt;/a&gt;&lt;/strong&gt; ，我试来试去，一种力一种力的测试还是比较好理解的，但是一旦加上d3.forceLink(edges)之后就变得很奇怪。。。这块还待继续研究。。&lt;/p&gt;
&lt;h3&gt;Text&lt;/h3&gt;
&lt;p&gt;Text就是GG的原因了。。还记得最开始初探源码那会说的Text继承于Sprite吗？Pixi对文字的处理相当于是在Sprite的基础上的，用Canvas2d（fillText( &lt;strong&gt;&lt;a href=&quot;https://www.w3.org/TR/2dcontext/#dom-context-2d-filltext&quot;&gt;规范&lt;/a&gt;&lt;/strong&gt; )）处理文字后最终返回的Text实例即使跟随stage同步放大渲染出来的文字也是失真的：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/z8nwrhj8/9/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Text实例即使跟随stage同步缩放：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/z8nwrhj8/11/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;WebGL怎么渲染出放大后不失真的字体？Canvas2d又是怎么解决这个问题的呢？想弄明白估计得补补图形学（WebGL3D）并且去看浏览器内核（Canvas2D）是怎么实现的了，疯狂的触及着我的知识盲区。。。希望以后能搞明白吧。。。。&lt;/p&gt;
&lt;h2&gt;CreateJS&lt;/h2&gt;
&lt;p&gt;和Pixi一样，CreateJS也是一个H5 2D渲染引擎，在今年9.16号更新的1.0版本，但是要知道上一个版本0.8.2是在2015年更新的。。。时隔2年突然更新了一下，这两年他们到底经历了什么？连官网都停留在两年前。。各种莫名其妙不由的让人想试试这个框架2333。所以干脆接着上边被卡住对文字渲染问题继续拿CreateJS往下折腾吧~&lt;/p&gt;
&lt;p&gt;CreateJS也提供WebGL与Canvas2D两个Renderer,默认是使用Canvas2D,如果设置为WebGL渲染，当遇到WebGL不支持渲染的Shape、Shadow、Text的时候会直接忽视掉（不进行渲染）。&lt;/p&gt;
&lt;h3&gt;Text&lt;/h3&gt;
&lt;p&gt;CreateJS渲染Text使用的是Canvas2D,所以自然是无失真的，对于节点来说Text默认应当处于节点的正中间，对于直边来说也是这样，但是对于贝赛尔曲线的边这里还没有想到很好的实现方法，所以先放在贝赛尔曲线两个控制点的中点:&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/todaylg/03Ladyqs/10/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h3&gt;Pin Effect&lt;/h3&gt;
&lt;p&gt;图钉效果可以直接通过设置D3-force的fx、fy来实现，拖拉以后双击可以恢复弹力：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/todaylg/03Ladyqs/11/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h3&gt;Right Click/Add Image&lt;/h3&gt;
&lt;p&gt;右键菜单就没啥好说的了，添加图片这里需要注意一下转成Bitmap后由于Bitmap格式已经足够简单所以不用cache反而会好一些（但是如果用了filter则必须使用cache）：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//jsfiddle.net/todaylg/03Ladyqs/12/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;h2&gt;Two.js&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://two.js.org/&quot;&gt;two.js&lt;/a&gt;和CreateJS一样，给人的感觉都是懒癌患者，two.js最近的版本更新的时间是在2016年2月。。。&lt;/p&gt;
&lt;p&gt;但是支持WebGL渲染字体且效果理想的我只找到了它。。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/b7fLwvcd/1/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;但是这兄弟长时间不更新像是放弃治疗了是一回事，另一回事是这兄弟在性能表现上不太理想。。。或者说十分不理想，原因还没有深究：&lt;/p&gt;
&lt;p&gt;[测试在这里](&lt;a href=&quot;https://two.js.org/examples/particle-sandbox.html?type=webgl&amp;#x26;shapes=circle&amp;#x26;operations=translation&amp;#x26;count=2000&quot;&gt;https://two.js.org/examples/particle-sandbox.html?type=webgl&amp;#x26;shapes=circle&amp;#x26;operations=translation&amp;#x26;count=2000&lt;/a&gt;
)&lt;/p&gt;
&lt;p&gt;2000个运动的圆在WebGL下也GG了。。。。要知道D3给1000多个节点使用d3-force且是使用用SVG的都能十分流畅。。。。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;自己缺东西，问题研究到底下会发现开始寸步难行，一方面缺到是算法和数学，特别是与可视化方面相关的与这两的关系就更为密切了，炫酷的效果后面都是数学；另一方面是缺图形学这些一大块一大块的计算机知识体系，所以研究不得不只停留在初探。。。希望安心拿了通信毕业证以后早点把计科的知识补上吧。。。再继续研究吧。。。&lt;/p&gt;
&lt;h2&gt;To Be Continued&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[初探SVG动画]]></title><description><![CDATA[基础知识 1.SVG (Scalable Vector Graphics) 首先需要知道SVG大概是个啥，SVG即可缩放矢量图形（Scalable Vector Graphics),是一种用XML定义的语言，用来描述二维矢量图形，并且已经是一个W3C标准，所以它也可以和CSS…]]></description><link>www.todaylg.com/svg-outlineAnimation/</link><guid isPermaLink="false">www.todaylg.com/svg-outlineAnimation/</guid><content:encoded>&lt;h2&gt;基础知识&lt;/h2&gt;
&lt;h3&gt;1.SVG (Scalable Vector Graphics)&lt;/h3&gt;
&lt;p&gt;首先需要知道SVG大概是个啥，SVG即可缩放矢量图形（Scalable Vector Graphics),是一种用XML定义的语言，用来描述二维矢量图形，并且已经是一个W3C标准，所以它也可以和CSS、DOM协同工作。SVG的属性和元素有茫茫多，详细的可以瞅瞅&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/SVG&quot;&gt;MDN&lt;/a&gt;，这里首先需要注意&lt;strong&gt;stroke&lt;/strong&gt;属性，因为描边动画与这小子关系很大,简单的先瞅瞅吧：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;stroke&lt;/th&gt;
&lt;th&gt;表示描边颜色（为啥不直接叫stroke-color??!）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;stroke-width&lt;/td&gt;
&lt;td&gt;表示描边粗细&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stroke-linecap&lt;/td&gt;
&lt;td&gt;表示描边两边端点的表现方式 stroke-linejoin 表示描边转角的地方的表现方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stoke-miterlimit&lt;/td&gt;
&lt;td&gt;这个属性有点复杂，表示在两描边相交(必须是锐角)的地方的表现方式，其值代表斜切长度/描边宽度的最大值，超出的直接表现为切除。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stroke-opacity&lt;/td&gt;
&lt;td&gt;表示描边透明度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stroke-dasharray&lt;/td&gt;
&lt;td&gt;表示虚线描边中虚线的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stroke-dashoffset&lt;/td&gt;
&lt;td&gt;表示虚线描边的其实偏移值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在这里我们主要关心的是&lt;strong&gt;stroke-dasharray&lt;/strong&gt;和&lt;strong&gt;stroke-dashoffset&lt;/strong&gt;，因为这两与描边效果有最直接的关系。&lt;/p&gt;
&lt;p&gt;其次还需要注意一下SVG自带的&lt;strong&gt;transform&lt;/strong&gt;属性，它和CSS的transform在有些地方可不太一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相同点&lt;/strong&gt;：在2D层面下的变换和CSS的一样的，包括translate、rotate、scale、skewX、skewY以及matrix。二者transform属性都支持多声明累加，但是这里要注意坐标系也是随变换移动的，所以变换的顺序会影响到最后的结果（可以在下面的Demo里试一试就知道啦）。&lt;/p&gt;
&lt;p&gt;Wait！这个matrix是不是没瞅过？这老哥还挺复杂的，详细分析这个属性可以瞅这：&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/&quot;&gt;Matrix&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/uwkmpqwj/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;strong&gt;不同点&lt;/strong&gt;： 首先最大的不同点在于各自的坐标系统，CSS的transform是相对于当前元素而言的，默认是元素中心(transform-origin:50% 50%),但是SVG的transfrom则是以SVG画布左上角为中心点计算的，用旋转变换可以一下就看出区别了。&lt;/p&gt;
&lt;p&gt;那要是想让SVG元素以自己的中心点进行变换该怎么办呢？最容易想到的当然就是通过transform-origin修改中心点再配合CSS变换，但是其实SVG的rotate属性也是可以设置中心点的：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/pux0y3xn/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;上边的rotate(45 100 100),45自然代表旋转45度，后面的两个100则是修正中心点的坐标，那这100是怎么来的呢？100=起始偏移(50)+宽度/高度的一半(100/2=50).&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/pux0y3xn/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;同理，因为坐标系统不一样，scale在放大之后你也会发现二者的位置不一样了，CSS的transform中心为元素中点，所以放大之后没有偏移，但是SVG中心为左上角，放大之后相对于左上角的偏移值也会被放大scale数值的倍数。然而scale又不像rotate那样有可以调整中心的参数，所以 只能靠手动挡来解决问题：先找到图形的中心坐标，将图形中心从左上角translate到中心坐标，再做scale变换（这里坐标系也放大），最后再归位，看实例：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/todaylg/pux0y3xn/1/embedded/result,js,html,css/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;这里需要注意的是在经过scale变换后，整个坐标系都受到了相应的影响(也scale了)，所以后面的tranlate虽然数值和前面的数值是一样的，但是其实是相当于translate(scale*原数值的)。这儿有点绕啊，换一个说法，左上角到中心点的距离，和变换之后再往回移同样的距离(数值)，其实不就是相当于把左上角到中心点的这段距离也做了scale变换吗，所以就是相当于以图形中心点放大的效果啦。&lt;/p&gt;
&lt;p&gt;skew也是类似的情况，不过这里的SVG的skew只能skewX、skewY分开来写，总而言之最简单的解决坐标系的差异的放大还是都转用CSS的transform变换。不过我们知道了这些差异后，改着改着要是出现莫名其妙的变换结果也能知道是为啥啦。&lt;/p&gt;
&lt;h3&gt;2.Adobe Illustrator/Sketch&lt;/h3&gt;
&lt;p&gt;在绘制一些简单的图形时我们可以直接用代码实现出来，但是需要绘制的是一些复杂的路径组合成的图形时我们就需要借助工具了。AI和Sketch都是很棒的矢量绘图工具，但是在实践中我发现两者在导出SVG的代码上、功能上都存在一些区别(区别后面会详细介绍)，所以这里需要两者结合着使用（也可能是我使用的姿势不对(╯﹏╰)）。具体两个软件的基础操作可以观看一些基础教学视频，在这里就不赘诉啦~&lt;/p&gt;
&lt;h4&gt;Anime.js/Velocity.js/Greensock&lt;/h4&gt;
&lt;p&gt;动画框架有很多，各自有各自的特点和适用场景：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GSAP&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;毫无疑问是做复杂动画的最佳选择,特别适用于对时间要求非常精确的场景，功能十分强大，用它写动画会简单很多，相应的缺点自然就是它比较重，压缩过后的TweenMax也达到了115KB，当然，TweenMax的目的就是要全功能，如果简单的动画使用TweenLite即可，TweenLite压缩后为29KB。还有一点需要注意的是它的开源协议不是MIT，免费使用的前提是不能向用户收取使用/访问/许可的费用，简单来说就是用户使用和访问都不能收费，也不能通过转让许可来获利。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Velocity.js&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;显得就中规中矩了，感觉自从anime.js出来以后，Velocity就崩了😂，上一次提交已经是1个月以前了。。。压缩以后大小为45KB，优势在于可以和JQuery无缝配合，并且最低可以兼容到IE8 和 Android 2.3。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anime.js&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;胜在其小巧且常用功能一个不缺，压缩之后只有16KB，并且文档棒，上手速度快，应该可以说是目前最火的动画框架了。&lt;/p&gt;
&lt;p&gt;这里选用的是Anime.js，当然其他两框架也都能实现SVG动画，但是一来Anime.js很轻，二来文档炫酷上手较容易，三来其他两个都用过了也想尝试一下新的框架，最重要的：&lt;strong&gt;它的star最多！&lt;/strong&gt;这不用用看能服气吗？&lt;a href=&quot;http://animejs.com/&quot;&gt;Anime.js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;绘图&lt;/h2&gt;
&lt;p&gt;基础知识整得差不多了，下边我们就开工吧~ 第一步毋庸置疑需要我们先将脑海里的东西绘制出来，这里有的小伙伴一听要画图直接哭了出来😂，这里再推荐一个网站:&lt;a href=&quot;https://convertio.co/zh/png-svg/&quot;&gt;convertio.co&lt;/a&gt;,可以将jpg或者png直接转成svg，效果也还是不错滴(自己再删改一下凑合就能用啦)。&lt;/p&gt;
&lt;p&gt;这里绘制的具体过程就不展开了(偏题啦)，一些需要注意的问题结合具体要实现的动画效果再做提醒。&lt;/p&gt;
&lt;p&gt;在绘制完成后，导出并保存为SVG（也可以直接Copy SVG代码），有了SVG我们便可以愉快的开始实现我们炫酷的动画效果啦。&lt;/p&gt;
&lt;h2&gt;狂拽酷炫&lt;/h2&gt;
&lt;h4&gt;1.描边动画&lt;/h4&gt;
&lt;p&gt;Tips:描边动画的制作在AI中比较方便，选中对象(或文字)后，点击Type中的Create Outline创建轮廓，之后再导出便是Path啦~&lt;/p&gt;
&lt;p&gt;之前也有介绍和描边动画关系最为密切的就是&lt;code class=&quot;language-text&quot;&gt;stroke-dasharray&lt;/code&gt;和&lt;code class=&quot;language-text&quot;&gt;stroke-dashoffset&lt;/code&gt;，核心效果的实现其实是很容易理解的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将stroke-dashoffset设置为&gt;=整个字体路径的长度(这样就看不到字体了)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将stroke-dasharray设置为&gt;=整个路径的长度(以做出实线的效果)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过插值(CSS animation/动画框架)将stroke-dasharray降为0&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样一个描边效果就实现啦，举两个例子：&lt;/p&gt;
&lt;iframe height=&apos;400&apos; scrolling=&apos;no&apos; title=&apos;Bayleys animated logo (SVG)&apos; src=&apos;//codepen.io/rafita/embed/aNyRgv/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/rafita/pen/aNyRgv/&apos;&gt;Bayleys animated logo (SVG)&lt;/a&gt; by Rafael Contreras (&lt;a href=&apos;https://codepen.io/rafita&apos;&gt;@rafita&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;iframe height=&apos;265&apos; scrolling=&apos;no&apos; title=&apos;anime.js logo animation&apos; src=&apos;//codepen.io/juliangarnier/embed/xOgyjB/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/juliangarnier/pen/xOgyjB/&apos;&gt;anime.js logo animation&lt;/a&gt; by Julian Garnier (&lt;a href=&apos;https://codepen.io/juliangarnier&apos;&gt;@juliangarnier&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;上边的两个例子中，前者实现方式是通过CSS，两后者则是使用JS获取到准确的路径长度(&lt;code class=&quot;language-text&quot;&gt;path.getTotalLength()&lt;/code&gt;)之后在进行的动画，用纯CSS来实现的话则只需要设置元素的stroke-dasharray和stroke-dashoffset为一个较大的值(保证大于路径长度即可)。&lt;/p&gt;
&lt;h4&gt;2.形变动画&lt;/h4&gt;
&lt;p&gt;Tips:这里有点需要注意的地方，那就是如果使用AI将图案导出为SVG，AI为了使得代码尽可能精简以压缩svg文件大小，会将部分你用钢笔工具勾出的贝塞尔曲线路径用椭圆弧曲线路径替代，也就是你会发现导出的SVG里的d属性中会有A/a把C/c、Q/q替代了，这样动画框架在做插值运算的时候就会导致报错，因为Arcto有些参数只能是0或者1，用来决定（LargeArcFlag）是要画小弧（0）还是画大弧（1）或者确定（SweepFlag）弧是顺时针方向（1）还是逆时针方向（0），这时候用Sketch来导出就没这些问题啦（清一色M+C/M+Q）。&lt;/p&gt;
&lt;p&gt;首先需要绘制出形变前和形变后的矢量图案，这里需要注意形变前后的路径点数必须一致，否则也会报错。使用Sketch导出SVG后，提取出形变后的路径信息(d属性)，就可以很方便的实现形变动画啦&lt;/p&gt;
&lt;iframe height=&apos;265&apos; scrolling=&apos;no&apos; title=&apos;animejs - social morph&apos; src=&apos;//codepen.io/ainalem/embed/ryRMbB/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/ainalem/pen/ryRMbB/&apos;&gt;animejs - social morph&lt;/a&gt; by Mikael Ainalem (&lt;a href=&apos;https://codepen.io/ainalem&apos;&gt;@ainalem&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;h4&gt;3.碎片效果&lt;/h4&gt;
&lt;p&gt;Tips:这里借助AI的美工刀工具（Knife）会很方便,将对象切割开AI便会自动新生成一个个小对象（即碎片啦）&lt;/p&gt;
&lt;p&gt;导出后再给碎片的translateX、translateY、rotate属性在一定范围内赋予一个随机值作为起始点，一定时间后归为0（归位）就实线碎片复原的效果啦：&lt;/p&gt;
&lt;iframe height=&apos;265&apos; scrolling=&apos;no&apos; title=&apos;Shattering Text Animation&apos; src=&apos;//codepen.io/ARS/embed/pjypwd/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/ARS/pen/pjypwd/&apos;&gt;Shattering Text Animation&lt;/a&gt; by Arsen Zbidniakov (&lt;a href=&apos;https://codepen.io/ARS&apos;&gt;@ARS&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;h4&gt;4.动态渐变效果&lt;/h4&gt;
&lt;p&gt;动态渐变的效果其实只不过是mask标签以logo路径与不同渐变色的circle结合作为遮罩，再结合不同渐变色的圆从小到大的动画实现的：&lt;/p&gt;
&lt;iframe height=&apos;265&apos; scrolling=&apos;no&apos; title=&apos;Brand Logo Animation&apos; src=&apos;//codepen.io/mallendeo/embed/xVXrYR/?height=265&amp;theme-id=0&amp;default-tab=result&amp;embed-version=2&apos; frameborder=&apos;no&apos; allowtransparency=&apos;true&apos; allowfullscreen=&apos;true&apos; style=&apos;width: 100%;&apos;&gt;See the Pen &lt;a href=&apos;https://codepen.io/mallendeo/pen/xVXrYR/&apos;&gt;Brand Logo Animation&lt;/a&gt; by Mauricio Allende (&lt;a href=&apos;https://codepen.io/mallendeo&apos;&gt;@mallendeo&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;这里出现了两个新的SVG元素：use和mask：&lt;/p&gt;
&lt;p&gt;use元素在SVG文档内取得目标节点(xlink:href)，并在use元素所在的地方粘贴它们（注意：是Deep Copy）&lt;/p&gt;
&lt;p&gt;mask元素可以指定一个对象（谁引用就是谁，在这里即为circle）和透明的遮罩层合成，形成背景。透明遮罩层可以是任何其他图形对象或者&lt;g&gt;元素（用mask元素包裹，在这里即为logo路径）。mask元素用于定义这样的遮罩元素。属性mask用来引用一个这样的遮罩元素。&lt;/p&gt;</content:encoded></item></channel></rss>