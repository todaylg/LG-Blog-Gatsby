{"version":3,"sources":["webpack:///path---lgl-5ea23ace3d5b0c865725.js","webpack:///./.cache/json/lgl.json"],"names":["webpackJsonp","412","module","exports","data","post","id","html","fields","slug","prefix","frontmatter","title","author","category","cover","childImageSharp","resize","src","authornote","site","siteMetadata","facebook","appId","pathContext","prev"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,mHAAAC,KAAA;AAAwzgEC,QAAmuQC,KAAA,QAAAC,OAAA,cAAqCC,aAAgBC,MAAA,MAAAC,OAAA,UAAAC,SAAA,MAAAC,OAA2DC,iBAAmBC,QAAUC,IAAA,4EAAiFC,YAAeb,GAAA,oGAAAC,KAAA,oCAAmJa,MAASC,cAAgBC,UAAYC,MAAA,OAAcC,aAAgBf,KAAA,QAAAgB,MAAuBnB,GAAA,0HAAAE,QAAyIC,KAAA,eAAAC,OAAA,cAA4CC,aAAgBC,MAAA,aAAAE,SAAA","file":"path---lgl-5ea23ace3d5b0c865725.js","sourcesContent":["webpackJsonp([78004447637982],{\n\n/***/ 412:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2019-03-04--lgl/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>前言</h2>\\n<p>转眼间2018年就过去了，自己也结束了通信生涯正式变为了“社畜”。7月份拿到毕业证回到公司后，便是深陷各种业务需求，平时回到寒舍便是早已筋疲力竭，周末再补觉续命+打打游戏，一年下来积累沉淀得相比于学生时代是少之又少，实为惭愧。</p>\\n<p>游戏戒是不可能戒了，还没经住毒瘤同事和G胖眼神的安利与诱惑，Switch、Steam游戏还买了一堆，成为了又一位海拉鲁大陆观光团成员。。。</p>\\n<p>虽说多玩点游戏增长下画面渲染的见识总是好的嘛（逃。。）</p>\\n<p>转行任务是十分艰巨呀。。</p>\\n<p>最后还是决定即使照是葫芦画瓢也好，学着搂一个自己的渲染器，这样也能算是较为系统的一步步补全相关图形学知识。</p>\\n<p>老样子，先上瓢：<a href=\\\"https://github.com/todaylg/LGL\\\">LGL</a>（名字就不提了哈哈）</p>\\n<p>葫芦主要是<a href=\\\"https://github.com/oframe/ogl\\\">ogl</a>和<a href=\\\"https://github.com/mrdoob/three.js\\\">three.js</a>，Three.js自不必多说，已经是Web3D框架的代表了吧。ogl则是一个低抽象级的小型WebGL库，语法直接使用的ES6+，麻雀虽小但是五脏俱全，非常适合用来学习取经。</p>\\n<h2>LGL整体结构</h2>\\n<p>分为Core、Math、Extras三个大模块，Core与Math为核心功能，Extras为封装的一些扩展功能。</p>\\n<p>Core目前包含以下模块：</p>\\n<ul>\\n<li>\\n<p>Renderer  根据配置创建WebGL Renderer，并控制整个渲染队列的渲染</p>\\n</li>\\n<li>\\n<p>Transform  变换物体基类</p>\\n</li>\\n<li>\\n<p>Camera  根据配置创建相机，继承Transform</p>\\n</li>\\n<li>\\n<p>Program  根据shader及配置输入创建并设置好WebGL的program对象</p>\\n</li>\\n<li>\\n<p>Geometry 几何图形基类，根据输入的顶点信息创建几何图元</p>\\n</li>\\n<li>\\n<p>Texture  根据配置创建材质对象</p>\\n</li>\\n<li>\\n<p>Mesh  对Geometry+Program的多一层封装抽象</p>\\n</li>\\n<li>\\n<p>RenderTarget 创建基本的渲染缓冲目标</p>\\n</li>\\n</ul>\\n<p>Math目前包含以下模块：</p>\\n<ul>\\n<li>\\n<p>Vec2  二维向量</p>\\n</li>\\n<li>\\n<p>Vec3  三维向量</p>\\n</li>\\n<li>\\n<p>Vec4  四维向量</p>\\n</li>\\n<li>\\n<p>Color  色值</p>\\n</li>\\n<li>\\n<p>Euler  欧拉角</p>\\n</li>\\n<li>\\n<p>Mat3  三维矩阵</p>\\n</li>\\n<li>\\n<p>Mat4  四维矩阵</p>\\n</li>\\n<li>\\n<p>Quat  四元数</p>\\n</li>\\n</ul>\\n<p>Extras目前包含以下模块：</p>\\n<ul>\\n<li>\\n<p>Orbit  Camera 轨道控制</p>\\n</li>\\n<li>\\n<p>Plane  平面几何体</p>\\n</li>\\n<li>\\n<p>Cube  立方体</p>\\n</li>\\n<li>\\n<p>Sphere  球体</p>\\n</li>\\n<li>\\n<p>Torus  圆环几何体</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Text  文本</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Post  后期处理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> glTFLoader  glTF格式加载器</p>\\n</li>\\n</ul>\\n<p>具体到每个方法的用途的话，已经在文档给出了注释：<a href=\\\"http://todaylg.com/LGL/docs/\\\">Document</a></p>\\n<p>这里介绍一波：<a href=\\\"%5Bhttps://github.com/jsdoc3/jsdoc\\\">jsDoc</a> 养成良好的注释编写习惯，连写文档的功夫都省啦~</p>\\n<p>下面是对模块中的一些具体计算原理及方法做记录及介绍：</p>\\n<h2>Math</h2>\\n<hr>\\n<p>首先从最为独立的Math模块开始，一些基本的数学计算代表的几何意义是需要熟悉和掌握的，这比单纯的记忆公式去死算更有意义：</p>\\n<h3>基础知识</h3>\\n<h4>向量（Vector）</h4>\\n<p>一组有序实数组，对应空间中一个有方向的长度，一个特定变换的概念性记号（线性变换的物质载体）</p>\\n<p><code class=\\\"language-text\\\">vec3 (a1,a2,a3)</code></p>\\n<p><strong>线性代数紧紧围绕向量加法与数乘</strong></p>\\n<h4>张成空间（span）：</h4>\\n<p>所有可以表示为给定向量线性组合的向量的集合，称为给定向量的张成空间。</p>\\n<p>比如：单个向量张成空间为一条直线，两个向量张成空间为二维平面（不考虑共线），三个向量张成空间为三维空间（不考虑共线共面）。</p>\\n<h4>线性相关：</h4>\\n<p>一个向量可以表示为其他向量的线性组合（即这个向量已经落在其他向量的张成空间中），称它们为线性相关。</p>\\n<p>或者表述为：有多个向量时，移除其中一个而不减小张成空间，则它们线性相关。</p>\\n<h4>线性无关：</h4>\\n<p>可想而知，如果所有向量都给张成空间带来了新的维度，则它们线性无关</p>\\n<h4>基</h4>\\n<p>向量空间的一组基是张成该空间的一个线性无关向量集</p>\\n<h4>线性变换：</h4>\\n<p>保持网格线平行且等距分布，并且保持原点不动的变换（这两个条件下可以确保变换后的向量与变换后的单位向量是同样的线性组合）。</p>\\n<p><code class=\\\"language-text\\\">v = -1i + 2j</code></p>\\n<p><code class=\\\"language-text\\\">Transformed v = -1(Transform i) + 2(Transform j)</code></p>\\n<p>可以知道一个二维线性变换仅仅需要四个数字就可以确定（即变换后单位向量i与j的xy坐标)）</p>\\n<h4>矩阵（Matrix）</h4>\\n<p>而所谓的矩阵，其实就是描述一个对空间进行线性变换的信息</p>\\n<p>比如二维矩阵(三维同理)，可以理解为变换后单位向量坐标的组合(a,c)i ，(b,d)j</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">mat2</span> mat <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    a b\\n    c d\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">vec2</span> vec <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nmat<span class=\\\"token operator\\\">*</span>vec <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">,</span>d<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>ax<span class=\\\"token operator\\\">+</span>by<span class=\\\"token punctuation\\\">,</span>cx<span class=\\\"token operator\\\">+</span>dy<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>比如逆时针旋转90°的变换，x轴单位向量i的坐标就变成了(0,1)，y轴单位向量j的坐标就变成了(-1,0)，那变换矩阵即为：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token number\\\">1</span>  <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>非方阵变换也一样，只不过代表的是不同维度之间的映射：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//这个变换即代表将i变换到（2,-1,-2）,j变换到（0,1,1），从二维空间到三维空间的映射</span></code></pre>\\n      </div>\\n<h4>复合变换</h4>\\n<p>矩阵相乘代表着多个线性变换相继作用（需要注意顺序是从右往左）</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">mat2</span> m1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    a b\\n    c d\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">mat2</span> m2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    e f\\n    g h\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//最终方向向量i：</span>\\n<span class=\\\"token punctuation\\\">(</span>xi<span class=\\\"token punctuation\\\">,</span>yi<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> m1<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">[</span>e<span class=\\\"token punctuation\\\">,</span>g<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">+</span>g<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">,</span>d<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>ae<span class=\\\"token operator\\\">+</span>bg<span class=\\\"token punctuation\\\">,</span>ce<span class=\\\"token operator\\\">+</span>dg<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//最终方向向量j：</span>\\n<span class=\\\"token punctuation\\\">(</span>xj<span class=\\\"token punctuation\\\">,</span>yj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> m1<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">[</span>f<span class=\\\"token punctuation\\\">,</span>h<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> f<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">+</span>h<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">,</span>d<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>af<span class=\\\"token operator\\\">+</span>bh<span class=\\\"token punctuation\\\">,</span>cg<span class=\\\"token operator\\\">+</span>dh<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//即复合变换矩阵为：</span>\\nm1<span class=\\\"token operator\\\">*</span>m2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    ae<span class=\\\"token operator\\\">+</span>bg<span class=\\\"token punctuation\\\">,</span>ce<span class=\\\"token operator\\\">+</span>dg\\n    af<span class=\\\"token operator\\\">+</span>bh<span class=\\\"token punctuation\\\">,</span>cg<span class=\\\"token operator\\\">+</span>dh\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4>行列式（determinant）</h4>\\n<p>线性变换改变面积（三维是体积）的比例，称之为这个变换的行列式</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//以单位向量的乘积（二维为面积为1的正方形，三维为体积为1的立方体）</span>\\n<span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">0.0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2.0</span>\\n    <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1.5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1.0</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3.0</span>\\n\\n<span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0.5</span>\\n <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0.5</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0.5</span>\\n<span class=\\\"token comment\\\">//压缩成一条直线时(即将空间压缩到更小的维度时)，行列式为0</span>\\n<span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span>\\n <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span></code></pre>\\n      </div>\\n<p>变换之后i与j的左右关系若变化，则代表空间发生了翻转（三维及变换后不再符合右手法则），此时符号位为负，行列式也如此。</p>\\n<p>实际计算的公式为：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n a<span class=\\\"token punctuation\\\">,</span>b\\n c<span class=\\\"token punctuation\\\">,</span>d\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> ad <span class=\\\"token operator\\\">-</span> bc\\n<span class=\\\"token comment\\\">//(a,c)为单位向量i变换后xy坐标</span>\\n<span class=\\\"token comment\\\">//(b,d)为单位向量j变换后xy坐标</span>\\n<span class=\\\"token comment\\\">//当b与c都为0，变换后为矩形，面积为ad</span>\\n<span class=\\\"token comment\\\">//当b或c为0，变换后为平行四边形，面积也为ad</span>\\n<span class=\\\"token comment\\\">//当b与c都不为0时，得回到定义计算来解释：</span>\\n<span class=\\\"token comment\\\">//(a+b)(c+d)-ac-bd-2bc=ad-bc</span>\\n<span class=\\\"token comment\\\">//其实就是有坐标矩形减出变换后平行四边形面积，最后得到ad-bc</span></code></pre>\\n      </div>\\n<h4>逆变换</h4>\\n<p>即经过变换和逆变换后回到原始状态</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">A<span class=\\\"token operator\\\">*</span>A<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>在解线性方程组时：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//det(A)!=0</span>\\nA<span class=\\\"token operator\\\">*</span>x <span class=\\\"token operator\\\">=</span> v\\nA<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span>A<span class=\\\"token operator\\\">*</span>x <span class=\\\"token operator\\\">=</span> A<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span>v\\nx <span class=\\\"token operator\\\">=</span> A<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span>v</code></pre>\\n      </div>\\n<h4>秩</h4>\\n<p>代表变换后列空间（列即代表基向量变换后的坐标）的维数。可知秩最大与列数相同。</p>\\n<h4>点积</h4>\\n<p>两个维数相同的向量的点积结果为相应坐标配对相乘再相加。</p>\\n<p>其几何意义为向量w在过零点和向量v直线上的投影，投影长度与向量v的长度相乘。（dot(v,w) = |v||w|cosθ)）</p>\\n<p>也可以以变换的观点理解，将其中一个向量转换为线性变换矩阵（x与y代表映射到一维数轴上后的单位向量i与j)，一维矩阵与向量相乘的数值运算与两个向量的点积是一致的。（对偶性：一个空间到数轴的线性变换，都能找到一个向量，称为这个变换的对偶向量）</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token function\\\">dot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">4</span>\\n<span class=\\\"token comment\\\">//点积结果大于0，代表两个向量指向大致相同</span>\\n<span class=\\\"token comment\\\">//点积结果等于0，代表两个向量互相垂直</span>\\n<span class=\\\"token comment\\\">//点积结果大于0，代表两个向量指向相反</span></code></pre>\\n      </div>\\n<h4>叉积</h4>\\n<p> 向量w于v的叉积结果为垂直于这两个向量所在平面的向量u，u的长度为w于v所张成的平行四边形的面积（二维），方向遵循右手定则。提到面积自然想到上面的行列式，所以计算方法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//二维向量叉积（数值代表面积）</span>\\n<span class=\\\"token function\\\">cross</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">vec2</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">vec2</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">,</span>d<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">mat2</span><span class=\\\"token punctuation\\\">[</span>\\n    a<span class=\\\"token punctuation\\\">,</span>c\\n    b<span class=\\\"token punctuation\\\">,</span>d\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> ad <span class=\\\"token operator\\\">-</span> bc  <span class=\\\"token comment\\\">//方向垂直于（a,b）、（c,d）所在平面，遵循右手定则</span>\\n<span class=\\\"token comment\\\">//三维向量叉积（数值代表体积）</span>\\n<span class=\\\"token function\\\">cross</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">vec3</span><span class=\\\"token punctuation\\\">(</span>v1<span class=\\\"token punctuation\\\">,</span>v2<span class=\\\"token punctuation\\\">,</span>v3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">vec3</span><span class=\\\"token punctuation\\\">(</span>w1<span class=\\\"token punctuation\\\">,</span>w2<span class=\\\"token punctuation\\\">,</span>w3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    i<span class=\\\"token punctuation\\\">,</span>v1<span class=\\\"token punctuation\\\">,</span>w1\\n    j<span class=\\\"token punctuation\\\">,</span>v2<span class=\\\"token punctuation\\\">,</span>w2\\n    k<span class=\\\"token punctuation\\\">,</span>v3<span class=\\\"token punctuation\\\">,</span>w3\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">i</span><span class=\\\"token punctuation\\\">(</span>v2w3<span class=\\\"token operator\\\">-</span>v3w2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">+</span><span class=\\\"token function\\\">j</span><span class=\\\"token punctuation\\\">(</span>v3w1<span class=\\\"token operator\\\">-</span>v1w3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">+</span><span class=\\\"token function\\\">k</span><span class=\\\"token punctuation\\\">(</span>v1w2<span class=\\\"token operator\\\">-</span>v2w1<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h4>基变换</h4>\\n<p>通过矩阵变换(称为基变换矩阵 )完成两组不同基向量（i、j）的映射，逆矩阵则反向转换。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//A为基向量变换矩阵，M为变换矩阵</span>\\nA<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">*</span> M <span class=\\\"token operator\\\">*</span> A <span class=\\\"token comment\\\">//通常代表在另一坐标系中描述M变换</span></code></pre>\\n      </div>\\n<h4>特征向量与特征值</h4>\\n<p>特征向量及在线性变换之后任停留在它张成空间（直线）里的向量，特征值则为衡量特征向量在变换中拉伸或压缩比例的因子。比如三维空间的旋转，其特征向量及为旋转轴（特征值为1，不压缩拉伸）。行列式与特征向量的好处在于其与所选的坐标系无关，并不会改变它们最根本的值</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">A<span class=\\\"token operator\\\">*</span>v <span class=\\\"token operator\\\">=</span> λv <span class=\\\"token comment\\\">//矩阵变换等于特征值与向量相乘（降维情况）</span>\\nA<span class=\\\"token operator\\\">*</span>v<span class=\\\"token operator\\\">-</span>λΙv <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token comment\\\">//I为单位矩阵</span>\\n<span class=\\\"token punctuation\\\">(</span>A<span class=\\\"token operator\\\">-</span>λΙ<span class=\\\"token punctuation\\\">)</span>v <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span>A<span class=\\\"token operator\\\">-</span>λΙ<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span></code></pre>\\n      </div>\\n<h4>齐次坐标</h4>\\n<p>三维表示的点和向量可能会被搞混，齐次坐标可以解决这个问题，其对三维空间中的点和向量的表示都是四维的：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">vec4</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>a1<span class=\\\"token punctuation\\\">,</span>a2<span class=\\\"token punctuation\\\">,</span>a3<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//任意点</span>\\n<span class=\\\"token keyword\\\">vec4</span> w <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>b1<span class=\\\"token punctuation\\\">,</span>b2<span class=\\\"token punctuation\\\">,</span>b3<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//任意向量</span></code></pre>\\n      </div>\\n<p>所有的仿射变换（具有保持直线的特性）都可以借助其次坐标表示成矩阵相乘的形式。因为所有的仿射变换都可以用一致的形式来表示，所以在处理级联的情况，会比三维的表示方便得多。</p>\\n<h4>平移</h4>\\n<p>平移变换通过一个位移向量来移动点的位置</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">vec4</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">,</span>z<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//初始点  **写按行写，但是意思是列坐标描述点的坐标，左乘</span>\\n<span class=\\\"token keyword\\\">vec4</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>ax<span class=\\\"token punctuation\\\">,</span>ay<span class=\\\"token punctuation\\\">,</span>az<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//位移向量</span>\\n<span class=\\\"token keyword\\\">vec4</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>x1<span class=\\\"token punctuation\\\">,</span>y1<span class=\\\"token punctuation\\\">,</span>z1<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//位移终点</span>\\n\\nx1 <span class=\\\"token operator\\\">=</span> x <span class=\\\"token operator\\\">+</span> ax<span class=\\\"token punctuation\\\">;</span>\\ny1 <span class=\\\"token operator\\\">=</span> y <span class=\\\"token operator\\\">+</span> ay<span class=\\\"token punctuation\\\">;</span>\\nz1 <span class=\\\"token operator\\\">=</span> z <span class=\\\"token operator\\\">+</span> az<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//平移矩阵 T</span>\\np1 <span class=\\\"token operator\\\">=</span> T <span class=\\\"token operator\\\">*</span> p<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//（行*列）</span>\\n<span class=\\\"token comment\\\">//其中：</span>\\n<span class=\\\"token keyword\\\">mat4</span> T <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>ax<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>ay<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>az<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>   <span class=\\\"token comment\\\">//用于保持结果为齐次坐标形式</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4>缩放</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">p1 <span class=\\\"token operator\\\">=</span> S <span class=\\\"token operator\\\">*</span> p<span class=\\\"token punctuation\\\">;</span>\\n\\nx1 <span class=\\\"token operator\\\">=</span> x<span class=\\\"token operator\\\">*</span>bx<span class=\\\"token punctuation\\\">;</span>\\ny1 <span class=\\\"token operator\\\">=</span> y<span class=\\\"token operator\\\">*</span>by<span class=\\\"token punctuation\\\">;</span>\\nz1 <span class=\\\"token operator\\\">=</span> z<span class=\\\"token operator\\\">*</span>bz<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//其中</span>\\n<span class=\\\"token keyword\\\">mat4</span> S <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    bx<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>by<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>bz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4>旋转</h4>\\n<p>旋转会复杂一些，需要旋转点（不动点）、制定旋转轴方向的一个向量、旋转的角度。</p>\\n<p>可以参考：<a href=\\\"https://blog.csdn.net/csxiaoshui/article/details/65446125\\\">https://blog.csdn.net/csxiaoshui/article/details/65446125</a></p>\\n<p>由简单的条件下一步一步推导至通用的旋转矩阵</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//1.绕原点的二维旋转</span>\\n<span class=\\\"token comment\\\">//极坐标公式：</span>\\nx<span class=\\\"token operator\\\">=</span>rcosϕ\\ny<span class=\\\"token operator\\\">=</span>rsinϕ\\n<span class=\\\"token comment\\\">//三角函数正弦余弦公式：</span>\\nx′<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">rcos</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token operator\\\">+</span>ϕ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=</span>rcosθcosϕ−rsinθsinϕ\\ny′<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">rsin</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token operator\\\">+</span>ϕ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=</span>rsinθcosϕ<span class=\\\"token operator\\\">+</span>rcosθsinϕ\\n<span class=\\\"token comment\\\">//代入x、y</span>\\nx′<span class=\\\"token operator\\\">=</span>xcosθ−ysinθ  \\ny′<span class=\\\"token operator\\\">=</span>xsinθ<span class=\\\"token operator\\\">+</span>ycosθ  \\n<span class=\\\"token comment\\\">//矩阵表示</span>\\n<span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> R <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">[</span>x′<span class=\\\"token punctuation\\\">,</span> y′<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">mat2</span> R <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    cosθ<span class=\\\"token punctuation\\\">,</span>−sinθ\\n    sinθ<span class=\\\"token punctuation\\\">,</span>cosθ\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//2.绕任意点的二维旋转</span>\\n<span class=\\\"token comment\\\">//级联上两次位移矩阵即可（旋转点位移至原点 => 绕原点旋转 => 旋转点移回原位）</span>\\nv’<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">T</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span>R<span class=\\\"token operator\\\">*</span><span class=\\\"token function\\\">T</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span>x<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//引入三维齐次坐标</span>\\n<span class=\\\"token keyword\\\">mat3</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>tx<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>ty<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">[</span>\\n    cosθ<span class=\\\"token punctuation\\\">,</span>−sinθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    sinθ<span class=\\\"token punctuation\\\">,</span>cosθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>tx<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>ty<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    cosθ<span class=\\\"token punctuation\\\">,</span>−sinθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span>−cosθ<span class=\\\"token punctuation\\\">)</span>tx<span class=\\\"token operator\\\">+</span>ty∗sinθ<span class=\\\"token punctuation\\\">,</span>\\n    sinθ<span class=\\\"token punctuation\\\">,</span>cosθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span>−cosθ<span class=\\\"token punctuation\\\">)</span>ty−tx∗sinθ<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//3.三维基本旋转</span>\\n<span class=\\\"token comment\\\">//引入四维齐次坐标</span>\\n<span class=\\\"token comment\\\">//绕X轴的旋转：</span>\\nx′<span class=\\\"token operator\\\">=</span>x\\ny′<span class=\\\"token operator\\\">=</span>ycosθ−zsinθ\\nz′<span class=\\\"token operator\\\">=</span>ysinθ<span class=\\\"token operator\\\">+</span>zcosθ\\n<span class=\\\"token comment\\\">//矩阵表示</span>\\n<span class=\\\"token keyword\\\">mat4</span> Mx <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>cosθ<span class=\\\"token punctuation\\\">,</span>−sinθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>sinθ<span class=\\\"token punctuation\\\">,</span>cosθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//同理可求得绕Y轴旋转的矩阵My，绕Z轴旋转的矩阵Mz</span>\\n<span class=\\\"token comment\\\">//任何旋转点在原点的旋转矩阵都可以表示成Mx、My、Mz三个旋转矩阵的级联</span>\\n<span class=\\\"token comment\\\">//可以将任意旋转轴旋转到与X/Y/Z某一轴重合，执行基本旋转，之后再执行反向旋转恢复旋转轴方向</span></code></pre>\\n      </div>\\n<h4>错切</h4>\\n<p>错切（shear）由角度θ来表征，比如x错切：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">x1 <span class=\\\"token operator\\\">=</span> x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token operator\\\">*</span><span class=\\\"token function\\\">cot</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ny1 <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">;</span>\\nz1 <span class=\\\"token operator\\\">=</span> z<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//错切矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> Hx <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token function\\\">cot</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4>欧拉角</h4>\\n<p>欧拉角是通过制定三个与旋转轴相关的角度以表示任意方向的方法。zX顺规：</p>\\n<ul>\\n<li>\\n<p>物体绕全局的 z 轴旋转角 α</p>\\n</li>\\n<li>\\n<p>继续绕自己的 X 轴旋转角 β</p>\\n</li>\\n<li>\\n<p>最后绕自己的 Z 轴旋转角 γ</p>\\n</li>\\n</ul>\\n<p>万向节死锁（Gimbal Lock）：</p>\\n<p><a href=\\\"https://zh.wikipedia.org/wiki/%E7%92%B0%E6%9E%B6%E9%8E%96%E5%AE%9A\\\">https://zh.wikipedia.org/wiki/%E7%92%B0%E6%9E%B6%E9%8E%96%E5%AE%9A</a></p>\\n<p>角度为±90°的第二次旋转使得第一次和第三次旋转的旋转轴相同的现象（丧失了一个自由度），称作万向锁。</p>\\n<p><a href=\\\"https://www.youtube.com/watch?v=rsKy-4dbA04\\\">https://www.youtube.com/watch?v=rsKy-4dbA04</a></p>\\n<p><a href=\\\"https://www.matongxue.com/madocs/442.html\\\">https://www.matongxue.com/madocs/442.html</a></p>\\n<p>附：飞行器旋转的专业的术语</p>\\n<ul>\\n<li>\\n<p>偏航（Yaw），围绕机头上方轴旋转（左右摇头）</p>\\n</li>\\n<li>\\n<p>俯仰（Pitch），围绕机身右方轴旋转（上下点头）</p>\\n</li>\\n<li>\\n<p>桶滚（Roll），围绕机头前方轴旋转（左右摆头）</p>\\n</li>\\n</ul>\\n<h4>四元数</h4>\\n<p>对二维的情形，通常会使用复数来表示旋转的变换：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//欧拉公式（i^2 = -1）</span>\\ne<span class=\\\"token operator\\\">^</span>iθ <span class=\\\"token operator\\\">=</span> cosθ <span class=\\\"token operator\\\">+</span> isinθ\\n<span class=\\\"token comment\\\">//复数c的极坐标可以写成 (r^2 = a^2 + b^2)</span>\\nc <span class=\\\"token operator\\\">=</span> a <span class=\\\"token operator\\\">+</span> ib <span class=\\\"token operator\\\">=</span> re<span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">(</span>iθ<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//设旋转角度为φ</span>\\nc′ <span class=\\\"token operator\\\">=</span> re<span class=\\\"token operator\\\">^</span><span class=\\\"token function\\\">i</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token operator\\\">+</span>φ<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token operator\\\">=</span> re<span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">(</span>iθ<span class=\\\"token punctuation\\\">)</span>e<span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">(</span>iφ<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//e^(iφ)即为复平面的一个旋转算子</span></code></pre>\\n      </div>\\n<p>对于三维的情况，确定一个以原点为旋转点（不是的话可以级联位移矩阵）的三维旋转，需要指定一个旋转方向（向量）和旋转角度（标量），使用一种即包含向量又包含标量的表示，称为四元数形式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">vec4</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>q0<span class=\\\"token punctuation\\\">,</span>q1<span class=\\\"token punctuation\\\">,</span>q2<span class=\\\"token punctuation\\\">,</span>q3<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>q0<span class=\\\"token punctuation\\\">,</span> q<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//q为三维向量</span></code></pre>\\n      </div>\\n<p>具体介绍可参考：</p>\\n<p><a href=\\\"https://www.zhihu.com/question/23005815/answer/33971127\\\">https://www.zhihu.com/question/23005815/answer/33971127</a></p>\\n<p><a href=\\\"https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B8\\\">https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B8</a></p>\\n<h4>色值换算</h4>\\n<p><strong>HEX &#x3C;=> RGB</strong></p>\\n<p>Hex转RGB其实就是十六进制与十进制之间的转换，核心为 <code class=\\\"language-text\\\">parseInt(&quot;FF&quot;, 16)</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^#?([a-f\\\\d]{2})([a-f\\\\d]{2})([a-f\\\\d]{2})$/i</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span>hex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>r <span class=\\\"token operator\\\">=</span> r <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">255</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>g <span class=\\\"token operator\\\">=</span> r <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">255</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>b <span class=\\\"token operator\\\">=</span> r <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">255</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>RGB转Hex即十进制转十六进制，核心为<code class=\\\"language-text\\\">Number(255).toString(16);</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">let</span> hex <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>rgbArr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><strong>RGB &#x3C;=> HSL/HSV</strong></p>\\n<p>H指Hue(色调)。 0(或360)表示红色，120表示绿色，240表示蓝色，当然可取其他数值来确定其它颜色；<br>\\nS指Saturation(饱和度)。 取值为0%到100%之间的值；<br>\\nL指Lightness(亮度)。 取值为0%到100%之间的值；</p>\\n<p>参考换算公式：<a href=\\\"https://en.wikipedia.org/wiki/HSL_and_HSV\\\">https://en.wikipedia.org/wiki/HSL<em>and</em>HSV</a></p>\\n<p><strong>CSS颜色关键字</strong></p>\\n<p>至于CSS颜色关键字的转换，可以像Three.js直接粗暴的罗列其与Hex格式的对应关系：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> ColorKeywords <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">'aliceblue'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0xF0F8FF</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'antiquewhite'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0xFAEBD7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'aqua'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0x00FFFF</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'aquamarine'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0x7FFFD4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'azure'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0xF0FFFF</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>或者借助DOM特性读取色值：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> div <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>backgroundColor <span class=\\\"token operator\\\">=</span> color<span class=\\\"token punctuation\\\">;</span>\\n\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> c <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComputedStyle</span><span class=\\\"token punctuation\\\">(</span>createDiv<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>backgroundColor<span class=\\\"token punctuation\\\">;</span>    \\n\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChild</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>之后再对读取出的字符串进行格式转化。</p>\\n<h3>模块划分</h3>\\n<p>Math模块基于 <a href=\\\"https://github.com/toji/gl-matrix\\\">gl-Matrix</a> (column-major format)进行封装，对外暴露向量（Vec2、Vec3、Vec4）、矩阵（Mat3、Mat4）、欧拉角（Euler）、四元数（Quat）的一些基本运算方法。</p>\\n<p>没啥好说的，具体到每个方法的计算方法可以直接查看文档。</p>\\n<h2>Core</h2>\\n<hr>\\n<p>Core模块依赖Math模块，对WebGL API进行了封装和抽象。</p>\\n<p>对外暴露的API与Three.js有一些类似的地方，最大的区别在于Core部分不提供默认和可选的材质，即完全分离开了Shader部分。</p>\\n<p>这样做的好处显而易见，Core只用专注于控制物体的渲染队列即可，而不用耦合进各式各样的Shader片段。弊端也同样显而易见，需要自己为每个场景编写全部Shader，使用成本无疑高了很多。</p>\\n<h4>Transform</h4>\\n<p>Thansform相当于Three.js中的Object3D，是在场景中具体显示物体的基类，包含了基本的比如位置(Position)旋转(Rotate)缩放(Scale)等信息，提供了父子(Child/Parent)关系的抽象。</p>\\n<p>渲染框架基本都会提供父子对象的抽象，这样的好处是啥呢？</p>\\n<p>要到Renderer的遍历才够详细</p>\\n<h4>Camera</h4>\\n<p>确定相机的定位的计算需要得到VRP（Voew-Reference Point，观察参考点）、VPN（View-Plane Normal，观察平面法向量）、VUP（View-Up Vector，观察正向向量）三个值。</p>\\n<p><strong>LookAt</strong></p>\\n<p>相机的位置称为视点（eye point），相机的方向指向一个点称为参考点（at point），这两个点确定了VPN和VRP。VRP自然就是视点，VPN则是视点和参考点相减再归一化即可得到。最后我们只需要再对照相机指定想要观察的正向（VUP）就OK了，所以lookAt函数一般暴露的API为：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"> <span class=\\\"token comment\\\">/**\\n  * @function\\n\\n  * @description  Generates a matrix that makes something look at something else.\\n\\n  * @param {vec3} eye Position of the viewer\\n\\n  * @param {vec3} target Point the viewer is looking at\\n\\n  * @param {vec3} up vec3 pointing up\\n\\n  * @returns {Mat4} \\n\\n*/</span>\\n<span class=\\\"token function\\\">lookAt</span><span class=\\\"token punctuation\\\">(</span>eye<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">,</span> up<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n   <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>具体是如何计算的呢？</p>\\n<p>首先明确Camera矩阵（View矩阵）的作用，是将世界坐标系中的物体的顶点坐标转换到摄像机坐标系。</p>\\n<p>转换步骤：</p>\\n<ul>\\n<li>\\n<p>整体平移，将相机视点平移至世界坐标系原点</p>\\n</li>\\n<li>\\n<p>将参考点从世界坐标系转换至相机坐标系</p>\\n</li>\\n</ul>\\n<p>即：<code class=\\\"language-text\\\">ViewMatrix = R * T</code></p>\\n<p>1.首先求UVW：</p>\\n<p>首先W即为视线方向，normalize(target-eye)即可</p>\\n<p>V则可以通过叉乘up和W得到</p>\\n<p>U自然就是叉乘W和V即可</p>\\n<p>就可以求得坐标系矩阵：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">mat4</span> R <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    ux<span class=\\\"token punctuation\\\">,</span>uy<span class=\\\"token punctuation\\\">,</span>uz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    vx<span class=\\\"token punctuation\\\">,</span>vy<span class=\\\"token punctuation\\\">,</span>vz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    wx<span class=\\\"token punctuation\\\">,</span>wy<span class=\\\"token punctuation\\\">,</span>wz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//由eye可得平移矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> T<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>eyeX<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>eyeY<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>eyeZ<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//最后的结果：</span>\\n<span class=\\\"token keyword\\\">mat4</span> viewMatrix <span class=\\\"token operator\\\">=</span> R <span class=\\\"token operator\\\">*</span> T <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    ux<span class=\\\"token punctuation\\\">,</span>uy<span class=\\\"token punctuation\\\">,</span>uz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>u0 <span class=\\\"token operator\\\">*</span> eyex <span class=\\\"token operator\\\">+</span> u1 <span class=\\\"token operator\\\">*</span> eyey <span class=\\\"token operator\\\">+</span> u2 <span class=\\\"token operator\\\">*</span> eyez<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    vx<span class=\\\"token punctuation\\\">,</span>vy<span class=\\\"token punctuation\\\">,</span>vz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>v0 <span class=\\\"token operator\\\">*</span> eyex <span class=\\\"token operator\\\">+</span> v1 <span class=\\\"token operator\\\">*</span> eyey <span class=\\\"token operator\\\">+</span> v2 <span class=\\\"token operator\\\">*</span> eyez<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    wx<span class=\\\"token punctuation\\\">,</span>wy<span class=\\\"token punctuation\\\">,</span>wz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>w0 <span class=\\\"token operator\\\">*</span> eyex <span class=\\\"token operator\\\">+</span> w1 <span class=\\\"token operator\\\">*</span> eyey <span class=\\\"token operator\\\">+</span> w2 <span class=\\\"token operator\\\">*</span> eyez<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p><strong>正交(orthographic)投影</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">/**\\n * Generates a orthogonal projection matrix with the given bounds\\n * @private\\n * @param {mat4} out mat4 frustum matrix will be written into\\n * @param {number} left Left bound of the frustum\\n * @param {number} right Right bound of the frustum\\n * @param {number} bottom Bottom bound of the frustum\\n * @param {number} top Top bound of the frustum\\n * @param {number} near Near bound of the frustum\\n * @param {number} far Far bound of the frustum\\n * @returns {mat4} out\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ortho</span><span class=\\\"token punctuation\\\">(</span>out<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">,</span> bottom<span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">,</span> near<span class=\\\"token punctuation\\\">,</span> far<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>在WebGL中，默认的投影变换矩阵是单位矩阵（视见体是规范的立方体）。显然，为了得到一般的正交投影变换矩阵，我们只需找到将暴露出去ortho函数所指定的长方体映射成这个立方体的变换矩阵即可。</p>\\n<p>实施步骤：</p>\\n<ul>\\n<li>\\n<p>通过平移把指定视见体的中心移动到规范视见体的中心（原点）</p>\\n</li>\\n<li>\\n<p>缩放指定视见体使得每条边的长度都为2（+1 - -1）</p>\\n</li>\\n</ul>\\n<p>前面说的位移矩阵还有缩放矩阵就派上用场啦：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//位移矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> T <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">+</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//缩放矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> S <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token operator\\\">-</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//正交变换矩阵即为：</span>\\n<span class=\\\"token keyword\\\">mat4</span> N <span class=\\\"token operator\\\">=</span> S <span class=\\\"token operator\\\">*</span> T <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">+</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//如果视见体是对称的(r = -l, t = -b)，还可以进一步简化矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> N <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">/</span>r<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">/</span>t<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p><strong>透视(perspective)投影</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">/**\\n * Generates a perspective projection matrix with the given bounds\\n * @private\\n * @param {mat4} out mat4 frustum matrix will be written into\\n * @param {number} fovy Vertical field of view in radians\\n * @param {number} aspect Aspect ratio. typically viewport width/height\\n * @param {number} near Near bound of the frustum\\n * @param {number} far Far bound of the frustum\\n * @returns {mat4} out\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">perspective</span><span class=\\\"token punctuation\\\">(</span>out<span class=\\\"token punctuation\\\">,</span> fovy<span class=\\\"token punctuation\\\">,</span> aspect<span class=\\\"token punctuation\\\">,</span> near<span class=\\\"token punctuation\\\">,</span> far<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>同样的思路，为了得到WebGL中(frustum)可以使用的透视投影变换矩阵，我们先将指定的棱台视见体变换为规范视见体：</p>\\n<ul>\\n<li>\\n<p>通过错切变换矩阵H</p>\\n</li>\\n<li>\\n<p>缩放变换矩阵S</p>\\n</li>\\n<li>\\n<p>投影规范化矩阵N</p>\\n</li>\\n</ul>\\n<p>通过错切变换矩阵H的目的是将不对称的棱台转化为对称的棱台：</p>\\n<p><code class=\\\"language-text\\\">H = H(arccot((l+r)/-2*near,arccot((t+b)/-2*near))</code></p>\\n<p>缩放矩阵：</p>\\n<p><code class=\\\"language-text\\\">S = S(-2*near/(r-l), -2*near/(t-b), 1)</code></p>\\n<p>投影规范化矩阵:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">N <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>三者级联即可得到最后的投影变换矩阵</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">P <span class=\\\"token operator\\\">=</span> N<span class=\\\"token operator\\\">*</span>S<span class=\\\"token operator\\\">*</span>H <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span>n<span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">+</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span>n<span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2f</span>n<span class=\\\"token operator\\\">/</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//如果视见体是对称的(r = -l, t = -b)，还可以进一步简化矩阵</span>\\nP <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n n<span class=\\\"token operator\\\">/</span>r<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>n<span class=\\\"token operator\\\">/</span>t<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2f</span>n<span class=\\\"token operator\\\">/</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>推导过程还可参考：</p>\\n<p><a href=\\\"http://www.360doc.com/content/14/1028/10/19175681_420522154.shtml\\\">http://www.360doc.com/content/14/1028/10/19175681_420522154.shtml</a></p>\\n<p>待补部分介绍：</p>\\n<ul>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Renderer: 渲染队列</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Program：WebGL API 封装简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Geometry： 几何数据读取抽象封装简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Texture：材质相关API即技术简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Mesh： 抽象简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> RenderTarget： 几个Buffer的原理和作用</p>\\n</li>\\n</ul>\\n<h2>Extras</h2>\\n<hr>\\n<ul>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Orbit；轨道计算的数学原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Plane：面几何体的顶点计算原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Cube：立方体的顶点计算原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Sphere： 球体的顶点计算原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Torus： 圆环几何体的顶点计算原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Text：渲染字体的方法（位图及高采样啥的）</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Post：后期处理的概念及封装简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> glTF：数据格式及Parser（单拆一篇文章）</p>\\n</li>\\n</ul>\",\"fields\":{\"slug\":\"/lgl/\",\"prefix\":\"2019-03-04\"},\"frontmatter\":{\"title\":\"LGL\",\"author\":\"todaylg\",\"category\":\"LGL\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/LG-Blog-Gatsby/static/bg-882eac91561e1177e9972d23bf662f9b-160fa.png\"}}}}},\"authornote\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>todaylg</strong> </p>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/lgl/\",\"prev\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2018-08-31--miku-setup/index.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"/miku-setup/\",\"prefix\":\"2018-08-31\"},\"frontmatter\":{\"title\":\"MikuMikuMi\",\"category\":\"废话集\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---lgl-5ea23ace3d5b0c865725.js","module.exports = {\"data\":{\"post\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2019-03-04--lgl/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>前言</h2>\\n<p>转眼间2018年就过去了，自己也结束了通信生涯正式变为了“社畜”。7月份拿到毕业证回到公司后，便是深陷各种业务需求，平时回到寒舍便是早已筋疲力竭，周末再补觉续命+打打游戏，一年下来积累沉淀得相比于学生时代是少之又少，实为惭愧。</p>\\n<p>游戏戒是不可能戒了，还没经住毒瘤同事和G胖眼神的安利与诱惑，Switch、Steam游戏还买了一堆，成为了又一位海拉鲁大陆观光团成员。。。</p>\\n<p>虽说多玩点游戏增长下画面渲染的见识总是好的嘛（逃。。）</p>\\n<p>转行任务是十分艰巨呀。。</p>\\n<p>最后还是决定即使照是葫芦画瓢也好，学着搂一个自己的渲染器，这样也能算是较为系统的一步步补全相关图形学知识。</p>\\n<p>老样子，先上瓢：<a href=\\\"https://github.com/todaylg/LGL\\\">LGL</a>（名字就不提了哈哈）</p>\\n<p>葫芦主要是<a href=\\\"https://github.com/oframe/ogl\\\">ogl</a>和<a href=\\\"https://github.com/mrdoob/three.js\\\">three.js</a>，Three.js自不必多说，已经是Web3D框架的代表了吧。ogl则是一个低抽象级的小型WebGL库，语法直接使用的ES6+，麻雀虽小但是五脏俱全，非常适合用来学习取经。</p>\\n<h2>LGL整体结构</h2>\\n<p>分为Core、Math、Extras三个大模块，Core与Math为核心功能，Extras为封装的一些扩展功能。</p>\\n<p>Core目前包含以下模块：</p>\\n<ul>\\n<li>\\n<p>Renderer  根据配置创建WebGL Renderer，并控制整个渲染队列的渲染</p>\\n</li>\\n<li>\\n<p>Transform  变换物体基类</p>\\n</li>\\n<li>\\n<p>Camera  根据配置创建相机，继承Transform</p>\\n</li>\\n<li>\\n<p>Program  根据shader及配置输入创建并设置好WebGL的program对象</p>\\n</li>\\n<li>\\n<p>Geometry 几何图形基类，根据输入的顶点信息创建几何图元</p>\\n</li>\\n<li>\\n<p>Texture  根据配置创建材质对象</p>\\n</li>\\n<li>\\n<p>Mesh  对Geometry+Program的多一层封装抽象</p>\\n</li>\\n<li>\\n<p>RenderTarget 创建基本的渲染缓冲目标</p>\\n</li>\\n</ul>\\n<p>Math目前包含以下模块：</p>\\n<ul>\\n<li>\\n<p>Vec2  二维向量</p>\\n</li>\\n<li>\\n<p>Vec3  三维向量</p>\\n</li>\\n<li>\\n<p>Vec4  四维向量</p>\\n</li>\\n<li>\\n<p>Color  色值</p>\\n</li>\\n<li>\\n<p>Euler  欧拉角</p>\\n</li>\\n<li>\\n<p>Mat3  三维矩阵</p>\\n</li>\\n<li>\\n<p>Mat4  四维矩阵</p>\\n</li>\\n<li>\\n<p>Quat  四元数</p>\\n</li>\\n</ul>\\n<p>Extras目前包含以下模块：</p>\\n<ul>\\n<li>\\n<p>Orbit  Camera 轨道控制</p>\\n</li>\\n<li>\\n<p>Plane  平面几何体</p>\\n</li>\\n<li>\\n<p>Cube  立方体</p>\\n</li>\\n<li>\\n<p>Sphere  球体</p>\\n</li>\\n<li>\\n<p>Torus  圆环几何体</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Text  文本</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Post  后期处理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> glTFLoader  glTF格式加载器</p>\\n</li>\\n</ul>\\n<p>具体到每个方法的用途的话，已经在文档给出了注释：<a href=\\\"http://todaylg.com/LGL/docs/\\\">Document</a></p>\\n<p>这里介绍一波：<a href=\\\"%5Bhttps://github.com/jsdoc3/jsdoc\\\">jsDoc</a> 养成良好的注释编写习惯，连写文档的功夫都省啦~</p>\\n<p>下面是对模块中的一些具体计算原理及方法做记录及介绍：</p>\\n<h2>Math</h2>\\n<hr>\\n<p>首先从最为独立的Math模块开始，一些基本的数学计算代表的几何意义是需要熟悉和掌握的，这比单纯的记忆公式去死算更有意义：</p>\\n<h3>基础知识</h3>\\n<h4>向量（Vector）</h4>\\n<p>一组有序实数组，对应空间中一个有方向的长度，一个特定变换的概念性记号（线性变换的物质载体）</p>\\n<p><code class=\\\"language-text\\\">vec3 (a1,a2,a3)</code></p>\\n<p><strong>线性代数紧紧围绕向量加法与数乘</strong></p>\\n<h4>张成空间（span）：</h4>\\n<p>所有可以表示为给定向量线性组合的向量的集合，称为给定向量的张成空间。</p>\\n<p>比如：单个向量张成空间为一条直线，两个向量张成空间为二维平面（不考虑共线），三个向量张成空间为三维空间（不考虑共线共面）。</p>\\n<h4>线性相关：</h4>\\n<p>一个向量可以表示为其他向量的线性组合（即这个向量已经落在其他向量的张成空间中），称它们为线性相关。</p>\\n<p>或者表述为：有多个向量时，移除其中一个而不减小张成空间，则它们线性相关。</p>\\n<h4>线性无关：</h4>\\n<p>可想而知，如果所有向量都给张成空间带来了新的维度，则它们线性无关</p>\\n<h4>基</h4>\\n<p>向量空间的一组基是张成该空间的一个线性无关向量集</p>\\n<h4>线性变换：</h4>\\n<p>保持网格线平行且等距分布，并且保持原点不动的变换（这两个条件下可以确保变换后的向量与变换后的单位向量是同样的线性组合）。</p>\\n<p><code class=\\\"language-text\\\">v = -1i + 2j</code></p>\\n<p><code class=\\\"language-text\\\">Transformed v = -1(Transform i) + 2(Transform j)</code></p>\\n<p>可以知道一个二维线性变换仅仅需要四个数字就可以确定（即变换后单位向量i与j的xy坐标)）</p>\\n<h4>矩阵（Matrix）</h4>\\n<p>而所谓的矩阵，其实就是描述一个对空间进行线性变换的信息</p>\\n<p>比如二维矩阵(三维同理)，可以理解为变换后单位向量坐标的组合(a,c)i ，(b,d)j</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">mat2</span> mat <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    a b\\n    c d\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">vec2</span> vec <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nmat<span class=\\\"token operator\\\">*</span>vec <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">,</span>d<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>ax<span class=\\\"token operator\\\">+</span>by<span class=\\\"token punctuation\\\">,</span>cx<span class=\\\"token operator\\\">+</span>dy<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>比如逆时针旋转90°的变换，x轴单位向量i的坐标就变成了(0,1)，y轴单位向量j的坐标就变成了(-1,0)，那变换矩阵即为：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token number\\\">1</span>  <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>非方阵变换也一样，只不过代表的是不同维度之间的映射：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//这个变换即代表将i变换到（2,-1,-2）,j变换到（0,1,1），从二维空间到三维空间的映射</span></code></pre>\\n      </div>\\n<h4>复合变换</h4>\\n<p>矩阵相乘代表着多个线性变换相继作用（需要注意顺序是从右往左）</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">mat2</span> m1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    a b\\n    c d\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">mat2</span> m2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    e f\\n    g h\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//最终方向向量i：</span>\\n<span class=\\\"token punctuation\\\">(</span>xi<span class=\\\"token punctuation\\\">,</span>yi<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> m1<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">[</span>e<span class=\\\"token punctuation\\\">,</span>g<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">+</span>g<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">,</span>d<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>ae<span class=\\\"token operator\\\">+</span>bg<span class=\\\"token punctuation\\\">,</span>ce<span class=\\\"token operator\\\">+</span>dg<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//最终方向向量j：</span>\\n<span class=\\\"token punctuation\\\">(</span>xj<span class=\\\"token punctuation\\\">,</span>yj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> m1<span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">[</span>f<span class=\\\"token punctuation\\\">,</span>h<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> f<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">+</span>h<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">,</span>d<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>af<span class=\\\"token operator\\\">+</span>bh<span class=\\\"token punctuation\\\">,</span>cg<span class=\\\"token operator\\\">+</span>dh<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//即复合变换矩阵为：</span>\\nm1<span class=\\\"token operator\\\">*</span>m2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    ae<span class=\\\"token operator\\\">+</span>bg<span class=\\\"token punctuation\\\">,</span>ce<span class=\\\"token operator\\\">+</span>dg\\n    af<span class=\\\"token operator\\\">+</span>bh<span class=\\\"token punctuation\\\">,</span>cg<span class=\\\"token operator\\\">+</span>dh\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4>行列式（determinant）</h4>\\n<p>线性变换改变面积（三维是体积）的比例，称之为这个变换的行列式</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//以单位向量的乘积（二维为面积为1的正方形，三维为体积为1的立方体）</span>\\n<span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">0.0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2.0</span>\\n    <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1.5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1.0</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3.0</span>\\n\\n<span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0.5</span>\\n <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0.5</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0.5</span>\\n<span class=\\\"token comment\\\">//压缩成一条直线时(即将空间压缩到更小的维度时)，行列式为0</span>\\n<span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span>\\n <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span></code></pre>\\n      </div>\\n<p>变换之后i与j的左右关系若变化，则代表空间发生了翻转（三维及变换后不再符合右手法则），此时符号位为负，行列式也如此。</p>\\n<p>实际计算的公式为：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n a<span class=\\\"token punctuation\\\">,</span>b\\n c<span class=\\\"token punctuation\\\">,</span>d\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> ad <span class=\\\"token operator\\\">-</span> bc\\n<span class=\\\"token comment\\\">//(a,c)为单位向量i变换后xy坐标</span>\\n<span class=\\\"token comment\\\">//(b,d)为单位向量j变换后xy坐标</span>\\n<span class=\\\"token comment\\\">//当b与c都为0，变换后为矩形，面积为ad</span>\\n<span class=\\\"token comment\\\">//当b或c为0，变换后为平行四边形，面积也为ad</span>\\n<span class=\\\"token comment\\\">//当b与c都不为0时，得回到定义计算来解释：</span>\\n<span class=\\\"token comment\\\">//(a+b)(c+d)-ac-bd-2bc=ad-bc</span>\\n<span class=\\\"token comment\\\">//其实就是有坐标矩形减出变换后平行四边形面积，最后得到ad-bc</span></code></pre>\\n      </div>\\n<h4>逆变换</h4>\\n<p>即经过变换和逆变换后回到原始状态</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">A<span class=\\\"token operator\\\">*</span>A<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>在解线性方程组时：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//det(A)!=0</span>\\nA<span class=\\\"token operator\\\">*</span>x <span class=\\\"token operator\\\">=</span> v\\nA<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span>A<span class=\\\"token operator\\\">*</span>x <span class=\\\"token operator\\\">=</span> A<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span>v\\nx <span class=\\\"token operator\\\">=</span> A<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span>v</code></pre>\\n      </div>\\n<h4>秩</h4>\\n<p>代表变换后列空间（列即代表基向量变换后的坐标）的维数。可知秩最大与列数相同。</p>\\n<h4>点积</h4>\\n<p>两个维数相同的向量的点积结果为相应坐标配对相乘再相加。</p>\\n<p>其几何意义为向量w在过零点和向量v直线上的投影，投影长度与向量v的长度相乘。（dot(v,w) = |v||w|cosθ)）</p>\\n<p>也可以以变换的观点理解，将其中一个向量转换为线性变换矩阵（x与y代表映射到一维数轴上后的单位向量i与j)，一维矩阵与向量相乘的数值运算与两个向量的点积是一致的。（对偶性：一个空间到数轴的线性变换，都能找到一个向量，称为这个变换的对偶向量）</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token function\\\">dot</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span><span class=\\\"token number\\\">4</span>\\n<span class=\\\"token comment\\\">//点积结果大于0，代表两个向量指向大致相同</span>\\n<span class=\\\"token comment\\\">//点积结果等于0，代表两个向量互相垂直</span>\\n<span class=\\\"token comment\\\">//点积结果大于0，代表两个向量指向相反</span></code></pre>\\n      </div>\\n<h4>叉积</h4>\\n<p> 向量w于v的叉积结果为垂直于这两个向量所在平面的向量u，u的长度为w于v所张成的平行四边形的面积（二维），方向遵循右手定则。提到面积自然想到上面的行列式，所以计算方法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//二维向量叉积（数值代表面积）</span>\\n<span class=\\\"token function\\\">cross</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">vec2</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">vec2</span><span class=\\\"token punctuation\\\">(</span>c<span class=\\\"token punctuation\\\">,</span>d<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">mat2</span><span class=\\\"token punctuation\\\">[</span>\\n    a<span class=\\\"token punctuation\\\">,</span>c\\n    b<span class=\\\"token punctuation\\\">,</span>d\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> ad <span class=\\\"token operator\\\">-</span> bc  <span class=\\\"token comment\\\">//方向垂直于（a,b）、（c,d）所在平面，遵循右手定则</span>\\n<span class=\\\"token comment\\\">//三维向量叉积（数值代表体积）</span>\\n<span class=\\\"token function\\\">cross</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">vec3</span><span class=\\\"token punctuation\\\">(</span>v1<span class=\\\"token punctuation\\\">,</span>v2<span class=\\\"token punctuation\\\">,</span>v3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">vec3</span><span class=\\\"token punctuation\\\">(</span>w1<span class=\\\"token punctuation\\\">,</span>w2<span class=\\\"token punctuation\\\">,</span>w3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    i<span class=\\\"token punctuation\\\">,</span>v1<span class=\\\"token punctuation\\\">,</span>w1\\n    j<span class=\\\"token punctuation\\\">,</span>v2<span class=\\\"token punctuation\\\">,</span>w2\\n    k<span class=\\\"token punctuation\\\">,</span>v3<span class=\\\"token punctuation\\\">,</span>w3\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">i</span><span class=\\\"token punctuation\\\">(</span>v2w3<span class=\\\"token operator\\\">-</span>v3w2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">+</span><span class=\\\"token function\\\">j</span><span class=\\\"token punctuation\\\">(</span>v3w1<span class=\\\"token operator\\\">-</span>v1w3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">+</span><span class=\\\"token function\\\">k</span><span class=\\\"token punctuation\\\">(</span>v1w2<span class=\\\"token operator\\\">-</span>v2w1<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h4>基变换</h4>\\n<p>通过矩阵变换(称为基变换矩阵 )完成两组不同基向量（i、j）的映射，逆矩阵则反向转换。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//A为基向量变换矩阵，M为变换矩阵</span>\\nA<span class=\\\"token operator\\\">^</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">*</span> M <span class=\\\"token operator\\\">*</span> A <span class=\\\"token comment\\\">//通常代表在另一坐标系中描述M变换</span></code></pre>\\n      </div>\\n<h4>特征向量与特征值</h4>\\n<p>特征向量及在线性变换之后任停留在它张成空间（直线）里的向量，特征值则为衡量特征向量在变换中拉伸或压缩比例的因子。比如三维空间的旋转，其特征向量及为旋转轴（特征值为1，不压缩拉伸）。行列式与特征向量的好处在于其与所选的坐标系无关，并不会改变它们最根本的值</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">A<span class=\\\"token operator\\\">*</span>v <span class=\\\"token operator\\\">=</span> λv <span class=\\\"token comment\\\">//矩阵变换等于特征值与向量相乘（降维情况）</span>\\nA<span class=\\\"token operator\\\">*</span>v<span class=\\\"token operator\\\">-</span>λΙv <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token comment\\\">//I为单位矩阵</span>\\n<span class=\\\"token punctuation\\\">(</span>A<span class=\\\"token operator\\\">-</span>λΙ<span class=\\\"token punctuation\\\">)</span>v <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token function\\\">det</span><span class=\\\"token punctuation\\\">(</span>A<span class=\\\"token operator\\\">-</span>λΙ<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span></code></pre>\\n      </div>\\n<h4>齐次坐标</h4>\\n<p>三维表示的点和向量可能会被搞混，齐次坐标可以解决这个问题，其对三维空间中的点和向量的表示都是四维的：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">vec4</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>a1<span class=\\\"token punctuation\\\">,</span>a2<span class=\\\"token punctuation\\\">,</span>a3<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//任意点</span>\\n<span class=\\\"token keyword\\\">vec4</span> w <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>b1<span class=\\\"token punctuation\\\">,</span>b2<span class=\\\"token punctuation\\\">,</span>b3<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//任意向量</span></code></pre>\\n      </div>\\n<p>所有的仿射变换（具有保持直线的特性）都可以借助其次坐标表示成矩阵相乘的形式。因为所有的仿射变换都可以用一致的形式来表示，所以在处理级联的情况，会比三维的表示方便得多。</p>\\n<h4>平移</h4>\\n<p>平移变换通过一个位移向量来移动点的位置</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">vec4</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">,</span>z<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//初始点  **写按行写，但是意思是列坐标描述点的坐标，左乘</span>\\n<span class=\\\"token keyword\\\">vec4</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>ax<span class=\\\"token punctuation\\\">,</span>ay<span class=\\\"token punctuation\\\">,</span>az<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//位移向量</span>\\n<span class=\\\"token keyword\\\">vec4</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>x1<span class=\\\"token punctuation\\\">,</span>y1<span class=\\\"token punctuation\\\">,</span>z1<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//位移终点</span>\\n\\nx1 <span class=\\\"token operator\\\">=</span> x <span class=\\\"token operator\\\">+</span> ax<span class=\\\"token punctuation\\\">;</span>\\ny1 <span class=\\\"token operator\\\">=</span> y <span class=\\\"token operator\\\">+</span> ay<span class=\\\"token punctuation\\\">;</span>\\nz1 <span class=\\\"token operator\\\">=</span> z <span class=\\\"token operator\\\">+</span> az<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//平移矩阵 T</span>\\np1 <span class=\\\"token operator\\\">=</span> T <span class=\\\"token operator\\\">*</span> p<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//（行*列）</span>\\n<span class=\\\"token comment\\\">//其中：</span>\\n<span class=\\\"token keyword\\\">mat4</span> T <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>ax<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>ay<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>az<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>   <span class=\\\"token comment\\\">//用于保持结果为齐次坐标形式</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4>缩放</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">p1 <span class=\\\"token operator\\\">=</span> S <span class=\\\"token operator\\\">*</span> p<span class=\\\"token punctuation\\\">;</span>\\n\\nx1 <span class=\\\"token operator\\\">=</span> x<span class=\\\"token operator\\\">*</span>bx<span class=\\\"token punctuation\\\">;</span>\\ny1 <span class=\\\"token operator\\\">=</span> y<span class=\\\"token operator\\\">*</span>by<span class=\\\"token punctuation\\\">;</span>\\nz1 <span class=\\\"token operator\\\">=</span> z<span class=\\\"token operator\\\">*</span>bz<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//其中</span>\\n<span class=\\\"token keyword\\\">mat4</span> S <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    bx<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>by<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>bz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4>旋转</h4>\\n<p>旋转会复杂一些，需要旋转点（不动点）、制定旋转轴方向的一个向量、旋转的角度。</p>\\n<p>可以参考：<a href=\\\"https://blog.csdn.net/csxiaoshui/article/details/65446125\\\">https://blog.csdn.net/csxiaoshui/article/details/65446125</a></p>\\n<p>由简单的条件下一步一步推导至通用的旋转矩阵</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//1.绕原点的二维旋转</span>\\n<span class=\\\"token comment\\\">//极坐标公式：</span>\\nx<span class=\\\"token operator\\\">=</span>rcosϕ\\ny<span class=\\\"token operator\\\">=</span>rsinϕ\\n<span class=\\\"token comment\\\">//三角函数正弦余弦公式：</span>\\nx′<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">rcos</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token operator\\\">+</span>ϕ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=</span>rcosθcosϕ−rsinθsinϕ\\ny′<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">rsin</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token operator\\\">+</span>ϕ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=</span>rsinθcosϕ<span class=\\\"token operator\\\">+</span>rcosθsinϕ\\n<span class=\\\"token comment\\\">//代入x、y</span>\\nx′<span class=\\\"token operator\\\">=</span>xcosθ−ysinθ  \\ny′<span class=\\\"token operator\\\">=</span>xsinθ<span class=\\\"token operator\\\">+</span>ycosθ  \\n<span class=\\\"token comment\\\">//矩阵表示</span>\\n<span class=\\\"token punctuation\\\">[</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> R <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">[</span>x′<span class=\\\"token punctuation\\\">,</span> y′<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">mat2</span> R <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    cosθ<span class=\\\"token punctuation\\\">,</span>−sinθ\\n    sinθ<span class=\\\"token punctuation\\\">,</span>cosθ\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//2.绕任意点的二维旋转</span>\\n<span class=\\\"token comment\\\">//级联上两次位移矩阵即可（旋转点位移至原点 => 绕原点旋转 => 旋转点移回原位）</span>\\nv’<span class=\\\"token operator\\\">=</span><span class=\\\"token function\\\">T</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">*</span>R<span class=\\\"token operator\\\">*</span><span class=\\\"token function\\\">T</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span>x<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//引入三维齐次坐标</span>\\n<span class=\\\"token keyword\\\">mat3</span> M <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>tx<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>ty<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">[</span>\\n    cosθ<span class=\\\"token punctuation\\\">,</span>−sinθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    sinθ<span class=\\\"token punctuation\\\">,</span>cosθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>tx<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>ty<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    cosθ<span class=\\\"token punctuation\\\">,</span>−sinθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span>−cosθ<span class=\\\"token punctuation\\\">)</span>tx<span class=\\\"token operator\\\">+</span>ty∗sinθ<span class=\\\"token punctuation\\\">,</span>\\n    sinθ<span class=\\\"token punctuation\\\">,</span>cosθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span>−cosθ<span class=\\\"token punctuation\\\">)</span>ty−tx∗sinθ<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//3.三维基本旋转</span>\\n<span class=\\\"token comment\\\">//引入四维齐次坐标</span>\\n<span class=\\\"token comment\\\">//绕X轴的旋转：</span>\\nx′<span class=\\\"token operator\\\">=</span>x\\ny′<span class=\\\"token operator\\\">=</span>ycosθ−zsinθ\\nz′<span class=\\\"token operator\\\">=</span>ysinθ<span class=\\\"token operator\\\">+</span>zcosθ\\n<span class=\\\"token comment\\\">//矩阵表示</span>\\n<span class=\\\"token keyword\\\">mat4</span> Mx <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>cosθ<span class=\\\"token punctuation\\\">,</span>−sinθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>sinθ<span class=\\\"token punctuation\\\">,</span>cosθ<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//同理可求得绕Y轴旋转的矩阵My，绕Z轴旋转的矩阵Mz</span>\\n<span class=\\\"token comment\\\">//任何旋转点在原点的旋转矩阵都可以表示成Mx、My、Mz三个旋转矩阵的级联</span>\\n<span class=\\\"token comment\\\">//可以将任意旋转轴旋转到与X/Y/Z某一轴重合，执行基本旋转，之后再执行反向旋转恢复旋转轴方向</span></code></pre>\\n      </div>\\n<h4>错切</h4>\\n<p>错切（shear）由角度θ来表征，比如x错切：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">x1 <span class=\\\"token operator\\\">=</span> x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token operator\\\">*</span><span class=\\\"token function\\\">cot</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ny1 <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">;</span>\\nz1 <span class=\\\"token operator\\\">=</span> z<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">//错切矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> Hx <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token function\\\">cot</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4>欧拉角</h4>\\n<p>欧拉角是通过制定三个与旋转轴相关的角度以表示任意方向的方法。zX顺规：</p>\\n<ul>\\n<li>\\n<p>物体绕全局的 z 轴旋转角 α</p>\\n</li>\\n<li>\\n<p>继续绕自己的 X 轴旋转角 β</p>\\n</li>\\n<li>\\n<p>最后绕自己的 Z 轴旋转角 γ</p>\\n</li>\\n</ul>\\n<p>万向节死锁（Gimbal Lock）：</p>\\n<p><a href=\\\"https://zh.wikipedia.org/wiki/%E7%92%B0%E6%9E%B6%E9%8E%96%E5%AE%9A\\\">https://zh.wikipedia.org/wiki/%E7%92%B0%E6%9E%B6%E9%8E%96%E5%AE%9A</a></p>\\n<p>角度为±90°的第二次旋转使得第一次和第三次旋转的旋转轴相同的现象（丧失了一个自由度），称作万向锁。</p>\\n<p><a href=\\\"https://www.youtube.com/watch?v=rsKy-4dbA04\\\">https://www.youtube.com/watch?v=rsKy-4dbA04</a></p>\\n<p><a href=\\\"https://www.matongxue.com/madocs/442.html\\\">https://www.matongxue.com/madocs/442.html</a></p>\\n<p>附：飞行器旋转的专业的术语</p>\\n<ul>\\n<li>\\n<p>偏航（Yaw），围绕机头上方轴旋转（左右摇头）</p>\\n</li>\\n<li>\\n<p>俯仰（Pitch），围绕机身右方轴旋转（上下点头）</p>\\n</li>\\n<li>\\n<p>桶滚（Roll），围绕机头前方轴旋转（左右摆头）</p>\\n</li>\\n</ul>\\n<h4>四元数</h4>\\n<p>对二维的情形，通常会使用复数来表示旋转的变换：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//欧拉公式（i^2 = -1）</span>\\ne<span class=\\\"token operator\\\">^</span>iθ <span class=\\\"token operator\\\">=</span> cosθ <span class=\\\"token operator\\\">+</span> isinθ\\n<span class=\\\"token comment\\\">//复数c的极坐标可以写成 (r^2 = a^2 + b^2)</span>\\nc <span class=\\\"token operator\\\">=</span> a <span class=\\\"token operator\\\">+</span> ib <span class=\\\"token operator\\\">=</span> re<span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">(</span>iθ<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//设旋转角度为φ</span>\\nc′ <span class=\\\"token operator\\\">=</span> re<span class=\\\"token operator\\\">^</span><span class=\\\"token function\\\">i</span><span class=\\\"token punctuation\\\">(</span>θ<span class=\\\"token operator\\\">+</span>φ<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token operator\\\">=</span> re<span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">(</span>iθ<span class=\\\"token punctuation\\\">)</span>e<span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">(</span>iφ<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//e^(iφ)即为复平面的一个旋转算子</span></code></pre>\\n      </div>\\n<p>对于三维的情况，确定一个以原点为旋转点（不是的话可以级联位移矩阵）的三维旋转，需要指定一个旋转方向（向量）和旋转角度（标量），使用一种即包含向量又包含标量的表示，称为四元数形式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">vec4</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>q0<span class=\\\"token punctuation\\\">,</span>q1<span class=\\\"token punctuation\\\">,</span>q2<span class=\\\"token punctuation\\\">,</span>q3<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>q0<span class=\\\"token punctuation\\\">,</span> q<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//q为三维向量</span></code></pre>\\n      </div>\\n<p>具体介绍可参考：</p>\\n<p><a href=\\\"https://www.zhihu.com/question/23005815/answer/33971127\\\">https://www.zhihu.com/question/23005815/answer/33971127</a></p>\\n<p><a href=\\\"https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B8\\\">https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%85%83%E6%95%B8</a></p>\\n<h4>色值换算</h4>\\n<p><strong>HEX &#x3C;=> RGB</strong></p>\\n<p>Hex转RGB其实就是十六进制与十进制之间的转换，核心为 <code class=\\\"language-text\\\">parseInt(&quot;FF&quot;, 16)</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> r <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">/^#?([a-f\\\\d]{2})([a-f\\\\d]{2})([a-f\\\\d]{2})$/i</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span>hex<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>r <span class=\\\"token operator\\\">=</span> r <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">255</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>g <span class=\\\"token operator\\\">=</span> r <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">255</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>b <span class=\\\"token operator\\\">=</span> r <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">255</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>RGB转Hex即十进制转十六进制，核心为<code class=\\\"language-text\\\">Number(255).toString(16);</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">let</span> hex <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>rgbArr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">16</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><strong>RGB &#x3C;=> HSL/HSV</strong></p>\\n<p>H指Hue(色调)。 0(或360)表示红色，120表示绿色，240表示蓝色，当然可取其他数值来确定其它颜色；<br>\\nS指Saturation(饱和度)。 取值为0%到100%之间的值；<br>\\nL指Lightness(亮度)。 取值为0%到100%之间的值；</p>\\n<p>参考换算公式：<a href=\\\"https://en.wikipedia.org/wiki/HSL_and_HSV\\\">https://en.wikipedia.org/wiki/HSL<em>and</em>HSV</a></p>\\n<p><strong>CSS颜色关键字</strong></p>\\n<p>至于CSS颜色关键字的转换，可以像Three.js直接粗暴的罗列其与Hex格式的对应关系：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> ColorKeywords <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">'aliceblue'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0xF0F8FF</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'antiquewhite'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0xFAEBD7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'aqua'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0x00FFFF</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'aquamarine'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0x7FFFD4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'azure'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0xF0FFFF</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>或者借助DOM特性读取色值：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> div <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\ndiv<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>backgroundColor <span class=\\\"token operator\\\">=</span> color<span class=\\\"token punctuation\\\">;</span>\\n\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> c <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComputedStyle</span><span class=\\\"token punctuation\\\">(</span>createDiv<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>backgroundColor<span class=\\\"token punctuation\\\">;</span>    \\n\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChild</span><span class=\\\"token punctuation\\\">(</span>div<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>之后再对读取出的字符串进行格式转化。</p>\\n<h3>模块划分</h3>\\n<p>Math模块基于 <a href=\\\"https://github.com/toji/gl-matrix\\\">gl-Matrix</a> (column-major format)进行封装，对外暴露向量（Vec2、Vec3、Vec4）、矩阵（Mat3、Mat4）、欧拉角（Euler）、四元数（Quat）的一些基本运算方法。</p>\\n<p>没啥好说的，具体到每个方法的计算方法可以直接查看文档。</p>\\n<h2>Core</h2>\\n<hr>\\n<p>Core模块依赖Math模块，对WebGL API进行了封装和抽象。</p>\\n<p>对外暴露的API与Three.js有一些类似的地方，最大的区别在于Core部分不提供默认和可选的材质，即完全分离开了Shader部分。</p>\\n<p>这样做的好处显而易见，Core只用专注于控制物体的渲染队列即可，而不用耦合进各式各样的Shader片段。弊端也同样显而易见，需要自己为每个场景编写全部Shader，使用成本无疑高了很多。</p>\\n<h4>Transform</h4>\\n<p>Thansform相当于Three.js中的Object3D，是在场景中具体显示物体的基类，包含了基本的比如位置(Position)旋转(Rotate)缩放(Scale)等信息，提供了父子(Child/Parent)关系的抽象。</p>\\n<p>渲染框架基本都会提供父子对象的抽象，这样的好处是啥呢？</p>\\n<p>要到Renderer的遍历才够详细</p>\\n<h4>Camera</h4>\\n<p>确定相机的定位的计算需要得到VRP（Voew-Reference Point，观察参考点）、VPN（View-Plane Normal，观察平面法向量）、VUP（View-Up Vector，观察正向向量）三个值。</p>\\n<p><strong>LookAt</strong></p>\\n<p>相机的位置称为视点（eye point），相机的方向指向一个点称为参考点（at point），这两个点确定了VPN和VRP。VRP自然就是视点，VPN则是视点和参考点相减再归一化即可得到。最后我们只需要再对照相机指定想要观察的正向（VUP）就OK了，所以lookAt函数一般暴露的API为：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"> <span class=\\\"token comment\\\">/**\\n  * @function\\n\\n  * @description  Generates a matrix that makes something look at something else.\\n\\n  * @param {vec3} eye Position of the viewer\\n\\n  * @param {vec3} target Point the viewer is looking at\\n\\n  * @param {vec3} up vec3 pointing up\\n\\n  * @returns {Mat4} \\n\\n*/</span>\\n<span class=\\\"token function\\\">lookAt</span><span class=\\\"token punctuation\\\">(</span>eye<span class=\\\"token punctuation\\\">,</span> target<span class=\\\"token punctuation\\\">,</span> up<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n   <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>具体是如何计算的呢？</p>\\n<p>首先明确Camera矩阵（View矩阵）的作用，是将世界坐标系中的物体的顶点坐标转换到摄像机坐标系。</p>\\n<p>转换步骤：</p>\\n<ul>\\n<li>\\n<p>整体平移，将相机视点平移至世界坐标系原点</p>\\n</li>\\n<li>\\n<p>将参考点从世界坐标系转换至相机坐标系</p>\\n</li>\\n</ul>\\n<p>即：<code class=\\\"language-text\\\">ViewMatrix = R * T</code></p>\\n<p>1.首先求UVW：</p>\\n<p>首先W即为视线方向，normalize(target-eye)即可</p>\\n<p>V则可以通过叉乘up和W得到</p>\\n<p>U自然就是叉乘W和V即可</p>\\n<p>就可以求得坐标系矩阵：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token keyword\\\">mat4</span> R <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    ux<span class=\\\"token punctuation\\\">,</span>uy<span class=\\\"token punctuation\\\">,</span>uz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    vx<span class=\\\"token punctuation\\\">,</span>vy<span class=\\\"token punctuation\\\">,</span>vz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    wx<span class=\\\"token punctuation\\\">,</span>wy<span class=\\\"token punctuation\\\">,</span>wz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//由eye可得平移矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> T<span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>eyeX<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>eyeY<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span>eyeZ<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//最后的结果：</span>\\n<span class=\\\"token keyword\\\">mat4</span> viewMatrix <span class=\\\"token operator\\\">=</span> R <span class=\\\"token operator\\\">*</span> T <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    ux<span class=\\\"token punctuation\\\">,</span>uy<span class=\\\"token punctuation\\\">,</span>uz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>u0 <span class=\\\"token operator\\\">*</span> eyex <span class=\\\"token operator\\\">+</span> u1 <span class=\\\"token operator\\\">*</span> eyey <span class=\\\"token operator\\\">+</span> u2 <span class=\\\"token operator\\\">*</span> eyez<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    vx<span class=\\\"token punctuation\\\">,</span>vy<span class=\\\"token punctuation\\\">,</span>vz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>v0 <span class=\\\"token operator\\\">*</span> eyex <span class=\\\"token operator\\\">+</span> v1 <span class=\\\"token operator\\\">*</span> eyey <span class=\\\"token operator\\\">+</span> v2 <span class=\\\"token operator\\\">*</span> eyez<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    wx<span class=\\\"token punctuation\\\">,</span>wy<span class=\\\"token punctuation\\\">,</span>wz<span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>w0 <span class=\\\"token operator\\\">*</span> eyex <span class=\\\"token operator\\\">+</span> w1 <span class=\\\"token operator\\\">*</span> eyey <span class=\\\"token operator\\\">+</span> w2 <span class=\\\"token operator\\\">*</span> eyez<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p><strong>正交(orthographic)投影</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">/**\\n * Generates a orthogonal projection matrix with the given bounds\\n * @private\\n * @param {mat4} out mat4 frustum matrix will be written into\\n * @param {number} left Left bound of the frustum\\n * @param {number} right Right bound of the frustum\\n * @param {number} bottom Bottom bound of the frustum\\n * @param {number} top Top bound of the frustum\\n * @param {number} near Near bound of the frustum\\n * @param {number} far Far bound of the frustum\\n * @returns {mat4} out\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">ortho</span><span class=\\\"token punctuation\\\">(</span>out<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">,</span> bottom<span class=\\\"token punctuation\\\">,</span> top<span class=\\\"token punctuation\\\">,</span> near<span class=\\\"token punctuation\\\">,</span> far<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>在WebGL中，默认的投影变换矩阵是单位矩阵（视见体是规范的立方体）。显然，为了得到一般的正交投影变换矩阵，我们只需找到将暴露出去ortho函数所指定的长方体映射成这个立方体的变换矩阵即可。</p>\\n<p>实施步骤：</p>\\n<ul>\\n<li>\\n<p>通过平移把指定视见体的中心移动到规范视见体的中心（原点）</p>\\n</li>\\n<li>\\n<p>缩放指定视见体使得每条边的长度都为2（+1 - -1）</p>\\n</li>\\n</ul>\\n<p>前面说的位移矩阵还有缩放矩阵就派上用场啦：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\"><span class=\\\"token comment\\\">//位移矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> T <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">+</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//缩放矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> S <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token operator\\\">-</span>f<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//正交变换矩阵即为：</span>\\n<span class=\\\"token keyword\\\">mat4</span> N <span class=\\\"token operator\\\">=</span> S <span class=\\\"token operator\\\">*</span> T <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">+</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//如果视见体是对称的(r = -l, t = -b)，还可以进一步简化矩阵</span>\\n<span class=\\\"token keyword\\\">mat4</span> N <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n <span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">/</span>r<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">/</span>t<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p><strong>透视(perspective)投影</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">/**\\n * Generates a perspective projection matrix with the given bounds\\n * @private\\n * @param {mat4} out mat4 frustum matrix will be written into\\n * @param {number} fovy Vertical field of view in radians\\n * @param {number} aspect Aspect ratio. typically viewport width/height\\n * @param {number} near Near bound of the frustum\\n * @param {number} far Far bound of the frustum\\n * @returns {mat4} out\\n */</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">perspective</span><span class=\\\"token punctuation\\\">(</span>out<span class=\\\"token punctuation\\\">,</span> fovy<span class=\\\"token punctuation\\\">,</span> aspect<span class=\\\"token punctuation\\\">,</span> near<span class=\\\"token punctuation\\\">,</span> far<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>同样的思路，为了得到WebGL中(frustum)可以使用的透视投影变换矩阵，我们先将指定的棱台视见体变换为规范视见体：</p>\\n<ul>\\n<li>\\n<p>通过错切变换矩阵H</p>\\n</li>\\n<li>\\n<p>缩放变换矩阵S</p>\\n</li>\\n<li>\\n<p>投影规范化矩阵N</p>\\n</li>\\n</ul>\\n<p>通过错切变换矩阵H的目的是将不对称的棱台转化为对称的棱台：</p>\\n<p><code class=\\\"language-text\\\">H = H(arccot((l+r)/-2*near,arccot((t+b)/-2*near))</code></p>\\n<p>缩放矩阵：</p>\\n<p><code class=\\\"language-text\\\">S = S(-2*near/(r-l), -2*near/(t-b), 1)</code></p>\\n<p>投影规范化矩阵:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\">N <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>三者级联即可得到最后的投影变换矩阵</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-glsl\\\"><code class=\\\"language-glsl\\\">P <span class=\\\"token operator\\\">=</span> N<span class=\\\"token operator\\\">*</span>S<span class=\\\"token operator\\\">*</span>H <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span>n<span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">+</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token operator\\\">-</span>l<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">2</span>n<span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">+</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token operator\\\">-</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2f</span>n<span class=\\\"token operator\\\">/</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token comment\\\">//如果视见体是对称的(r = -l, t = -b)，还可以进一步简化矩阵</span>\\nP <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n n<span class=\\\"token operator\\\">/</span>r<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>n<span class=\\\"token operator\\\">/</span>t<span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">+</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">/</span><span class=\\\"token punctuation\\\">(</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2f</span>n<span class=\\\"token operator\\\">/</span>f<span class=\\\"token operator\\\">-</span>n<span class=\\\"token punctuation\\\">,</span>\\n <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>推导过程还可参考：</p>\\n<p><a href=\\\"http://www.360doc.com/content/14/1028/10/19175681_420522154.shtml\\\">http://www.360doc.com/content/14/1028/10/19175681_420522154.shtml</a></p>\\n<p>待补部分介绍：</p>\\n<ul>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Renderer: 渲染队列</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Program：WebGL API 封装简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Geometry： 几何数据读取抽象封装简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Texture：材质相关API即技术简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Mesh： 抽象简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> RenderTarget： 几个Buffer的原理和作用</p>\\n</li>\\n</ul>\\n<h2>Extras</h2>\\n<hr>\\n<ul>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Orbit；轨道计算的数学原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Plane：面几何体的顶点计算原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Cube：立方体的顶点计算原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Sphere： 球体的顶点计算原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Torus： 圆环几何体的顶点计算原理</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Text：渲染字体的方法（位图及高采样啥的）</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> Post：后期处理的概念及封装简介</p>\\n</li>\\n<li class=\\\"task-list-item\\\">\\n<p><input type=\\\"checkbox\\\" disabled> glTF：数据格式及Parser（单拆一篇文章）</p>\\n</li>\\n</ul>\",\"fields\":{\"slug\":\"/lgl/\",\"prefix\":\"2019-03-04\"},\"frontmatter\":{\"title\":\"LGL\",\"author\":\"todaylg\",\"category\":\"LGL\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/LG-Blog-Gatsby/static/bg-882eac91561e1177e9972d23bf662f9b-160fa.png\"}}}}},\"authornote\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>todaylg</strong> </p>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/lgl/\",\"prev\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2018-08-31--miku-setup/index.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"/miku-setup/\",\"prefix\":\"2018-08-31\"},\"frontmatter\":{\"title\":\"MikuMikuMi\",\"category\":\"废话集\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/lgl.json\n// module id = 412\n// module chunks = 78004447637982"],"sourceRoot":""}