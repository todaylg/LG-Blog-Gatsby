{"version":3,"sources":["webpack:///path---problem-set-fa920d4c826c4ed531f8.js","webpack:///./.cache/json/problem-set.json"],"names":["webpackJsonp","404","module","exports","data","post","id","html","fields","slug","prefix","frontmatter","title","author","category","cover","childImageSharp","resize","src","authornote","site","siteMetadata","facebook","appId","pathContext","prev","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,2HAAAC,KAAA,khoBAAwlmBC,QAA2yDC,KAAA,gBAAAC,OAAA,cAA6CC,aAAgBC,MAAA,uBAAAC,OAAA,UAAAC,SAAA,KAAAC,OAA2EC,iBAAmBC,QAAUC,IAAA,+EAAoFC,YAAeb,GAAA,oGAAAC,KAAA,oCAAmJa,MAASC,cAAgBC,UAAYC,MAAA,OAAcC,aAAgBf,KAAA,gBAAAgB,MAA+BnB,GAAA,uIAAAE,QAAsJC,KAAA,4BAAAC,OAAA,cAAyDC,aAAgBC,MAAA,wBAAAE,SAAA,OAAiDY,MAASpB,GAAA,0HAAAE,QAAyIC,KAAA,eAAAC,OAAA,cAA4CC,aAAgBC,MAAA,aAAAE,SAAA","file":"path---problem-set-fa920d4c826c4ed531f8.js","sourcesContent":["webpackJsonp([229805551833682],{\n\n/***/ 404:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2018-07-07--problem-set/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Vue工程结构目录及注意事项</h2>\\n<h4>Vue Document</h4>\\n<p>好的基础开发结构可以大大便于之后的维护于拓展。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">.\\n├── assets                            // 公共资源\\n│   ├── api                            // 公共API\\n│   ├── lib                            // 公共第三方库\\n├── components                        // 公共组件\\n├── pages                            // 页面集\\n│   ├── page                        // 具体页面\\n│   │   ├── common                    // 页面公共资源\\n│   │   ├── components                // 组件（不含业务代码）\\n│   │   ├── containers                // 根据业务代码对组件进行整合形成的容器,\\n                                    // 包含自身的数据管理\\n│   │   ├── store                    // 数据模块化分散至容器\\n│   │   ├── router                    // 路由分配\\n├── app.vue/js/html                    // 入口</code></pre>\\n      </div>\\n<p>因为之前使用Vue都是赶时间所以Store没有进行过模块化，组件拆得也不够细（业务和纯组件能解构还是要解耦滴），通常components直接替代掉了containers这一层，有时间讲道理还是要解耦的。</p>\\n<h4>注意事项</h4>\\n<h4>自定义指令及过滤器</h4>\\n<p>自定义指令着实是没有用到过，Vue.directive了解一下。</p>\\n<p>过滤器是自个给忘了，Vue.filter复习一下。</p>\\n<h2>VIM基本操作备忘</h2>\\n<p>自己用的场景还是偏少，所以命令根本记不住。。。备忘把常用的简单指令记一下。</p>\\n<h4>基本移动</h4>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">h</th>\\n<th align=\\\"left\\\">j</th>\\n<th align=\\\"left\\\">k</th>\\n<th align=\\\"left\\\">l</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\">⬅️</td>\\n<td align=\\\"left\\\">⬇️</td>\\n<td align=\\\"left\\\">⬆️</td>\\n<td align=\\\"left\\\">➡️</td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">H</th>\\n<th align=\\\"center\\\">本屏首行</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"center\\\"><strong>L</strong></td>\\n<td align=\\\"center\\\"><strong>本屏末行</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\"><strong>o</strong></th>\\n<th align=\\\"center\\\"><strong>这一行的最前处</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"center\\\"><strong>$</strong></td>\\n<td align=\\\"center\\\"><strong>这一行的最末尾</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>G</strong></th>\\n<th align=\\\"left\\\"><strong>移动到整个文档最后一行</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>gg</strong></td>\\n<td align=\\\"left\\\"><strong>移动到整个文档首行，相当于1g</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>n+Enter</strong></td>\\n<td align=\\\"left\\\"><strong>向下移动n行</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>nG</strong></td>\\n<td align=\\\"left\\\"><strong>跳转到第n行</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h4>搜索替换</h4>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>/word</strong></th>\\n<th align=\\\"left\\\"><strong>在文档中向下搜索’word’</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>?word</strong></td>\\n<td align=\\\"left\\\"><strong>在文档中向上搜索’word’</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>n/N</strong></td>\\n<td align=\\\"left\\\"><strong>按下Enter搜索完后显示下/上一个匹配项</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>:1,$s /word1/word2/g</strong></td>\\n<td align=\\\"left\\\"><strong>全文替换</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h4>删除</h4>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>x/X</strong></th>\\n<th align=\\\"left\\\"><strong>向前/后删除一个字符</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>dd</strong></td>\\n<td align=\\\"left\\\"><strong>删除整行（ndd）</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>yy</strong></td>\\n<td align=\\\"left\\\"><strong>复制整行（nyy）</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>p/P</strong></td>\\n<td align=\\\"left\\\"><strong>粘贴在光标上/下一行处</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h4>撤销</h4>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>u</strong></th>\\n<th align=\\\"left\\\"><strong>复原上一个动作</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>ctrl+r</strong></td>\\n<td align=\\\"left\\\"><strong>重做上一个动作</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h4>模式</h4>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>:w</strong></th>\\n<th align=\\\"left\\\"><strong>保存</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>:w!</strong></td>\\n<td align=\\\"left\\\"><strong>强存（权限问题）</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>:q</strong></td>\\n<td align=\\\"left\\\"><strong>退出</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>:q!</strong></td>\\n<td align=\\\"left\\\"><strong>强退（不保存）</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>:wq</strong></td>\\n<td align=\\\"left\\\"><strong>保存完走</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h2>Sass基础</h2>\\n<p>Sass也好Less也好，总还是要学习一个的，虽然自己平时整的小东西可能还是直接用CSS还更简单，但是要是项目大了以及要考虑便于维护的情况下，那还是得用这两的啦。</p>\\n<h4>变量</h4>\\n<p>Sass用‘$’符来标识变量（‘$’向来是兵家必争之地啊2333），Sass中的变量值可以是任何CSS中的标准属性值（什么#FFF、solid、100px等等），值与变量名之间用’:‘冒号分隔，作用域则类似使用let声明(块之外定义即相当于全局变量) ,变量也可以引用其他变量,且变量可以和CSS的属性名或选择器名称相同，变量名相同后者覆盖前者，可以使用尾缀!default设定默认值，使用!important在局部声明全局变量 ：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">testColor</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;    //全局\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n    $<span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span>    //局部\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> $width<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $testColor<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//即相当于：\\n\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4>嵌套</h4>\\n<p>这个比较实用啊：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">testColor</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;    \\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">p</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>$testColor<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $testColor<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//即相当于：\\n\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.test p</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>当然还支持嵌套嵌嵌套，嵌套的同级还可以写当级的普通CSS样式，非常好使。但是有些情况这招就不好使了：比如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">testColor</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;    \\n.test a</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">:hover</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> green<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $testColor<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这时候是希望在.test后的a链接添上hover伪类，但是这么写就变成了a标签之后的所有子元素填上伪类了。要是普通的css我们这时候其实只要写：.test a:hover就完事了，但是这样就还得重复的多写一遍.test a{…}，所以这时候就得用&#x26;符号了，这个符号表示父选择器（虽然叫父级选择器，但是其实就是代表当前层级的选择器）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">test</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;\\n.test a</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>$test<span class=\\\"token selector\\\">;\\n  &amp;:hover</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n//就相当于\\n$<span class=\\\"token property\\\">test</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;\\n.test a</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>$test<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.test a:hover</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>但是&#x26; 必须出现在的选择器的开头位置（作为选择器的第一个字符），可以跟随后缀（因为编译时遇到&#x26;会直接替换）。</p>\\n<p>嵌套特性还可以结合群组选择器(子级选择器和同级选择器也是一样的)减少重复的代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\"><span class=\\\"token selector\\\">.test #p1,.test #p2,.test #p3</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//就可以这么写：\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token selector\\\">#p1,#p2,#p3</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token selector\\\">对于CSS的属性也可以缩写从而减少代码量：\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">border: 1px solid #ccc</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">left</span><span class=\\\"token punctuation\\\">:</span> 0px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">right</span><span class=\\\"token punctuation\\\">:</span> 0px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//相当于：\\n\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 1px solid #ccc<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-left</span><span class=\\\"token punctuation\\\">:</span> 0px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-right</span><span class=\\\"token punctuation\\\">:</span> 0px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4>@import</h4>\\n<p>这个@import之前我都没见到用到过。。。可以在执行到@import时导入其他的CSS，Sass进行了优化，在编译的时候就把需要导入的文件导入打包，并且可以省略尾缀来导入，但是导入后不会全局有效（.css=>.scss）。</p>\\n<h4>注释</h4>\\n<p>Sass支持CSS标准的/<em>…</em>/注释和//，但是默认情况下后者在打包的时候不会出现在生成的CSS文件中。</p>\\n<h4>混合器</h4>\\n<p>混合器使用@mixin标识符定义，通过@include来使用，便于处理重复的统一样式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">test</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@mixin</span> test</span><span class=\\\"token punctuation\\\">{</span>    //名称\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>$test<span class=\\\"token selector\\\">;\\n  &amp;:hover</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.test a</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@include</span> test<span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>混合器不仅可以包含普通属性，也可以包含CSS的各种选择器，结合&#x26;更是强的不行，是不是有种像函数的错觉？还没完，还可以传参！用@include调用的时候可以穿参数，这不就是function嘛- -：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\"><span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@mixin</span> <span class=\\\"token function\\\">link-colors</span><span class=\\\"token punctuation\\\">(</span>$normal, $hover, $visited<span class=\\\"token punctuation\\\">)</span></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $normal<span class=\\\"token selector\\\">;\\n  &amp;:hover</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $hover<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token selector\\\">&amp;:visited</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $visited<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">a</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@include</span> <span class=\\\"token function\\\">link-colors</span><span class=\\\"token punctuation\\\">(</span>blue, red, green<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">//或者指定传参数值：\\na</span> <span class=\\\"token punctuation\\\">{</span>\\n    @include <span class=\\\"token function\\\">link-colors</span><span class=\\\"token punctuation\\\">(</span>\\n      $<span class=\\\"token property\\\">normal</span><span class=\\\"token punctuation\\\">:</span> blue,\\n      $<span class=\\\"token property\\\">visited</span><span class=\\\"token punctuation\\\">:</span> green,\\n      $<span class=\\\"token property\\\">hover</span><span class=\\\"token punctuation\\\">:</span> red\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token selector\\\">//Sass最终生成的是：\\n\\na</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> blue<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">a:hover</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">a:visited</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> green<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//类似ES6，还可以在定义参数的时设定默认值\\n@mixin link-colors(\\n    $normal,\\n    $hover: $normal,//默认就为$normal的值\\n    $visited: $normal//这样即使只传一个参数也可以\\n  )</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $normal<span class=\\\"token selector\\\">;\\n  &amp;:hover</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $hover<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token selector\\\">&amp;:visited</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $visited<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4>选择器继承</h4>\\n<p>选择器继承即一个选择器可以继承另一个选择器下定义的所有样式。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\"><span class=\\\"token selector\\\">.error</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 1px red<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #fdd<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.seriousError</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@extend</span> .error<span class=\\\"token punctuation\\\">;</span></span>//继承\\n  <span class=\\\"token property\\\">border-width</span><span class=\\\"token punctuation\\\">:</span> 3px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//就相当于：\\n.seriousError</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 1px red<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #fdd<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-width</span><span class=\\\"token punctuation\\\">:</span> 3px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>挺好用的对吧，麻烦的还没说呢：@extend .error后任何和.error有关的组合选择器也会被.seriousErro以组合选择器的形式继承，也就是拖家带口的全和你扯上关系了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\"><span class=\\\"token selector\\\">.error a</span><span class=\\\"token punctuation\\\">{</span>  //也会应用到.seriousError a    \\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">h1.error</span> <span class=\\\"token punctuation\\\">{</span> //同样也会应用到hl.seriousError\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>所以这个继承可不能随便乱用，并且几乎所有的CSS规则都可以继承和被继承，且当继承一个复杂的选择器的时候继承的情况会乱七八糟。总的来讲，如果不出现在复杂的选择器里的话（情况会变复杂），选择器继承就相当于把样式表的任何一处.error都用.error .seriousError替换。\\n​</p>\\n<h2>其他问题集合</h2>\\n<h4>易忽视的测试点</h4>\\n<p>写了测试用例讲道理是要照用例完完全全过一遍对，但是老是会对一些细枝末节的地方有所忽略。</p>\\n<p>1.别再用”+”拼接字符串啦！</p>\\n<p>2.定时器与clear要成对出现！</p>\\n<p>3.容错undefined！</p>\\n<h4>CSS</h4>\\n<p>丢了CSS一段时间后突然拿起来用发现一下懵圈了。。。一些原来很基本的问题都忘完了。。把遇到的问题记一下，捡一捡吧。。</p>\\n<h5>层级问题</h5>\\n<iframe width=\\\"100%\\\" height=\\\"420\\\" src=\\\"https://code.h5jun.com/junor/3/edit?html,css,output\\\" allowpaymentrequest allowfullscreen=\\\"allowfullscreen\\\" frameborder=\\\"0\\\"></iframe>\\n<p>相关：<a href=\\\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\\\">层级</a>、<a href=\\\"https://www.zhangxinxu.com/wordpress/2011/08/css%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%BA%94%E4%B9%8Bz-index%E7%AF%87/\\\">z-index</a></p>\\n<h5>图片文字垂直居中</h5>\\n<iframe width=\\\"100%\\\" height=\\\"420\\\" src=\\\"https://code.h5jun.com/junor/1/edit?html,css,output\\\" allowpaymentrequest allowfullscreen=\\\"allowfullscreen\\\" frameborder=\\\"0\\\"></iframe>\\n<p>相关：<a href=\\\"https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\\\">这里</a></p>\\n<h5>多行文本与单行文本垂直居中</h5>\\n<iframe width=\\\"100%\\\" height=\\\"420\\\" src=\\\"https://code.h5jun.com/junor/2/edit?html,css,output\\\" allowpaymentrequest allowfullscreen=\\\"allowfullscreen\\\" frameborder=\\\"0\\\"></iframe>\\n<h3>神奇的JSONP</h3>\\n<p>遇见了一个较为特殊的场景：</p>\\n<p>在短时间内（几乎同时），连续发起两次jsonp跨域请求一个有CDN的后端接口（cache为true），几乎必现首次请求失败(走error回调)，后次请求成功（走success回调），神奇的是NetWork显示请求只发出了一次，看起来就像jsonp直接处决掉了首次请求。。。换为cache:false（加时间戳）后两次请求正常，单次请求也正常，换用CORS也正常。</p>\\n<p>也可能是JQ的坑，待有空了再做研究。因为感觉Jsonp应该是被时代所淘汰的东西，研究一项注定被淘汰的技术总是没啥动力，比如Flash。。。。</p>\\n<p>还有个webpack打包完以后window下的全局函数访问不了的问题- -也记一下</p>\",\"fields\":{\"slug\":\"/problem-set/\",\"prefix\":\"2018-07-07\"},\"frontmatter\":{\"title\":\"基础知识备忘（Vue、VIM、Sass）\",\"author\":\"todaylg\",\"category\":\"备忘\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/LG-Blog-Gatsby/static/test1-f997be43a185cc8941fd5981e34fb911-ada8c.jpg\"}}}}},\"authornote\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>todaylg</strong> </p>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/problem-set/\",\"prev\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2018-07-01--webVR-and-web-audio-api/index.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"/webVR-and-web-audio-api/\",\"prefix\":\"2018-07-01\"},\"frontmatter\":{\"title\":\"初探WebVR与Web Audio API\",\"category\":\"小结\"}},\"next\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2018-10-11--miku-setup/index.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"/miku-setup/\",\"prefix\":\"2018-10-11\"},\"frontmatter\":{\"title\":\"MikuMikuMi\",\"category\":\"废话集\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---problem-set-fa920d4c826c4ed531f8.js","module.exports = {\"data\":{\"post\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2018-07-07--problem-set/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Vue工程结构目录及注意事项</h2>\\n<h4>Vue Document</h4>\\n<p>好的基础开发结构可以大大便于之后的维护于拓展。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">.\\n├── assets                            // 公共资源\\n│   ├── api                            // 公共API\\n│   ├── lib                            // 公共第三方库\\n├── components                        // 公共组件\\n├── pages                            // 页面集\\n│   ├── page                        // 具体页面\\n│   │   ├── common                    // 页面公共资源\\n│   │   ├── components                // 组件（不含业务代码）\\n│   │   ├── containers                // 根据业务代码对组件进行整合形成的容器,\\n                                    // 包含自身的数据管理\\n│   │   ├── store                    // 数据模块化分散至容器\\n│   │   ├── router                    // 路由分配\\n├── app.vue/js/html                    // 入口</code></pre>\\n      </div>\\n<p>因为之前使用Vue都是赶时间所以Store没有进行过模块化，组件拆得也不够细（业务和纯组件能解构还是要解耦滴），通常components直接替代掉了containers这一层，有时间讲道理还是要解耦的。</p>\\n<h4>注意事项</h4>\\n<h4>自定义指令及过滤器</h4>\\n<p>自定义指令着实是没有用到过，Vue.directive了解一下。</p>\\n<p>过滤器是自个给忘了，Vue.filter复习一下。</p>\\n<h2>VIM基本操作备忘</h2>\\n<p>自己用的场景还是偏少，所以命令根本记不住。。。备忘把常用的简单指令记一下。</p>\\n<h4>基本移动</h4>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">h</th>\\n<th align=\\\"left\\\">j</th>\\n<th align=\\\"left\\\">k</th>\\n<th align=\\\"left\\\">l</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\">⬅️</td>\\n<td align=\\\"left\\\">⬇️</td>\\n<td align=\\\"left\\\">⬆️</td>\\n<td align=\\\"left\\\">➡️</td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">H</th>\\n<th align=\\\"center\\\">本屏首行</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"center\\\"><strong>L</strong></td>\\n<td align=\\\"center\\\"><strong>本屏末行</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\"><strong>o</strong></th>\\n<th align=\\\"center\\\"><strong>这一行的最前处</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"center\\\"><strong>$</strong></td>\\n<td align=\\\"center\\\"><strong>这一行的最末尾</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>G</strong></th>\\n<th align=\\\"left\\\"><strong>移动到整个文档最后一行</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>gg</strong></td>\\n<td align=\\\"left\\\"><strong>移动到整个文档首行，相当于1g</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>n+Enter</strong></td>\\n<td align=\\\"left\\\"><strong>向下移动n行</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>nG</strong></td>\\n<td align=\\\"left\\\"><strong>跳转到第n行</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h4>搜索替换</h4>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>/word</strong></th>\\n<th align=\\\"left\\\"><strong>在文档中向下搜索’word’</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>?word</strong></td>\\n<td align=\\\"left\\\"><strong>在文档中向上搜索’word’</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>n/N</strong></td>\\n<td align=\\\"left\\\"><strong>按下Enter搜索完后显示下/上一个匹配项</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>:1,$s /word1/word2/g</strong></td>\\n<td align=\\\"left\\\"><strong>全文替换</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h4>删除</h4>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>x/X</strong></th>\\n<th align=\\\"left\\\"><strong>向前/后删除一个字符</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>dd</strong></td>\\n<td align=\\\"left\\\"><strong>删除整行（ndd）</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>yy</strong></td>\\n<td align=\\\"left\\\"><strong>复制整行（nyy）</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>p/P</strong></td>\\n<td align=\\\"left\\\"><strong>粘贴在光标上/下一行处</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h4>撤销</h4>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>u</strong></th>\\n<th align=\\\"left\\\"><strong>复原上一个动作</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>ctrl+r</strong></td>\\n<td align=\\\"left\\\"><strong>重做上一个动作</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h4>模式</h4>\\n<hr>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>:w</strong></th>\\n<th align=\\\"left\\\"><strong>保存</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\"><strong>:w!</strong></td>\\n<td align=\\\"left\\\"><strong>强存（权限问题）</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>:q</strong></td>\\n<td align=\\\"left\\\"><strong>退出</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>:q!</strong></td>\\n<td align=\\\"left\\\"><strong>强退（不保存）</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>:wq</strong></td>\\n<td align=\\\"left\\\"><strong>保存完走</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<hr>\\n<h2>Sass基础</h2>\\n<p>Sass也好Less也好，总还是要学习一个的，虽然自己平时整的小东西可能还是直接用CSS还更简单，但是要是项目大了以及要考虑便于维护的情况下，那还是得用这两的啦。</p>\\n<h4>变量</h4>\\n<p>Sass用‘$’符来标识变量（‘$’向来是兵家必争之地啊2333），Sass中的变量值可以是任何CSS中的标准属性值（什么#FFF、solid、100px等等），值与变量名之间用’:‘冒号分隔，作用域则类似使用let声明(块之外定义即相当于全局变量) ,变量也可以引用其他变量,且变量可以和CSS的属性名或选择器名称相同，变量名相同后者覆盖前者，可以使用尾缀!default设定默认值，使用!important在局部声明全局变量 ：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">testColor</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;    //全局\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n    $<span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span>    //局部\\n    <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> $width<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $testColor<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//即相当于：\\n\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">width</span><span class=\\\"token punctuation\\\">:</span> 100px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4>嵌套</h4>\\n<p>这个比较实用啊：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">testColor</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;    \\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">p</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>$testColor<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $testColor<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//即相当于：\\n\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.test p</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>当然还支持嵌套嵌嵌套，嵌套的同级还可以写当级的普通CSS样式，非常好使。但是有些情况这招就不好使了：比如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">testColor</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;    \\n.test a</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">:hover</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> green<span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $testColor<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这时候是希望在.test后的a链接添上hover伪类，但是这么写就变成了a标签之后的所有子元素填上伪类了。要是普通的css我们这时候其实只要写：.test a:hover就完事了，但是这样就还得重复的多写一遍.test a{…}，所以这时候就得用&#x26;符号了，这个符号表示父选择器（虽然叫父级选择器，但是其实就是代表当前层级的选择器）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">test</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;\\n.test a</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>$test<span class=\\\"token selector\\\">;\\n  &amp;:hover</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n//就相当于\\n$<span class=\\\"token property\\\">test</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token selector\\\">;\\n.test a</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>$test<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.test a:hover</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>但是&#x26; 必须出现在的选择器的开头位置（作为选择器的第一个字符），可以跟随后缀（因为编译时遇到&#x26;会直接替换）。</p>\\n<p>嵌套特性还可以结合群组选择器(子级选择器和同级选择器也是一样的)减少重复的代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\"><span class=\\\"token selector\\\">.test #p1,.test #p2,.test #p3</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//就可以这么写：\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token selector\\\">#p1,#p2,#p3</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token selector\\\">对于CSS的属性也可以缩写从而减少代码量：\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">border: 1px solid #ccc</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">left</span><span class=\\\"token punctuation\\\">:</span> 0px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">right</span><span class=\\\"token punctuation\\\">:</span> 0px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//相当于：\\n\\n.test</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 1px solid #ccc<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-left</span><span class=\\\"token punctuation\\\">:</span> 0px<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-right</span><span class=\\\"token punctuation\\\">:</span> 0px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4>@import</h4>\\n<p>这个@import之前我都没见到用到过。。。可以在执行到@import时导入其他的CSS，Sass进行了优化，在编译的时候就把需要导入的文件导入打包，并且可以省略尾缀来导入，但是导入后不会全局有效（.css=>.scss）。</p>\\n<h4>注释</h4>\\n<p>Sass支持CSS标准的/<em>…</em>/注释和//，但是默认情况下后者在打包的时候不会出现在生成的CSS文件中。</p>\\n<h4>混合器</h4>\\n<p>混合器使用@mixin标识符定义，通过@include来使用，便于处理重复的统一样式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">$<span class=\\\"token property\\\">test</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@mixin</span> test</span><span class=\\\"token punctuation\\\">{</span>    //名称\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>$test<span class=\\\"token selector\\\">;\\n  &amp;:hover</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span>blue<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.test a</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@include</span> test<span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>混合器不仅可以包含普通属性，也可以包含CSS的各种选择器，结合&#x26;更是强的不行，是不是有种像函数的错觉？还没完，还可以传参！用@include调用的时候可以穿参数，这不就是function嘛- -：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\"><span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@mixin</span> <span class=\\\"token function\\\">link-colors</span><span class=\\\"token punctuation\\\">(</span>$normal, $hover, $visited<span class=\\\"token punctuation\\\">)</span></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $normal<span class=\\\"token selector\\\">;\\n  &amp;:hover</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $hover<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token selector\\\">&amp;:visited</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $visited<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">a</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@include</span> <span class=\\\"token function\\\">link-colors</span><span class=\\\"token punctuation\\\">(</span>blue, red, green<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">//或者指定传参数值：\\na</span> <span class=\\\"token punctuation\\\">{</span>\\n    @include <span class=\\\"token function\\\">link-colors</span><span class=\\\"token punctuation\\\">(</span>\\n      $<span class=\\\"token property\\\">normal</span><span class=\\\"token punctuation\\\">:</span> blue,\\n      $<span class=\\\"token property\\\">visited</span><span class=\\\"token punctuation\\\">:</span> green,\\n      $<span class=\\\"token property\\\">hover</span><span class=\\\"token punctuation\\\">:</span> red\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token selector\\\">//Sass最终生成的是：\\n\\na</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> blue<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">a:hover</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">a:visited</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> green<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//类似ES6，还可以在定义参数的时设定默认值\\n@mixin link-colors(\\n    $normal,\\n    $hover: $normal,//默认就为$normal的值\\n    $visited: $normal//这样即使只传一个参数也可以\\n  )</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $normal<span class=\\\"token selector\\\">;\\n  &amp;:hover</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $hover<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token selector\\\">&amp;:visited</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> $visited<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4>选择器继承</h4>\\n<p>选择器继承即一个选择器可以继承另一个选择器下定义的所有样式。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\"><span class=\\\"token selector\\\">.error</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 1px red<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #fdd<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">.seriousError</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token atrule\\\"><span class=\\\"token rule\\\">@extend</span> .error<span class=\\\"token punctuation\\\">;</span></span>//继承\\n  <span class=\\\"token property\\\">border-width</span><span class=\\\"token punctuation\\\">:</span> 3px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">//就相当于：\\n.seriousError</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">border</span><span class=\\\"token punctuation\\\">:</span> 1px red<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #fdd<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-width</span><span class=\\\"token punctuation\\\">:</span> 3px<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>挺好用的对吧，麻烦的还没说呢：@extend .error后任何和.error有关的组合选择器也会被.seriousErro以组合选择器的形式继承，也就是拖家带口的全和你扯上关系了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\"><span class=\\\"token selector\\\">.error a</span><span class=\\\"token punctuation\\\">{</span>  //也会应用到.seriousError a    \\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token selector\\\">h1.error</span> <span class=\\\"token punctuation\\\">{</span> //同样也会应用到hl.seriousError\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>所以这个继承可不能随便乱用，并且几乎所有的CSS规则都可以继承和被继承，且当继承一个复杂的选择器的时候继承的情况会乱七八糟。总的来讲，如果不出现在复杂的选择器里的话（情况会变复杂），选择器继承就相当于把样式表的任何一处.error都用.error .seriousError替换。\\n​</p>\\n<h2>其他问题集合</h2>\\n<h4>易忽视的测试点</h4>\\n<p>写了测试用例讲道理是要照用例完完全全过一遍对，但是老是会对一些细枝末节的地方有所忽略。</p>\\n<p>1.别再用”+”拼接字符串啦！</p>\\n<p>2.定时器与clear要成对出现！</p>\\n<p>3.容错undefined！</p>\\n<h4>CSS</h4>\\n<p>丢了CSS一段时间后突然拿起来用发现一下懵圈了。。。一些原来很基本的问题都忘完了。。把遇到的问题记一下，捡一捡吧。。</p>\\n<h5>层级问题</h5>\\n<iframe width=\\\"100%\\\" height=\\\"420\\\" src=\\\"https://code.h5jun.com/junor/3/edit?html,css,output\\\" allowpaymentrequest allowfullscreen=\\\"allowfullscreen\\\" frameborder=\\\"0\\\"></iframe>\\n<p>相关：<a href=\\\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\\\">层级</a>、<a href=\\\"https://www.zhangxinxu.com/wordpress/2011/08/css%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%BA%94%E4%B9%8Bz-index%E7%AF%87/\\\">z-index</a></p>\\n<h5>图片文字垂直居中</h5>\\n<iframe width=\\\"100%\\\" height=\\\"420\\\" src=\\\"https://code.h5jun.com/junor/1/edit?html,css,output\\\" allowpaymentrequest allowfullscreen=\\\"allowfullscreen\\\" frameborder=\\\"0\\\"></iframe>\\n<p>相关：<a href=\\\"https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\\\">这里</a></p>\\n<h5>多行文本与单行文本垂直居中</h5>\\n<iframe width=\\\"100%\\\" height=\\\"420\\\" src=\\\"https://code.h5jun.com/junor/2/edit?html,css,output\\\" allowpaymentrequest allowfullscreen=\\\"allowfullscreen\\\" frameborder=\\\"0\\\"></iframe>\\n<h3>神奇的JSONP</h3>\\n<p>遇见了一个较为特殊的场景：</p>\\n<p>在短时间内（几乎同时），连续发起两次jsonp跨域请求一个有CDN的后端接口（cache为true），几乎必现首次请求失败(走error回调)，后次请求成功（走success回调），神奇的是NetWork显示请求只发出了一次，看起来就像jsonp直接处决掉了首次请求。。。换为cache:false（加时间戳）后两次请求正常，单次请求也正常，换用CORS也正常。</p>\\n<p>也可能是JQ的坑，待有空了再做研究。因为感觉Jsonp应该是被时代所淘汰的东西，研究一项注定被淘汰的技术总是没啥动力，比如Flash。。。。</p>\\n<p>还有个webpack打包完以后window下的全局函数访问不了的问题- -也记一下</p>\",\"fields\":{\"slug\":\"/problem-set/\",\"prefix\":\"2018-07-07\"},\"frontmatter\":{\"title\":\"基础知识备忘（Vue、VIM、Sass）\",\"author\":\"todaylg\",\"category\":\"备忘\",\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/LG-Blog-Gatsby/static/test1-f997be43a185cc8941fd5981e34fb911-ada8c.jpg\"}}}}},\"authornote\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>todaylg</strong> </p>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"\"}}}},\"pathContext\":{\"slug\":\"/problem-set/\",\"prev\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2018-07-01--webVR-and-web-audio-api/index.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"/webVR-and-web-audio-api/\",\"prefix\":\"2018-07-01\"},\"frontmatter\":{\"title\":\"初探WebVR与Web Audio API\",\"category\":\"小结\"}},\"next\":{\"id\":\"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2018-10-11--miku-setup/index.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"/miku-setup/\",\"prefix\":\"2018-10-11\"},\"frontmatter\":{\"title\":\"MikuMikuMi\",\"category\":\"废话集\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/problem-set.json\n// module id = 404\n// module chunks = 229805551833682"],"sourceRoot":""}