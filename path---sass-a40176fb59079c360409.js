webpackJsonp([0xebe1fb6795f8],{417:function(n,s){n.exports={data:{post:{id:"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2017-08-11--sass/index.md absPath of file >>> MarkdownRemark",html:'<h2>Sass基础</h2>\n<p>Sass也好Less也好，总还是要学习一个的，虽然自己平时整的小东西可能还是直接用CSS还更简单，但是要是项目大了以及要考虑便于维护的情况下，那还是得用这两的啦。</p>\n<h3>变量</h3>\n<p>Sass用<code class="language-text">$</code>符来标识变量（‘$’向来是兵家必争之地啊2333），Sass中的变量值可以是任何CSS中的标准属性值（什么#FFF、solid、100px等等），值与变量名之间用’:‘冒号分隔，作用域则类似使用let声明(块之外定义即相当于全局变量) ,变量也可以引用其他变量,且变量可以和CSS的属性名或选择器名称相同，变量名相同后者覆盖前者，可以使用尾缀!default设定默认值，使用!important在局部声明全局变量 ：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$testColor</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token comment">//全局</span>\n<span class="token selector">.test </span><span class="token punctuation">{</span>\n    <span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token comment">//局部</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span><span class="token punctuation">;</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$testColor</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//即相当于：</span>\n\n<span class="token selector">.test </span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>嵌套</h3>\n<p>这个比较实用啊：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$testColor</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    \n<span class="token selector">.test </span><span class="token punctuation">{</span>\n  <span class="token selector">p </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token variable">$testColor</span><span class="token punctuation">}</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$testColor</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//即相当于：</span>\n\n<span class="token selector">.test </span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.test p</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>当然还支持嵌套嵌嵌套，嵌套的同级还可以写当级的普通CSS样式，非常好使。但是有些情况这招就不好使了：比如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$testColor</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    \n<span class="token selector">.test a</span><span class="token punctuation">{</span>\n  <span class="token selector">:hover </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">}</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$testColor</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>这时候是希望在.test后的a链接添上hover伪类，但是这么写就变成了a标签之后的所有子元素填上伪类了。要是普通的css我们这时候其实只要写：.test a:hover就完事了，但是这样就还得重复的多写一遍.test a{…}，所以这时候就得用&#x26;符号了，这个符号表示父选择器（虽然叫父级选择器，但是其实就是代表当前层级的选择器）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$test</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token selector">.test a</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span><span class="token variable">$test</span><span class="token punctuation">;</span>\n  <span class="token selector"><span class="token parent important">&amp;</span>:hover</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//就相当于</span>\n<span class="token property"><span class="token variable">$test</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token selector">.test a</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span><span class="token variable">$test</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.test a:hover</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>但是&#x26; 必须出现在的选择器的开头位置（作为选择器的第一个字符），可以跟随后缀（因为编译时遇到&#x26;会直接替换）。</p>\n<p>嵌套特性还可以结合群组选择器(子级选择器和同级选择器也是一样的)减少重复的代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token selector">.test #p1,.test #p2,.test #p3 </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span>\n\n<span class="token comment">//就可以这么写：</span>\n<span class="token selector">.test </span><span class="token punctuation">{</span>\n    <span class="token selector">#p1,#p2,#p3 </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n    <span class="token selector">对于CSS的属性也可以缩写从而减少代码量：\n.test </span><span class="token punctuation">{</span>\n  <span class="token selector">border: 1px solid #ccc </span><span class="token punctuation">{</span>\n  <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>\n  <span class="token property">right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//相当于：</span>\n\n<span class="token selector">.test </span><span class="token punctuation">{</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>\n  <span class="token property">border-left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>\n  <span class="token property">border-right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>@import</h3>\n<p>这个@import之前我都没见到用到过。。。可以在执行到@import时导入其他的CSS，Sass进行了优化，在编译的时候就把需要导入的文件导入打包，并且可以省略尾缀来导入，但是导入后不会全局有效（.css=>.scss）。</p>\n<h3>注释</h3>\n<p>Sass支持CSS标准的/<em>…</em>/注释和//，但是默认情况下后者在打包的时候不会出现在生成的CSS文件中。</p>\n<h3>混合器</h3>\n<p>混合器使用@mixin标识符定义，通过@include来使用，便于处理重复的统一样式：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$test</span></span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token keyword">@mixin</span> <span class="token selector">test</span><span class="token punctuation">{</span>    <span class="token comment">//名称</span>\n  <span class="token property">color</span><span class="token punctuation">:</span><span class="token variable">$test</span><span class="token punctuation">;</span>\n  <span class="token selector"><span class="token parent important">&amp;</span>:hover</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.test a</span><span class="token punctuation">{</span>\n  <span class="token keyword">@include</span> test<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>混合器不仅可以包含普通属性，也可以包含CSS的各种选择器，结合&#x26;更是强的不行，是不是有种像函数的错觉？还没完，还可以传参！用@include调用的时候可以穿参数，这不就是function嘛- -：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token function">link-colors</span><span class="token punctuation">(</span><span class="token variable">$normal</span>, <span class="token variable">$hover</span>, <span class="token variable">$visited</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$normal</span><span class="token punctuation">;</span>\n  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$hover</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token selector"><span class="token parent important">&amp;</span>:visited </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$visited</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">a </span><span class="token punctuation">{</span>\n  <span class="token keyword">@include</span> <span class="token function">link-colors</span><span class="token punctuation">(</span>blue, red, green<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//或者指定传参数值：</span>\n<span class="token selector">a </span><span class="token punctuation">{</span>\n    <span class="token keyword">@include</span> <span class="token function">link-colors</span><span class="token punctuation">(</span>\n      <span class="token property"><span class="token variable">$normal</span></span><span class="token punctuation">:</span> blue,\n      <span class="token property"><span class="token variable">$visited</span></span><span class="token punctuation">:</span> green,\n      <span class="token property"><span class="token variable">$hover</span></span><span class="token punctuation">:</span> red\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//Sass最终生成的是：</span>\n\n<span class="token selector">a </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector">a:hover </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token selector">a:visited </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">//类似ES6，还可以在定义参数的时设定默认值</span>\n<span class="token keyword">@mixin</span> <span class="token function">link-colors</span><span class="token punctuation">(</span>\n    <span class="token variable">$normal</span>,\n    <span class="token property"><span class="token variable">$hover</span></span><span class="token punctuation">:</span> <span class="token variable">$normal</span>,<span class="token comment">//默认就为$normal的值</span>\n    <span class="token property"><span class="token variable">$visited</span></span><span class="token punctuation">:</span> <span class="token variable">$normal</span><span class="token comment">//这样即使只传一个参数也可以</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$normal</span><span class="token punctuation">;</span>\n  <span class="token selector"><span class="token parent important">&amp;</span>:hover </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$hover</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token selector"><span class="token parent important">&amp;</span>:visited </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$visited</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>选择器继承</h3>\n<p>选择器继承即一个选择器可以继承另一个选择器下定义的所有样式。</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token selector">.error </span><span class="token punctuation">{</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> 1px red<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #fdd<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.seriousError </span><span class="token punctuation">{</span>\n  <span class="token keyword">@extend</span> .error<span class="token punctuation">;</span><span class="token comment">//继承</span>\n  <span class="token property">border-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//就相当于：</span>\n<span class="token selector">.seriousError </span><span class="token punctuation">{</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> 1px red<span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> #fdd<span class="token punctuation">;</span>\n  <span class="token property">border-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>挺好用的对吧，麻烦的还没说呢：@extend .error后任何和.error有关的组合选择器也会被.seriousErro以组合选择器的形式继承，也就是拖家带口的全和你扯上关系了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token selector">.error a</span><span class="token punctuation">{</span>  <span class="token comment">//也会应用到.seriousError a    </span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">h1.error </span><span class="token punctuation">{</span> <span class="token comment">//同样也会应用到hl.seriousError</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>所以这个继承可不能随便乱用，并且几乎所有的CSS规则都可以继承和被继承，且当继承一个复杂的选择器的时候继承的情况会乱七八糟。总的来讲，如果不出现在复杂的选择器里的话（情况会变复杂），选择器继承就相当于把样式表的任何一处.error都用.error .seriousError替换。</p>\n<h3>循环</h3>\n<p>比如可以省掉一个个资源import：</p>\n<div class="gatsby-highlight">\n      <pre class="language-scss"><code class="language-scss"><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> 0 <span class="token keyword">through</span> <span class="token selector">29 </span><span class="token punctuation">{</span>\n  <span class="token selector"><span class="token parent important">&amp;</span>.testIcon<span class="token variable">#{$i}</span> </span><span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span>~xxxx_<span class="token variable">#{$i}</span>.png<span class="token punctuation">)</span> no-repeat center<span class="token punctuation">;</span>\n    <span class="token property">background-size</span><span class="token punctuation">:</span> 100% auto<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>​</p>\n<h2>CSS常见问题集合</h2>\n<p>丢了CSS一段时间后突然拿起来用发现一下懵圈了。。。一些原来很基本的问题都忘完了。。把遇到的问题记一下，捡一捡吧。。</p>\n<h5>层级问题</h5>\n<iframe width="100%" height="420" src="https://code.h5jun.com/junor/3/edit?html,css,output" allowpaymentrequest allowfullscreen="allowfullscreen" frameborder="0"></iframe>\n<p>相关：<a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">层级</a>、<a href="https://www.zhangxinxu.com/wordpress/2011/08/css%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%BA%94%E4%B9%8Bz-index%E7%AF%87/">z-index</a></p>\n<h5>图片文字垂直居中</h5>\n<iframe width="100%" height="420" src="https://code.h5jun.com/junor/1/edit?html,css,output" allowpaymentrequest allowfullscreen="allowfullscreen" frameborder="0"></iframe>\n<p>相关：<a href="https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/">这里</a></p>\n<h5>多行文本与单行文本垂直居中</h5>\n<iframe width="100%" height="420" src="https://code.h5jun.com/junor/2/edit?html,css,output" allowpaymentrequest allowfullscreen="allowfullscreen" frameborder="0"></iframe>',fields:{slug:"/sass/",prefix:"2017-08-11"},frontmatter:{title:"Sass基础",author:"todaylg",category:"基础备忘",cover:{childImageSharp:{resize:{src:"/LG-Blog-Gatsby/static/bg-3b698becc063f67c561f255394c06560-ada8c.jpg"}}}}},authornote:{id:"/Users/lugang/My Github/LG-Blog-Gatsby/content/parts/author.md absPath of file >>> MarkdownRemark",html:"<p><strong>todaylg</strong> </p>"},site:{siteMetadata:{facebook:{appId:""}}}},pathContext:{slug:"/sass/",prev:{id:"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2017-08-05--flex/index.md absPath of file >>> MarkdownRemark",fields:{slug:"/flex/",prefix:"2017-08-05"},frontmatter:{title:"Flex布局基础",category:"基础备忘"}},next:{id:"/Users/lugang/My Github/LG-Blog-Gatsby/content/posts/2017-09-11--mac-fix/index.md absPath of file >>> MarkdownRemark",fields:{slug:"/mac-fix/",prefix:"2017-09-11"},frontmatter:{title:"Mac拯救小记",category:"闲谈"}}}}}});
//# sourceMappingURL=path---sass-a40176fb59079c360409.js.map