{"data":{"post":{"id":"2090088f-5900-5edf-9d1d-38566efc2037","html":"<p>Post Processing Effect指的是后期处理效果，这些效果的实现是基于已经渲染的场景之上的，即通过将场景以纹理形式渲染到一个覆盖全屏的四边形上，再对纹理图形进行处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 一个覆盖全屏的大三角形，保持屏幕内的UV坐标映射仍为0 => 1，画图即可知。此法性能优于使用四边形。</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>geometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Geometry</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\n    position<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    uv<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>RenderTarget/Post</h3>\n<p>在进行后处理之前我们需要将场景先渲染到<a href=\"https://learnopengl-cn.github.io/04%20Advanced%20OpenGL/05%20Framebuffers/\">帧缓冲(FrameBuffer)</a>上，RenderTarget就是对创建完整的Framebuffer进行的封装：</p>\n<ul>\n<li>\n<p>创建及绑定Framebuffer</p>\n</li>\n<li>\n<p>创建附件（Texture/Renderbuffer Object）并附加缓冲（Color/Depth/Stencil）</p>\n</li>\n</ul>\n<p>而Post则是对场景需要添加多个后处理效果的情况进行管理：</p>\n<ul>\n<li>\n<p>根据各个处理效果的Shader实例化相应Mesh实体</p>\n</li>\n<li>\n<p>Ping-Pong Pass渲染队列（上一处理效果的输出为下一处理效果的输入）</p>\n</li>\n</ul>\n<h3>Post Processing Effect</h3>\n<p>常见的后处理效果包括：</p>\n<ul>\n<li>\n<p>Gaussian Blur</p>\n</li>\n<li>\n<p>FXAA</p>\n</li>\n<li>\n<p>Glitch</p>\n</li>\n<li>\n<p>CrossFade</p>\n</li>\n<li>\n<p>Bloom</p>\n</li>\n<li>\n<p>ToneMapping</p>\n</li>\n<li>\n<p>Vignette</p>\n</li>\n<li>\n<p>LensFlare</p>\n</li>\n<li>\n<p>reProjection</p>\n</li>\n<li>\n<p>Depth of Field（DOF）</p>\n</li>\n<li>\n<p>Motion Blur</p>\n</li>\n</ul>\n<p>这些效果可以使得场景变得更为炫酷，可以说对于后面需要构建的炫酷场景是不可或缺的部分，所以这部分决定好好学习一波，瞅瞅各个效果的原理并进行实践。</p>\n<h3>Gaussian Blur</h3>\n<p>理论知识可以参考<a href=\"https://xiazdong.github.io/2017/04/30/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/\">这篇文章</a></p>\n<p>之前一直奇怪为什么纹理要规定纹理环绕方式，原来一些算法对纹理采样的坐标还真是会超出边缘边界。</p>\n<p>具体实现可以直接使用<a href=\"https://github.com/Jam3/glsl-fast-gaussian-blur\">已有轮子</a> , 其Shader将权重直接进行了具体数值化来提升运行效率：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">vec4 <span class=\"token function\">blur5</span><span class=\"token punctuation\">(</span>sampler2D image<span class=\"token punctuation\">,</span> vec2 uv<span class=\"token punctuation\">,</span> vec2 resolution<span class=\"token punctuation\">,</span> vec2 direction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  vec4 color <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  vec2 off1 <span class=\"token operator\">=</span> <span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.3333333333333333</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> direction<span class=\"token punctuation\">;</span>\n  color <span class=\"token operator\">+=</span> <span class=\"token function\">texture</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> uv<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.29411764705882354</span><span class=\"token punctuation\">;</span>\n  color <span class=\"token operator\">+=</span> <span class=\"token function\">texture</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> uv <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>off1 <span class=\"token operator\">/</span> resolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.35294117647058826</span><span class=\"token punctuation\">;</span>\n  color <span class=\"token operator\">+=</span> <span class=\"token function\">texture</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> uv <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>off1 <span class=\"token operator\">/</span> resolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.35294117647058826</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>FXAA</h3>\n<p>FXAA是抗锯齿(Anti-Aliasing)技术之一，抗锯齿技术的相关的介绍可以参考<a href=\"https://www.zhihu.com/question/20236638/answer/44821615\">这篇文章</a></p>\n<p>SMAA和MLAA可以参考<a href=\"https://blog.csdn.net/qezcwx11/article/details/78426052\">这篇文章</a></p>\n<p>而关于FXAA具体的计算原理可以参考<a href=\"http://blog.simonrodriguez.fr/articles/30-07-2016_implementing_fxaa.html?tdsourcetag=s_pctim_aiomsg\">这里</a></p>\n<p>后处理的AA核心办法其实都是边缘检测+blur来柔化边缘的显示效果。</p>\n<p>具体实现可以直接使用<a href=\"https://github.com/mattdesl/glsl-fxaa\">已有轮子</a></p>\n<h3>Bloom</h3>\n<p>核心原理就是提取场景中的亮部，对亮部进行模糊处理，再与原场景进行融合。</p>\n<p>原理可以参考<a href=\"https://learnopengl-cn.github.io/05%20Advanced%20Lighting/07%20Bloom/\">这篇文章</a></p>\n<p>具体实现亮部提取可以使用luminance filter，模糊处理则使用多次不同半径的高斯模糊并按不同权重结合（<a href=\"https://docs.unrealengine.com/udk/Three/Bloom.html\">https://docs.unrealengine.com/udk/Three/Bloom.html</a>）</p>\n<h3>CrossFade</h3>\n<p>CrossFade效果的原理其实就是以两个不同场景为基础进行插值，若是有添加过度的纹理图片则以纹理图片为基础进行插值：</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">vec4</span> texel1 <span class=\"token operator\">=</span> <span class=\"token function\">texture</span><span class=\"token punctuation\">(</span> tMap<span class=\"token punctuation\">,</span> vUv <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">vec4</span> texel2 <span class=\"token operator\">=</span> <span class=\"token function\">texture</span><span class=\"token punctuation\">(</span> tPreMap<span class=\"token punctuation\">,</span> vUv <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useTexture<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">//是否有过渡用的纹理图片</span>\n\n        <span class=\"token keyword\">vec4</span> transitionTexel <span class=\"token operator\">=</span> <span class=\"token function\">texture</span><span class=\"token punctuation\">(</span> tMixTexture<span class=\"token punctuation\">,</span> vUv <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> r <span class=\"token operator\">=</span> mixRatio <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">+</span> threshold <span class=\"token operator\">*</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> threshold<span class=\"token punctuation\">;</span><span class=\"token comment\">//???magic算法？</span>\n\n        <span class=\"token keyword\">float</span> mixf<span class=\"token operator\">=</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>transitionTexel<span class=\"token punctuation\">.</span>r <span class=\"token operator\">-</span> r<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token operator\">/</span>threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FragColor <span class=\"token operator\">=</span> <span class=\"token function\">mix</span><span class=\"token punctuation\">(</span> texel1<span class=\"token punctuation\">,</span> texel2<span class=\"token punctuation\">,</span> mixf <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        FragColor <span class=\"token operator\">=</span> <span class=\"token function\">mix</span><span class=\"token punctuation\">(</span> texel2<span class=\"token punctuation\">,</span> texel1<span class=\"token punctuation\">,</span> mixRatio <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Glitch</h3>","fields":{"slug":"/post-processing/Post-Processing-Effect学习笔记/","prefix":"2019-06-06"},"frontmatter":{"title":"","author":null,"category":null,"cover":null}},"authornote":{"id":"20cdfd79-00b3-57fb-a29f-bb96dcd133a8","html":"<p><strong>todaylg</strong> </p>"},"site":{"siteMetadata":{"facebook":{"appId":""}}}},"pageContext":{"slug":"/post-processing/Post-Processing-Effect学习笔记/","prev":{"id":"8cda8b18-421f-5e18-aad7-12ca9bb5a2fe","fields":{"slug":"/blender-record/Blender学习笔记/","prefix":"2019-06-01","source":"posts"},"frontmatter":{"title":"Blender学习笔记","category":"小结"}},"next":{"id":"a2c1ec4a-bc89-5774-ac07-4dd7bf8bcdc2","fields":{"slug":"/post-processing/Blender学习笔记/","prefix":"2019-06-06","source":"posts"},"frontmatter":{"title":"Blender学习笔记","category":"小结"}},"source":"posts"}}