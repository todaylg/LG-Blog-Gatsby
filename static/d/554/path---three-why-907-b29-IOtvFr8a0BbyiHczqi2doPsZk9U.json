{"data":{"post":{"id":"fb27b9c6-01eb-5096-98dd-682e1687829c","html":"<p>前段日子一直断断续续跟着学习闫令琪老师的<a href=\"https://www.bilibili.com/video/BV1X7411F744?p=22\">《现代计算机图形学入门》</a>，完结撒花以后感觉是要从入门到入土了，水实在是太深了，印象最为深刻的是闫老师说他学了十年的图形学还是感觉自己什么都不知道。。。这。。让我等菜鸡何去何从。。。</p>\n<p>好在前些日子我们的精神领袖切·格瓦拉重见天日，学是学不完的，这辈子都学不完的，只能随便看看，实在搞不动了就回家种种地，勉强维持一下生活这样子。</p>\n<p>不扯了不扯了。。。</p>\n<p>主要还是要记录一下Threejs实际使用过程中遇到的一些疑问。。。</p>\n<h3>1.射线检测(Raycaster)底层是怎么实现的？真的会有一条射线唰的射出来吗？性能顶不顶？</h3>\n<p><a href=\"https://threejs.org/docs/index.html#api/en/core/Raycaster\">Raycaster</a>中的<a href=\"https://threejs.org/docs/index.html#api/en/math/Ray\">Ray</a>其实只是一个用于计算射线方向的向量(比如调用setFromCamera)，核心的求交计算交给不同的Object各自实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">intersectObject</span><span class=\"token punctuation\">(</span> object<span class=\"token punctuation\">,</span> raycaster<span class=\"token punctuation\">,</span> intersects<span class=\"token punctuation\">,</span> recursive <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> object<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span> raycaster<span class=\"token punctuation\">.</span>layers <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 调用object上的raycast方法</span>\n        object<span class=\"token punctuation\">.</span><span class=\"token function\">raycast</span><span class=\"token punctuation\">(</span> raycaster<span class=\"token punctuation\">,</span> intersects <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> recursive <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">intersectObject</span><span class=\"token punctuation\">(</span> children<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> raycaster<span class=\"token punctuation\">,</span> intersects<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>比如Mesh的raycast方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">raycast<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span> raycaster<span class=\"token punctuation\">,</span> intersects <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span> \n    <span class=\"token comment\">// 先检测BoundingSphere与BoundingBox是否有交</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> raycaster<span class=\"token punctuation\">.</span>ray<span class=\"token punctuation\">.</span><span class=\"token function\">intersectsSphere</span><span class=\"token punctuation\">(</span> _sphere <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> _ray<span class=\"token punctuation\">.</span><span class=\"token function\">intersectsBox</span><span class=\"token punctuation\">(</span> geometry<span class=\"token punctuation\">.</span>boundingBox <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>  \n    <span class=\"token comment\">// 再遍历geometry每个面的3个顶点与ray进行求交</span>\n    raycaster<span class=\"token punctuation\">.</span>ray<span class=\"token punctuation\">.</span><span class=\"token function\">intersectTriangle</span><span class=\"token punctuation\">(</span> pC<span class=\"token punctuation\">,</span> pB<span class=\"token punctuation\">,</span> pA<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> point <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>具体的求交计算方法可以直接看intersectTriangle方法的源码(没能看懂)，Three也给出了<a href=\"http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\">Refer</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 求射线(Q+tD)与平面的交点(b1*edge1 + b2*edge2)的解</span>\n<span class=\"token comment\">// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,</span>\n<span class=\"token comment\">// E1 = edge1, E2 = edge2, N = Cross(E1,E2)) by</span>\n<span class=\"token comment\">//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))</span>\n<span class=\"token comment\">//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))</span>\n<span class=\"token comment\">//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)</span></code></pre></div>\n<p>然而问题来了，上面整个Raycasting的计算都是在CPU(js)进行的，但是Skin和MorphTarget的顶点变换是在GPU(shader)里计算的，所以SkinnedMesh的射线检测就需要特殊处理，相关的讨论Issue可见：</p>\n<p><a href=\"https://github.com/mrdoob/three.js/pull/8953\">https://github.com/mrdoob/three.js/pull/8953</a></p>\n<p>最直接想到的方法当然就是把顶点变换在Raycast前先进行计算(CPU)，Three在前些天也提供了支持(R116):</p>\n<p><a href=\"https://github.com/mrdoob/three.js/pull/19178\">SkinnedMesh: Apply skinning while raycasting by donmccurdy · Pull Request #19178 · mrdoob/three.js · GitHub</a></p>\n<p>但是这样在CPU端添加了这么多的计算量，性能自然就不那么顶了，这时候GPU Object Picking就有声音了，相关原理示例可见：</p>\n<p><a href=\"http://192.168.1.105:8080/examples/?q=gpu#webgl_interactive_cubes_gpu\">three.js webgl<em>interactive</em>cubes_gpu examples</a></p>\n<p>现成的封装库：</p>\n<p><a href=\"https://github.com/bzztbomb/three_js_gpu_picking\">three<em>js</em>gpu_picking</a></p>\n<p>原理其实就是为每个Gemetry添加一个顶点ID信息(color atrribute)，之后以vertex color先渲染当前鼠标所在位置单个像素，再获取回ID值即可</p>\n<h3>2.glTF的模型可不可以无脑上Draco压缩？</h3>\n<p>Three里使用Draco需要额外再引入解析文件：</p>\n<ul>\n<li><code class=\"language-text\">draco_decoder.js</code>（792KB）</li>\n</ul>\n<p>或wasm：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">draco_decoder.wasm</code>（323 KB）</p>\n</li>\n<li>\n<p><code class=\"language-text\">draco_wasm_wrapper.js</code>（65 KB）</p>\n</li>\n</ul>\n<p>额外引入的解析文件大小只是需要考虑的其中一个因素，还需要考虑在客户端增加的解码时间损耗（在移动端一些低端机器上尤为明显），并且需要实际测试移动端低端机器对wasm的支持有没有坑。</p>\n<p>所以模型文件不是特别大的情况下(且要兼顾移动端)，不采用Draco压缩反而更好。</p>\n<h3>3.咋区分矩阵相关方法是预乘还是后乘？</h3>\n<p>带Apply的都是预乘，比如：</p>\n<ul>\n<li>\n<p>Object3D.applyMatrix4</p>\n</li>\n<li>\n<p>Vector3.applyMatrix4</p>\n</li>\n</ul>\n<h3>4.想改内置Shader又不想改动到源码，该如何是好？</h3>\n<p>可以通过重写Material的onBeforeCompile钩子来替换需要改动的Shader代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">material<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onBeforeCompile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    shader<span class=\"token punctuation\">.</span>fragmentShader <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>fragmentShader<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token string\">`varying vec3 vViewPosition;`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token string\">`XXX`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也可以直接改THREE.ShaderLib/ShaderChunk</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>ShaderChunk<span class=\"token punctuation\">.</span>shadowmap_pars_fragment <span class=\"token operator\">=</span>\n    <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>ShaderChunk<span class=\"token punctuation\">.</span>shadowmap_pars_fragment\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span> <span class=\"token regex\">/float getShadow/</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token string\">`XXX\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> t <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果需要修改的太多了，也可以直接用Shader/Raw Material，再在Shader里面引可以共用的ShaderChunk。</p>\n<h3>5.模型下载一半不想下了，可以反悔吗？</h3>\n<p>Three核心的FileLoader的load方法会返回XMLHttpRequest对象，但是外层模型加载的Loader(比如GLTFLoader)并对这个XMLHttpRequest对象做处理，所以要反悔的话需要改一下Loader把XMLHttpRequest对象返回出来：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// GLTFLoader</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">var</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileLoader</span><span class=\"token punctuation\">(</span> scope<span class=\"token punctuation\">.</span>manager <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 从GLTFLoader里再return出去</span>\n<span class=\"token keyword\">return</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>拿到XMLHttpRequest对象以后调用abort方法就完事啦：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">let</span> timeoutId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> timeOutDuration <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10秒超时</span>\n    <span class=\"token keyword\">let</span> isEnd <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>gltf<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>gltf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeOutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            isEnd <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 超时报错</span>\n    timeoutId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            isEnd <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeOutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> timeOutDuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>相关Issue可见：</p>\n<p><a href=\"https://github.com/mrdoob/three.js/issues/6641\">https://github.com/mrdoob/three.js/issues/6641</a></p>\n<h3>6.为啥加了个Bloom背景就不透明了？</h3>\n<p>Prashant Sharma实现的Bloom没有计算alpha(大多数后处理效果都没算alpha)\n相关Issue和改动见：</p>\n<p><a href=\"https://github.com/mrdoob/three.js/issues/14104\">https://github.com/mrdoob/three.js/issues/14104</a></p>\n<p>又要Bloom又要背景透明其实很奇怪，不科学</p>","fields":{"slug":"/three-why/","prefix":"2020-5-03"},"frontmatter":{"title":"Threejs为啥笔记","author":"todaylg","category":"小结","cover":{"childImageSharp":{"resize":{"src":"/static/bg-717ed43c8db529da8bc75b77afb30102-ada8c.jpg"}}}}},"authornote":{"id":"20cdfd79-00b3-57fb-a29f-bb96dcd133a8","html":"<p><strong>todaylg</strong> </p>"},"site":{"siteMetadata":{"facebook":{"appId":""}}}},"pageContext":{"slug":"/three-why/","prev":{"id":"3bdfb94d-b75b-588b-a90a-f3b10547e308","fields":{"slug":"/viewer-pbr/","prefix":"2020-3-19","source":"posts"},"frontmatter":{"title":"Viewer与PBR","category":"大结"}},"next":{"id":"977ecabd-d718-582b-aa8b-27ce73efba82","fields":{"slug":"/loading/","prefix":"2020-6-01","source":"posts"},"frontmatter":{"title":"断线ing。","category":"废话集"}},"source":"posts"}}