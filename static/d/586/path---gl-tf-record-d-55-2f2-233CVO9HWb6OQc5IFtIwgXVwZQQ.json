{"data":{"post":{"id":"dcc68feb-f14f-566c-bc4d-4c2564253fab","html":"<p>当想要构建包含复杂模型的场景时，如何从建模工具导出的模型文件中解析并复原模型就成了必须要解决的一个问题。</p>\n<p>首先需要了解一下各种三维文件的格式：<a href=\"https://www.bgteach.com/article/132\">三维文件格式知多少</a></p>\n<p>glTF无疑是应用于Web平台的首选格式，作为一个WebGL Renderer的LGL，可以没有其他格式的Loader，但是glTFLoader还是要想办法搞出来的：</p>\n<p><a href=\"https://github.com/todaylg/glTFLoader\">glTFLoader of LGL</a></p>\n<p>当前<del>Animation和</del>Extension还不支持，在实践过程中又踩了几块之前没有学习到的知识，总结备忘一波：</p>\n<h2>glTF</h2>\n<p>正如上面格式介绍的文章中有对glTF的介绍，glTF是由<a href=\"https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md\">Khronos Group设计与设定</a>的，设计目的在于为3D建模工具和应用间提供一个高效率传输、易拓展、具有互通性的<strong>3D内容格式规范</strong>，并且当前已得到了广泛的认可与支持（<a href=\"https://zhuanlan.zhihu.com/p/37735460\">Apple除外</a>）。</p>\n<h3>节点数据结构</h3>\n<p><img src=\"https://github.com/KhronosGroup/glTF/raw/master/specification/2.0/figures/dictionary-objects.png\" alt=\"image\"></p>\n<p>glTF资源由三部分组成：</p>\n<ul>\n<li>\n<p>包含完整场景描述的json格式文件（<code class=\"language-text\">.gltf</code>）</p>\n</li>\n<li>\n<p>包含几何、动画数据以及其他缓冲数据的二进制文件（<code class=\"language-text\">.bin</code>）</p>\n</li>\n<li>\n<p>纹理图片文件（<code class=\"language-text\">.jpg</code>、<code class=\"language-text\">.png</code>）</p>\n</li>\n</ul>\n<p>即需要通过对.glTF的解析，获取到整个场景的完整组成及层级信息，并且按照划分的读取区域从.bin文件中读取出对应的具体数据，纹理图片则通过加载图片获取。最终Loader使用具体数据并依照层级关系重新复现场景。</p>\n<p>上层的各个节点之间通过数组索引的方式建立联接，最底层的buffer、image节点则通过URI引入资源。</p>\n<p>以buffer => bufferViews => accessors这条链路为例：</p>\n<ul>\n<li>\n<p>每个buffer会通过URI联接到二进制的数据文件(.bin)上，并从原始数据块中分割指定的长度（由byteLength参数决定）。</p>\n</li>\n<li>\n<p>每个bufferView则指向一个buffer，由byteOffset和byteLength定义出属于这个bufferView的buffer数据部分，并指定buffer target（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/bindBuffer\">bindBuffer</a>）</p>\n</li>\n<li>\n<p>每个accessors定义了如何解析每个bufferViews，比如附加的byteOffset指的是读取bufferView的起始位置，type、componentType决定了数据类型及排列方式。（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/VertexAttribPointer\">VertexAttribPointer</a>）</p>\n</li>\n</ul>\n<p>至于上层节点之间层级关系的构建，其实就是各自节点获取各自节点的依赖引用节点后进行实现，这里就不再赘述了。</p>\n<h3>Physically Based Rendering（PBR）</h3>\n<p>关于PBR的WebGL实现其实已经有现成的例子：<a href=\"https://github.com/KhronosGroup/glTF-Sample-Viewer\">glTF-Sample-Viewer</a>，但是鲁迅先生可能曾经说过：</p>\n<blockquote>\n<p>白嫖没有问题，但是至少要知道白嫖的是个什么东西。</p>\n</blockquote>\n<p>秉持着这样的学术精神，我们还是有必要了解一下PBR是个啥。</p>\n<p>关于PBR的理论知识可以参考下面的几篇文章：</p>\n<p><a href=\"https://learnopengl.com/PBR/Theory\">https://learnopengl.com/PBR/Theory</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/61962884\">https://zhuanlan.zhihu.com/p/61962884</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/53086060\">https://zhuanlan.zhihu.com/p/53086060</a></p>\n<p>正如第三篇文章的脑图，PBR设计的知识非常的广且多，想要非常深入的理解并不容易。</p>\n<p>不过第一篇文章的PBR部分堪称新手之友了，形象的描述了公式各部分的作用，同时又隐藏掉了公式的推导和计算细节，并且还提供了各部分的实现的实例代码。所以只需要有一个大致了解的话，仔细读第一篇文章+翻源码就完事啦~</p>\n<p><strong>(From：2019.12.31):菜鸡。。。你懂个鬼的PBR。。</strong> </p>\n<p>最主要的是反射方程：</p>\n<p><code class=\"language-text\">Lo(p,ωo)=∫Ω fr(p,ωi,ωo) Li(p,ωi) n⋅ωi dωi</code></p>\n<p>表示累积在半球领域Ω（以p点法线为中心）内，入射(光)角为ωi的入射光在点p上对反射(观察)角wo的所有出射辐射量总和Lo（受fr的影响）。</p>\n<p>把公式拆分：</p>\n<ul>\n<li>\n<p>fr(p,ωi,ωo)：双向反射分布函数(BRDF - Bidirectional Reflective Distribution Function) </p>\n</li>\n<li>\n<p>Li(p,ωi)：入射光</p>\n</li>\n<li>\n<p>n⋅ωi ：Lambert漫反射的点乘</p>\n</li>\n</ul>\n<p><strong>BRDF(双向反射分布函数)</strong>:</p>\n<p>作用为：近似的求出每束光线对一个给定了材质属性的平面上最终反射出来的光线所作出的贡献程度，即入射方向到出射方向光的反射比例。</p>\n<p>由漫反射及镜面反射两部分组成：<code class=\"language-text\">fr=kd*flambert+ks*fcook−torrance</code></p>\n<p>漫反射：<code class=\"language-text\">flambert=c/π</code></p>\n<p>镜面反射：<code class=\"language-text\">DFG/4(ωo⋅n)(ωi⋅n)</code></p>\n<p>保证能量守恒：<code class=\"language-text\">kd = 1- ks</code></p>\n<p><strong>lambert</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec3</span> <span class=\"token function\">diffuse</span><span class=\"token punctuation\">(</span>PBRInfo pbrInputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> pbrInputs<span class=\"token punctuation\">.</span>diffuseColor <span class=\"token operator\">/</span> M_PI<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>D-法线分布函数(Normal Distribution Function)</strong></p>\n<p>估算在受到表面粗糙度的影响下，取向方向与中间向量一致的微平面的数量。这是用来估算微平面的主要函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token comment\">//Trowbridge-Reitz GGX</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">microfacetDistribution</span><span class=\"token punctuation\">(</span>PBRInfo pbrInputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> roughnessSq <span class=\"token operator\">=</span> pbrInputs<span class=\"token punctuation\">.</span>alphaRoughness <span class=\"token operator\">*</span> pbrInputs<span class=\"token punctuation\">.</span>alphaRoughness<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pbrInputs<span class=\"token punctuation\">.</span>NdotH <span class=\"token operator\">*</span> roughnessSq <span class=\"token operator\">-</span> pbrInputs<span class=\"token punctuation\">.</span>NdotH<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> pbrInputs<span class=\"token punctuation\">.</span>NdotH <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> roughnessSq <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>M_PI <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>F-菲涅尔方程(Fresnel Rquation)</strong></p>\n<p>菲涅尔方程描述的是在不同的表面角下表面所反射的光线所占的比率。</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token comment\">//Fresnel-Schlick近似(Fresnel-Schlick Approximation)</span>\n<span class=\"token keyword\">float</span> <span class=\"token function\">geometricOcclusion</span><span class=\"token punctuation\">(</span>PBRInfo pbrInputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> NdotL <span class=\"token operator\">=</span> pbrInputs<span class=\"token punctuation\">.</span>NdotL<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> NdotV <span class=\"token operator\">=</span> pbrInputs<span class=\"token punctuation\">.</span>NdotV<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> r <span class=\"token operator\">=</span> pbrInputs<span class=\"token punctuation\">.</span>alphaRoughness<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> attenuationL <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> NdotL <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>NdotL <span class=\"token operator\">+</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span> r <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> r <span class=\"token operator\">*</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>NdotL <span class=\"token operator\">*</span> NdotL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> attenuationV <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">*</span> NdotV <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>NdotV <span class=\"token operator\">+</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span> r <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> r <span class=\"token operator\">*</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>NdotV <span class=\"token operator\">*</span> NdotV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> attenuationL <span class=\"token operator\">*</span> attenuationV<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>G-几何函数(Geometry Function)</strong></p>\n<p>描述了微平面自成阴影的属性。当一个平面相对比较粗糙的时候，平面表面上的微平面有可能挡住其他的微平面从而减少表面所反射的光线。</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token comment\">//Smith’s Schlick-GGX</span>\n<span class=\"token keyword\">vec3</span> <span class=\"token function\">specularReflection</span><span class=\"token punctuation\">(</span>PBRInfo pbrInputs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> pbrInputs<span class=\"token punctuation\">.</span>reflectance0 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pbrInputs<span class=\"token punctuation\">.</span>reflectance90 <span class=\"token operator\">-</span> pbrInputs<span class=\"token punctuation\">.</span>reflectance0<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> pbrInputs<span class=\"token punctuation\">.</span>VdotH<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后结果即为：</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec3</span> diffuseContrib <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> F<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">diffuse</span><span class=\"token punctuation\">(</span>pbrInputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">vec3</span> specContrib <span class=\"token operator\">=</span> F <span class=\"token operator\">*</span> G <span class=\"token operator\">*</span> D <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4.0</span> <span class=\"token operator\">*</span> NdotL <span class=\"token operator\">*</span> NdotV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)</span>\n\n<span class=\"token keyword\">vec3</span> color <span class=\"token operator\">=</span> NdotL <span class=\"token operator\">*</span> u_LightColor <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>diffuseContrib <span class=\"token operator\">+</span> specContrib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>IBL（Image Based Lighting）</strong></p>\n<p>对于环境光照的因素，采样的是IBL，即基于图像的照明，相当于一个无限大的球面光源在照射场景。</p>\n<p>IBL也由漫反射及镜面反射两部分组成，但是为了追求实时渲染的快速计算，需要做一些预计算，最终在实时渲染中只需要通过简单的纹理采样即可得到结果。</p>\n<p>详细的原理可以参考这篇<a href=\"https://zhuanlan.zhihu.com/p/66518450\">文章</a>的解释</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token preprocessor builtin\">#ifdef</span> USE_IBL\n<span class=\"token keyword\">vec3</span> <span class=\"token function\">getIBLContribution</span><span class=\"token punctuation\">(</span>PBRInfo pbrInputs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">vec3</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">vec3</span> reflection<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//预计算贴图tLUT</span>\n    <span class=\"token keyword\">vec3</span> brdf <span class=\"token operator\">=</span> <span class=\"token function\">SRGBtoLINEAR</span><span class=\"token punctuation\">(</span><span class=\"token function\">texture</span><span class=\"token punctuation\">(</span>tLUT<span class=\"token punctuation\">,</span> <span class=\"token keyword\">vec2</span><span class=\"token punctuation\">(</span>pbrInputs<span class=\"token punctuation\">.</span>NdotV<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> pbrInputs<span class=\"token punctuation\">.</span>perceptualRoughness<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// CubeMap</span>\n    <span class=\"token keyword\">vec3</span> diffuseLight <span class=\"token operator\">=</span> <span class=\"token function\">SRGBtoLINEAR</span><span class=\"token punctuation\">(</span><span class=\"token function\">texture</span><span class=\"token punctuation\">(</span>tEnvDiffuse<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">vec3</span> specularLight <span class=\"token operator\">=</span> <span class=\"token function\">SRGBtoLINEAR</span><span class=\"token punctuation\">(</span><span class=\"token function\">texture</span><span class=\"token punctuation\">(</span>tEnvSpecular<span class=\"token punctuation\">,</span> reflection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rgb<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">vec3</span> diffuse <span class=\"token operator\">=</span> diffuseLight <span class=\"token operator\">*</span> pbrInputs<span class=\"token punctuation\">.</span>diffuseColor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">vec3</span> specular <span class=\"token operator\">=</span> specularLight <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>pbrInputs<span class=\"token punctuation\">.</span>specularColor <span class=\"token operator\">*</span> brdf<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> brdf<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">return</span> diffuse <span class=\"token operator\">+</span> specular<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token preprocessor builtin\">#endif</span></code></pre></div>\n<p>最后将其他贴图的结果也进行累加：</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token comment\">// Calculate lighting contribution from image based lighting source (IBL)</span>\n<span class=\"token preprocessor builtin\">#ifdef</span> USE_IBL\n\n    color <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">getIBLContribution</span><span class=\"token punctuation\">(</span>pbrInputs<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> reflection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token preprocessor builtin\">#endif</span>\n\n\n<span class=\"token comment\">// Apply optional PBR terms for additional (optional) shading</span>\n<span class=\"token comment\">// AO MAP</span>\n<span class=\"token preprocessor builtin\">#ifdef</span> HAS_OCCLUSIONMAP\n\n    <span class=\"token keyword\">float</span> ao <span class=\"token operator\">=</span> <span class=\"token function\">texture</span><span class=\"token punctuation\">(</span>u_OcclusionSampler<span class=\"token punctuation\">,</span> vUv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n\n    color <span class=\"token operator\">=</span> <span class=\"token function\">mix</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> color <span class=\"token operator\">*</span> ao<span class=\"token punctuation\">,</span> u_OcclusionStrength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token preprocessor builtin\">#endif</span>\n\n<span class=\"token comment\">//EMISSIVE MAP</span>\n<span class=\"token preprocessor builtin\">#ifdef</span> HAS_EMISSIVEMAP\n\n    <span class=\"token keyword\">vec3</span> emissive <span class=\"token operator\">=</span> <span class=\"token function\">SRGBtoLINEAR</span><span class=\"token punctuation\">(</span><span class=\"token function\">texture</span><span class=\"token punctuation\">(</span>u_EmissiveSampler<span class=\"token punctuation\">,</span> vUv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rgb <span class=\"token operator\">*</span> u_EmissiveFactor<span class=\"token punctuation\">;</span>\n\n    color <span class=\"token operator\">+</span><span class=\"token operator\">=</span> emissive<span class=\"token punctuation\">;</span>\n\n<span class=\"token preprocessor builtin\">#endif</span>\n\nFragColor <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> baseColor<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>就得到最终的结果啦，白嫖Shader并接入LGL后的结果：</p>\n<p><a href=\"http://todaylg.com/glTFLoader/examples/\">http://todaylg.com/glTFLoader/examples/</a></p>\n<h3>Skinning</h3>\n<p>Skinning即蒙皮，表示将三维网格顶点联系至骨骼的过程。在此过程中，顶点需要获取其关联关节的关节矩阵，再根据蒙皮权重计算出蒙皮矩阵，从而变换顶点的位置和法线信息。</p>\n<p>首先是如何计算关节矩阵？</p>\n<p><a href=\"https://github.com/KhronosGroup/glTF-Tutorials/blob/master/gltfTutorial/gltfTutorial_020_Skins.md\">规范</a>中其实给出了计算方法的式子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">jointMatrix</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n  globalTransformOfNodeThatTheMeshIsAttachedTo<span class=\"token operator\">^</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span>\n  <span class=\"token function\">globalTransformOfJointNode</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>\n  <span class=\"token function\">inverseBindMatrixForJoint</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>关键是要注意到顶点绑定到关节位置后，在其关节空间中是不变的。所以要计算当前姿势下顶点的位置，可以：</p>\n<ul>\n<li>\n<p>1.把先顶点于模型空间的绑定姿势位置转化为关节空间（即乘以inverseBindMatrixForJoint(j)），</p>\n</li>\n<li>\n<p>2.再把关节移动到当前姿势（即乘以globalTransformOfJointNode(j)）</p>\n</li>\n</ul>\n<p>因为经过1和2两个步骤以后顶点已经是在模型空间的位置了（即相当于乘过了modelMatrix），如果之后计算Position时还要乘MVP矩阵，那就需要先再还原至关节空间（即乘以globalTransformOfNodeThatTheMeshIsAttachedTo^-1），当然如果在Shader中不乘Model矩阵的话，这步就可以直接省略了。</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">vec4</span> Pos <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">vec4</span> transformed <span class=\"token operator\">=</span> skinMatrix <span class=\"token operator\">*</span> Pos<span class=\"token punctuation\">;</span>\n\ngl_Position <span class=\"token operator\">=</span> projectionMatrix <span class=\"token operator\">*</span> viewMatrix <span class=\"token operator\">*</span> transformed<span class=\"token punctuation\">;</span> <span class=\"token comment\">//model already calculate in boneMatrix</span></code></pre></div>\n<p>那如何在顶点着色器中获取到对应的关节矩阵呢？</p>\n<p>自然是以uniform传入啦，这里有意思的是翻了下Three.js的实现，其没有直接传一个Float32Array，而是把所有关节矩阵保存为texture（4*RGBA => Mat4）然后在顶点着色器中再根据绑定的skinIndex计算坐标之后，把矩阵读取出来：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boneTexture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Texture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    image<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>boneMatrices<span class=\"token punctuation\">,</span>\n\n    generateMipmaps<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n    type<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span>\n\n    internalFormat<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span>isWebgl2 <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA16F</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA</span><span class=\"token punctuation\">,</span>\n\n    flipY<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n    width<span class=\"token punctuation\">:</span> size<span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token keyword\">uniform</span> <span class=\"token keyword\">sampler2D</span> boneTexture<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">uniform</span> <span class=\"token keyword\">int</span> boneTextureSize<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">mat4</span> <span class=\"token function\">getBoneMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">float</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>boneTextureSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//所在行</span>\n\n    <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>boneTextureSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//所在列</span>\n\n\n    <span class=\"token keyword\">float</span> dx <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>boneTextureSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> dy <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>boneTextureSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    y <span class=\"token operator\">=</span> dy <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">vec4</span> v1 <span class=\"token operator\">=</span> <span class=\"token function\">texture2D</span><span class=\"token punctuation\">(</span>boneTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">vec2</span><span class=\"token punctuation\">(</span>dx <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//转换回UV范围内坐标</span>\n\n    <span class=\"token keyword\">vec4</span> v2 <span class=\"token operator\">=</span> <span class=\"token function\">texture2D</span><span class=\"token punctuation\">(</span>boneTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">vec2</span><span class=\"token punctuation\">(</span>dx <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">vec4</span> v3 <span class=\"token operator\">=</span> <span class=\"token function\">texture2D</span><span class=\"token punctuation\">(</span>boneTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">vec2</span><span class=\"token punctuation\">(</span>dx <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">vec4</span> v4 <span class=\"token operator\">=</span> <span class=\"token function\">texture2D</span><span class=\"token punctuation\">(</span>boneTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">vec2</span><span class=\"token punctuation\">(</span>dx <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">mat4</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以Texture替代直接传入矩阵数组，这样其实是多了一手操作，是因为会有兼容性的原因？还是会有性能优化？//Todo 需要验证一下。</p>\n<h3>Animation</h3>\n<p>glTF总通过一个单独的animations字段来存储动画信息，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"animations\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n\n       <span class=\"token property\">\"channels\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\n          <span class=\"token punctuation\">{</span>\n\n             <span class=\"token property\">\"sampler\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n             <span class=\"token property\">\"target\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\n                <span class=\"token property\">\"node\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  // => 要进行动画的节点\n\n                <span class=\"token property\">\"path\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"rotation\"</span> // => 所进行的动画类型（translation、rotation、scale、weight）\n\n             <span class=\"token punctuation\">}</span>\n\n           <span class=\"token punctuation\">}</span>\n\n       <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n       <span class=\"token property\">\"samplers\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\n          <span class=\"token punctuation\">{</span>\n\n             <span class=\"token property\">\"input\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> // => KeyTime 动画的时间帧\n\n             <span class=\"token property\">\"interpolation\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"LINEAR\"</span><span class=\"token punctuation\">,</span> // => 两帧之间的插值方法\n\n             <span class=\"token property\">\"output\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span> // => 具体的动画帧数据（从accessors取）\n\n          <span class=\"token punctuation\">}</span>\n\n       <span class=\"token punctuation\">]</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>实现动画模块无非就是将数据与相应节点实例的属性进行关联。</p>\n<p>Three.js中的动画处理模块较为复杂，属性和数据的绑定（animation/PropertyBinding）建立的一套专用的规则，头一下就被搞大了。。</p>\n<p>这里动画模块的实现参考了<a href=\"https://github.com/but0n/Ashes\">Ashes</a>的实现，数据和属性的关联依赖对象引用的关系直接进行修改同步，简单粗暴有效：</p>\n<p>通过解析数据便可以构建一条动画处理链路：</p>\n<p><code class=\"language-text\">AnimationChannel</code> => <code class=\"language-text\">Animation</code> => <code class=\"language-text\">AnimationSystem</code></p>\n<p>每个动画节点挂载一个Animation实例，每个Animation实例挂载一个或多个AnimationChannel（因为一个节点还可能同时进行多种类型的动画，比如同时translation和rotation），每个AnimationChannel则保存具体的动画数据。</p>\n<p>AnimationSystem保存所有的动画节点，负责整体动画播放的控制，通过回调暴露到最外层：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span> animationModel<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> gltf <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> glTF <span class=\"token operator\">=</span> gltf<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Animation</span>\n\n    animationSys <span class=\"token operator\">=</span> gltf<span class=\"token punctuation\">.</span>animations<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> animationSys <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n         animationSys<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//控制动画速度</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    scene<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>glTF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> deltaTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> lastTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    deltaTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> lastTime<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n    lastTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>animationSys<span class=\"token punctuation\">)</span> animationSys<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//更新动画</span>\n\n    renderer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> scene<span class=\"token punctuation\">,</span> camera <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在drawCall中AnimationSystem通过遍历保存的Animation中的逐个AnimationChannel进行动画的数据的更新：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> animation <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dt <span class=\"token operator\">></span> <span class=\"token number\">0.016</span><span class=\"token punctuation\">)</span> dt <span class=\"token operator\">=</span> <span class=\"token number\">0.016</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> channel <span class=\"token keyword\">of</span> animation<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">playStep</span><span class=\"token punctuation\">(</span>animation<span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Todo：</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Animation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Extension</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 支持多种插值函数</li>\n</ul>","fields":{"slug":"/glTF-record/","prefix":"2019-05-25"},"frontmatter":{"title":"glTF学习笔记","author":"todaylg","category":"大结","cover":{"childImageSharp":{"resize":{"src":"/LG-Blog-Gatsby/static/bg-cb91345e411aa386497e980227bd601e-ada8c.jpg"}}}}},"authornote":{"id":"20cdfd79-00b3-57fb-a29f-bb96dcd133a8","html":"<p><strong>todaylg</strong> </p>"},"site":{"siteMetadata":{"facebook":{"appId":""}}}},"pageContext":{"slug":"/glTF-record/","prev":{"id":"7dbae1bb-1cc5-51c7-91c4-b4fafb12d908","fields":{"slug":"/problem-record/","prefix":"2019-05-04","source":"posts"},"frontmatter":{"title":"日常踩坑小记","category":"小结"}},"next":{"id":"3e63c5cb-a925-58cf-ae18-57aea3aab3f0","fields":{"slug":"/post-processing/","prefix":"2019-06-15","source":"posts"},"frontmatter":{"title":"Post-Processing学习笔记","category":"小结"}},"source":"posts"}}