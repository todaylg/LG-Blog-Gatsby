{"data":{"post":{"id":"42446ad1-ba4e-5efc-86c4-60259e65d467","html":"<h1>Vim备忘</h1>\n<p>自己用的场景还是偏少，所以命令根本记不住。。。备忘把常用的简单指令记一下。</p>\n<h3>基本移动</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">h</th>\n<th align=\"left\">j</th>\n<th align=\"left\">k</th>\n<th align=\"left\">l</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">⬅️</td>\n<td align=\"left\">⬇️</td>\n<td align=\"left\">⬆️</td>\n<td align=\"left\">➡️</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">H</th>\n<th align=\"center\">本屏首行</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><strong>L</strong></td>\n<td align=\"center\"><strong>本屏末行</strong></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>o</strong></th>\n<th align=\"center\"><strong>这一行的最前处</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><strong>$</strong></td>\n<td align=\"center\"><strong>这一行的最末尾</strong></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>G</strong></th>\n<th align=\"left\"><strong>移动到整个文档最后一行</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>gg</strong></td>\n<td align=\"left\"><strong>移动到整个文档首行，相当于1g</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>n+Enter</strong></td>\n<td align=\"left\"><strong>向下移动n行</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>nG</strong></td>\n<td align=\"left\"><strong>跳转到第n行</strong></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3>搜索替换</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>/word</strong></th>\n<th align=\"left\"><strong>在文档中向下搜索’word’</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>?word</strong></td>\n<td align=\"left\"><strong>在文档中向上搜索’word’</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>n/N</strong></td>\n<td align=\"left\"><strong>按下Enter搜索完后显示下/上一个匹配项</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>:1,$s /word1/word2/g</strong></td>\n<td align=\"left\"><strong>全文替换</strong></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3>删除</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>x/X</strong></th>\n<th align=\"left\"><strong>向前/后删除一个字符</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>dd</strong></td>\n<td align=\"left\"><strong>删除整行（ndd）</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>yy</strong></td>\n<td align=\"left\"><strong>复制整行（nyy）</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>p/P</strong></td>\n<td align=\"left\"><strong>粘贴在光标上/下一行处</strong></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3>撤销</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>u</strong></th>\n<th align=\"left\"><strong>复原上一个动作</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>ctrl+r</strong></td>\n<td align=\"left\"><strong>重做上一个动作</strong></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3>模式</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>:w</strong></th>\n<th align=\"left\"><strong>保存</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>:w!</strong></td>\n<td align=\"left\"><strong>强存（权限问题）</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>:q</strong></td>\n<td align=\"left\"><strong>退出</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>:q!</strong></td>\n<td align=\"left\"><strong>强退（不保存）</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><strong>:wq</strong></td>\n<td align=\"left\"><strong>保存完走</strong></td>\n</tr>\n</tbody>\n</table>\n<h1>Blender备忘</h1>\n<p>建模是不可能建模的，这辈子估计都搂不完一个模型，只能了解一下，来勉强维持生活这样子。</p>\n<p>当我们在<a href=\"https://sketchfab.com/\">Sketchfab</a>上苦寻想要的模型无果时，或是找到了模型想要做些动画时。。。</p>\n<p>这时我们要是对建模软件有所了解的话，就。。。其实能白嫖就白嫖。。</p>\n<p>开始接触建模软件才发现鼠标中键的舒适度原来这么重要。。。</p>\n<h2>常用的快捷键</h2>\n<hr>\n<p><strong>视角调整</strong></p>\n<ul>\n<li>\n<p>滚动视角：<strong>鼠标中键</strong></p>\n</li>\n<li>\n<p>平移视角：<strong>Shift+鼠标中键</strong></p>\n</li>\n<li>\n<p>推拉视角：<strong>滚动滚轮</strong></p>\n</li>\n<li>\n<p>三视图()</p>\n</li>\n<li>\n<ul>\n<li>\n<p><strong>`键+鼠标</strong></p>\n</li>\n<li>\n<p>正视图：<strong>小键盘 1</strong></p>\n</li>\n<li>\n<p>右视图：<strong>小键盘 3</strong></p>\n</li>\n<li>\n<p>顶视图：<strong>小键盘 7</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p>其他</p>\n</li>\n<li>\n<ul>\n<li>\n<p>正交/透视视图：<strong>小键盘 5</strong></p>\n</li>\n<li>\n<p>左右旋转视角：<strong>小键盘 4/6</strong></p>\n</li>\n<li>\n<p>上下翻转视角：<strong>小键盘 8/2</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Cursor：</p>\n</li>\n<li>\n<ul>\n<li>\n<p><strong>shift+c键</strong> 回归原点</p>\n</li>\n<li>\n<p><strong>shift + s + 鼠标左键</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>新建物体</strong></p>\n<ul>\n<li>\n<p>添加物体：<strong>Shift + A (Add)</strong></p>\n</li>\n<li>\n<p>选中物体：<strong>2.80默认为鼠标左键</strong></p>\n</li>\n<li>\n<p>删除物体：<strong>X键/Delete键（注意不是Backspace啊）</strong></p>\n</li>\n</ul>\n<p><strong>编辑模式 - 点线面（Tab键）</strong></p>\n<ul>\n<li>\n<p>编辑物体（<strong>G键(Grab)</strong>）</p>\n</li>\n<li>\n<ul>\n<li>\n<p><strong>鼠标左键</strong>：确认修改</p>\n</li>\n<li>\n<p><strong>鼠标右键</strong>：撤销修改</p>\n</li>\n<li>\n<p><strong>X键</strong>：在X轴上移动物体</p>\n</li>\n<li>\n<p><strong>Y键</strong>：在Y轴上移动物体</p>\n</li>\n<li>\n<p><strong>Z键</strong>：在Z轴上移动物体</p>\n</li>\n<li>\n<p><strong>Shift + Z键</strong>：在除开Z轴以外的面(XY)移动物体</p>\n</li>\n</ul>\n</li>\n<li>\n<p>旋转物体（<strong>R键(Rotate)</strong>）</p>\n</li>\n<li>\n<ul>\n<li>与 Grab 相同</li>\n</ul>\n</li>\n<li>\n<p>缩放物体（<strong>S键(Scale)</strong>）</p>\n</li>\n<li>\n<ul>\n<li>与 Grab 相同</li>\n</ul>\n</li>\n<li>\n<p>其他</p>\n</li>\n<li>\n<ul>\n<li>\n<p>挤出物体：<strong>E键(Extrude)</strong></p>\n</li>\n<li>\n<p>倒角：<strong>Crtl+B键</strong></p>\n</li>\n<li>\n<ul>\n<li><strong>鼠标滚轮</strong>：细分</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>\n<p>环切：<strong>Ctrl+R键</strong></p>\n</li>\n<li>\n<p>切割：<strong>K键</strong></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>渲染相关</strong></p>\n<p>着色方式：</p>\n<ul>\n<li><strong>z键+鼠标</strong></li>\n</ul>\n<h2>编辑模式</h2>\n<hr>\n<p>Tab键可以切换到编辑模式</p>\n<ul>\n<li>\n<p>点-线-面的选择：<strong>键盘1-2-3</strong> （多选加Shift）</p>\n</li>\n<li>\n<p>添加立方体</p>\n</li>\n<li>\n<p>挤出</p>\n</li>\n<li>\n<ul>\n<li>\n<p>整体挤出</p>\n</li>\n<li>\n<p>各自挤出</p>\n</li>\n<li>\n<p>法线方向挤出</p>\n</li>\n<li>\n<p>Cursor朝向挤出</p>\n</li>\n</ul>\n</li>\n<li>\n<p>内插面（即面内插面）</p>\n</li>\n<li>\n<p>倒角（光滑）</p>\n</li>\n<li>\n<p>环切</p>\n</li>\n<li>\n<ul>\n<li>间隔环切（切面之间不相连）</li>\n</ul>\n</li>\n<li>\n<p>切分</p>\n</li>\n<li>\n<ul>\n<li>切割（真·砍一刀）</li>\n</ul>\n</li>\n<li>\n<p>Poly Build</p>\n</li>\n<li>\n<p>Span</p>\n</li>\n<li>\n<p>光滑</p>\n</li>\n<li>\n<ul>\n<li>随机</li>\n</ul>\n</li>\n<li>\n<p>滑动边线</p>\n</li>\n<li>\n<ul>\n<li>顶点滑移</li>\n</ul>\n</li>\n<li>\n<p>法向缩放</p>\n</li>\n<li>\n<ul>\n<li>推/拉</li>\n</ul>\n</li>\n<li>\n<p>切变（Shear）</p>\n</li>\n</ul>\n<h2>修改器</h2>\n<hr>\n<p>修改器的一个好处是对添加物体无副作用（非破坏性修改）</p>\n<p><strong>生成</strong></p>\n<ul>\n<li>\n<p>阵列</p>\n</li>\n<li>\n<p>倒角</p>\n</li>\n<li>\n<p>布尔</p>\n</li>\n<li>\n<p>精简</p>\n</li>\n<li>\n<p>多级精度/表面细分</p>\n</li>\n</ul>\n<p><strong>形变</strong></p>\n<ul>\n<li>\n<p>置换</p>\n</li>\n<li>\n<p>缩裹</p>\n</li>\n</ul>\n<h3>动画模式</h3>\n<hr>\n<p>物体任何属性都可添加关键帧：</p>\n<ul>\n<li>\n<p>黄色：属性有动画且当前帧为关键帧</p>\n</li>\n<li>\n<p>绿色：属性有动画且当前帧非关键帧</p>\n</li>\n<li>\n<p>灰色：属性没有动画</p>\n</li>\n</ul>\n<p>骨骼动画在选中骨骼进入姿势模式后再K帧</p>\n<h1>Sass基础</h1>\n<p>Sass也好Less也好，总还是要学习一个的，虽然自己平时整的小东西可能还是直接用CSS还更简单，但是要是项目大了以及要考虑便于维护的情况下，那还是得用这两的啦。</p>\n<h3>变量</h3>\n<p>Sass用<code class=\"language-text\">$</code>符来标识变量（‘$’向来是兵家必争之地啊2333），Sass中的变量值可以是任何CSS中的标准属性值（什么#FFF、solid、100px等等），值与变量名之间用’:‘冒号分隔，作用域则类似使用let声明(块之外定义即相当于全局变量) ,变量也可以引用其他变量,且变量可以和CSS的属性名或选择器名称相同，变量名相同后者覆盖前者，可以使用尾缀!default设定默认值，使用!important在局部声明全局变量 ：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$testColor</span></span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//全局</span>\n<span class=\"token selector\">.test </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\"><span class=\"token variable\">$width</span></span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//局部</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$width</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$testColor</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//即相当于：</span>\n\n<span class=\"token selector\">.test </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>嵌套</h3>\n<p>这个比较实用啊：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$testColor</span></span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>    \n<span class=\"token selector\">.test </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">p </span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$testColor</span><span class=\"token punctuation\">}</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$testColor</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//即相当于：</span>\n\n<span class=\"token selector\">.test </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.test p</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然还支持嵌套嵌嵌套，嵌套的同级还可以写当级的普通CSS样式，非常好使。但是有些情况这招就不好使了：比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$testColor</span></span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>    \n<span class=\"token selector\">.test a</span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">:hover </span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">}</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$testColor</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这时候是希望在.test后的a链接添上hover伪类，但是这么写就变成了a标签之后的所有子元素填上伪类了。要是普通的css我们这时候其实只要写：.test a:hover就完事了，但是这样就还得重复的多写一遍.test a{…}，所以这时候就得用&#x26;符号了，这个符号表示父选择器（虽然叫父级选择器，但是其实就是代表当前层级的选择器）：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$test</span></span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.test a</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$test</span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover</span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//就相当于</span>\n<span class=\"token property\"><span class=\"token variable\">$test</span></span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token selector\">.test a</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$test</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.test a:hover</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是&#x26; 必须出现在的选择器的开头位置（作为选择器的第一个字符），可以跟随后缀（因为编译时遇到&#x26;会直接替换）。</p>\n<p>嵌套特性还可以结合群组选择器(子级选择器和同级选择器也是一样的)减少重复的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.test #p1,.test #p2,.test #p3 </span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//就可以这么写：</span>\n<span class=\"token selector\">.test </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">#p1,#p2,#p3 </span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n    <span class=\"token selector\">对于CSS的属性也可以缩写从而减少代码量：\n.test </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">border: 1px solid #ccc </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//相当于：</span>\n\n<span class=\"token selector\">.test </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #ccc<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>@import</h3>\n<p>这个@import之前我都没见到用到过。。。可以在执行到@import时导入其他的CSS，Sass进行了优化，在编译的时候就把需要导入的文件导入打包，并且可以省略尾缀来导入，但是导入后不会全局有效（.css=>.scss）。</p>\n<h3>注释</h3>\n<p>Sass支持CSS标准的/<em>…</em>/注释和//，但是默认情况下后者在打包的时候不会出现在生成的CSS文件中。</p>\n<h3>混合器</h3>\n<p>混合器使用@mixin标识符定义，通过@include来使用，便于处理重复的统一样式：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$test</span></span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">@mixin</span> <span class=\"token selector\">test</span><span class=\"token punctuation\">{</span>    <span class=\"token comment\">//名称</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$test</span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover</span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.test a</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@include</span> test<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>混合器不仅可以包含普通属性，也可以包含CSS的各种选择器，结合&#x26;更是强的不行，是不是有种像函数的错觉？还没完，还可以传参！用@include调用的时候可以穿参数，这不就是function嘛- -：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@mixin</span> <span class=\"token function\">link-colors</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$normal</span>, <span class=\"token variable\">$hover</span>, <span class=\"token variable\">$visited</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$normal</span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$hover</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:visited </span><span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$visited</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">a </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@include</span> <span class=\"token function\">link-colors</span><span class=\"token punctuation\">(</span>blue, red, green<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//或者指定传参数值：</span>\n<span class=\"token selector\">a </span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">@include</span> <span class=\"token function\">link-colors</span><span class=\"token punctuation\">(</span>\n      <span class=\"token property\"><span class=\"token variable\">$normal</span></span><span class=\"token punctuation\">:</span> blue,\n      <span class=\"token property\"><span class=\"token variable\">$visited</span></span><span class=\"token punctuation\">:</span> green,\n      <span class=\"token property\"><span class=\"token variable\">$hover</span></span><span class=\"token punctuation\">:</span> red\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//Sass最终生成的是：</span>\n\n<span class=\"token selector\">a </span><span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">a:hover </span><span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">a:visited </span><span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//类似ES6，还可以在定义参数的时设定默认值</span>\n<span class=\"token keyword\">@mixin</span> <span class=\"token function\">link-colors</span><span class=\"token punctuation\">(</span>\n    <span class=\"token variable\">$normal</span>,\n    <span class=\"token property\"><span class=\"token variable\">$hover</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$normal</span>,<span class=\"token comment\">//默认就为$normal的值</span>\n    <span class=\"token property\"><span class=\"token variable\">$visited</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$normal</span><span class=\"token comment\">//这样即使只传一个参数也可以</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$normal</span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:hover </span><span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$hover</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>:visited </span><span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$visited</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>选择器继承</h3>\n<p>选择器继承即一个选择器可以继承另一个选择器下定义的所有样式。</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.error </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fdd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.seriousError </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@extend</span> .error<span class=\"token punctuation\">;</span><span class=\"token comment\">//继承</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//就相当于：</span>\n<span class=\"token selector\">.seriousError </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fdd<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>挺好用的对吧，麻烦的还没说呢：@extend .error后任何和.error有关的组合选择器也会被.seriousErro以组合选择器的形式继承，也就是拖家带口的全和你扯上关系了：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.error a</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">//也会应用到.seriousError a    </span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">h1.error </span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//同样也会应用到hl.seriousError</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以这个继承可不能随便乱用，并且几乎所有的CSS规则都可以继承和被继承，且当继承一个复杂的选择器的时候继承的情况会乱七八糟。总的来讲，如果不出现在复杂的选择器里的话（情况会变复杂），选择器继承就相当于把样式表的任何一处.error都用.error .seriousError替换。</p>\n<h3>循环</h3>\n<p>比如可以省掉一个个资源import：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@for</span> <span class=\"token variable\">$i</span> <span class=\"token keyword\">from</span> 0 <span class=\"token keyword\">through</span> <span class=\"token selector\">29 </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>.testIcon<span class=\"token variable\">#{$i}</span> </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url</span><span class=\"token punctuation\">(</span>~xxxx_<span class=\"token variable\">#{$i}</span>.png<span class=\"token punctuation\">)</span> no-repeat center<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 100% auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>​</p>\n<h2>CSS常见问题集合</h2>\n<p>丢了CSS一段时间后突然拿起来用发现一下懵圈了。。。一些原来很基本的问题都忘完了。。把遇到的问题记一下，捡一捡吧。。</p>\n<h5>层级问题</h5>\n<iframe width=\"100%\" height=\"420\" src=\"https://code.h5jun.com/junor/3/edit?html,css,output\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<p>相关：<a href=\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\">层级</a>、<a href=\"https://www.zhangxinxu.com/wordpress/2011/08/css%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%BA%94%E4%B9%8Bz-index%E7%AF%87/\">z-index</a></p>\n<h5>图片文字垂直居中</h5>\n<iframe width=\"100%\" height=\"420\" src=\"https://code.h5jun.com/junor/1/edit?html,css,output\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<p>相关：<a href=\"https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\">这里</a></p>\n<h5>多行文本与单行文本垂直居中</h5>\n<iframe width=\"100%\" height=\"420\" src=\"https://code.h5jun.com/junor/2/edit?html,css,output\" allowpaymentrequest allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n<h1>Flex布局基础</h1>\n<p>传统的布局方案，无非就是position(或者float、fixed)结合方向定位以及display等来整，一来比较复杂容易乱，二来对于一些复杂的布局实现起来会有困难。而flex的出现大大简化了这一过程，所以以后一般能用flex布局的尽量全改用flex布局来整（现代浏览器都已支持）</p>\n<h4>基本概念</h4>\n<p>Flex即弹性布局(Flexible Box)，父元素设置为flex布局后，子元素会自动成为其item，并且子元素的float、clear和vertical-align属性都会失效。</p>\n<p><strong>理解flex最重要的个人觉得就是理解主轴(X轴)和副轴(Y轴)啦</strong>,设想有了x和y轴，在二维(即平面)中还有什么布局是不能实现的呢？当然，也会有一些特殊的布局要求（比如倒序等等），这些再结合flex容器的一些属性，那么也是非常轻松的解决了</p>\n<h2>属性</h2>\n<h3>容器(Box)属性</h3>\n<p>1.Flex-direction</p>\n<p>该属性用于设置item的排列方向：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span>\n<span class=\"token function\">row</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span>：主轴为水平，起点为左端\n<span class=\"token property\">row-reverse</span><span class=\"token punctuation\">:</span> 主轴为水平，起点为右端\ncolumn：主轴为垂直，起点为上端\ncolume-reverse：主轴为垂直，起点为下端</code></pre></div>\n<p>2.Flex-wrap</p>\n<p>该属性设置当单行轴线容纳不下时的换行方式</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span>\n<span class=\"token function\">nowrap</span><span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>不换行<span class=\"token punctuation\">(</span>最多压缩到最小宽度<span class=\"token punctuation\">)</span>\n<span class=\"token property\">wrap</span><span class=\"token punctuation\">:</span>换行\n<span class=\"token property\">wrap-reverse</span><span class=\"token punctuation\">:</span>换行,但是第一行在下面</code></pre></div>\n<p>3.Justify-content</p>\n<p>该属性定义item在主轴上的对齐方式（与轴的方向挂钩）</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span>\n<span class=\"token function\">flex-start</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span>：item们左对齐\nflex-end：item们右对齐\ncenter： item们居中对齐\nspace-between：item们两端到顶，剩下的间隔均分在每个item之间。\nspace-around：每个item两侧的间隔相等,可以理解为每个item的边距都相等（均分空隔）</code></pre></div>\n<p>4.Align-items</p>\n<p>该属性自然就是定义副轴上的对齐方式了(也与轴的方向同步)</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span>\n<span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span>：item们会按容器的高度拉伸<span class=\"token punctuation\">(</span>填满<span class=\"token punctuation\">)</span>。\nflex-start：item们顶对齐。\nflex-end：item们底对齐。\ncenter：item们中心对齐。\n<span class=\"token property\">baseline</span><span class=\"token punctuation\">:</span> item们基线对齐。//TODO</code></pre></div>\n<p>5.Align-center</p>\n<p>该属性定义多根轴线(各个轴线不同设置但都听它的)的对齐方式(单轴线则此属性无效)</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">align-center</span><span class=\"token punctuation\">:</span>\n<span class=\"token function\">stretch</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span>：轴线按副轴进行拉伸<span class=\"token punctuation\">(</span>填满<span class=\"token punctuation\">)</span>。\nflex-start：按副轴的起点对齐。\nflex-end：按副轴的终点对齐。\ncenter：按副轴的中点对齐。\nspace-between：以副轴两端到顶，轴线之间的间隔平均分布。\nspace-around：每条轴线两侧的间隔都相等。</code></pre></div>\n<p>6.Flex-flow</p>\n<p>该属性就是flex-direction和flex-wrap的简写形式(以空格隔开)</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">row <span class=\"token function\">nowrap</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Item的属性</h3>\n<p>1.order</p>\n<p>该属性定义item的排列顺序。数值越小越靠前(可以为负数，同级按排列顺序分先后)</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">order</span><span class=\"token punctuation\">:</span>0    <span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span></code></pre></div>\n<p>2.flex-grow</p>\n<p>该属性定义item放大几倍</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span>0    <span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span><span class=\"token comment\">/*即不放大*/</span></code></pre></div>\n<p>3.flex-shrink</p>\n<p>该属性定义item缩小几倍</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span><span class=\"token function\">1</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span><span class=\"token comment\">/*即不放缩小*/</span></code></pre></div>\n<p>4.flex-basis</p>\n<p>该属性定义item占据主轴的多少(px),这样item就可以占据固定的空间了(剩下的空间再其他item再按设定的属性分)</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span><span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span></code></pre></div>\n<p>5.flex</p>\n<p>该属性是flex-grow, flex-shrink 和 flex-basis的简写</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">flex</span><span class=\"token punctuation\">:</span>0 1 <span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span><span class=\"token comment\">/*后两个属性可选，一般优先使用该属性而不是分开写*/</span></code></pre></div>\n<p>6.align-self</p>\n<p>该属性用于单个item设置其特殊的对齐方式(覆盖align-item的设置)是flex-grow, flex-shrink 和 flex-basis的简写</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span><span class=\"token function\">auto</span><span class=\"token punctuation\">(</span>defalut<span class=\"token punctuation\">)</span></code></pre></div>\n<h1>Git常用指令</h1>\n<p>用过一段时间的Github客户端，感觉确实是简单粗暴有效，但是缺点也很明显：用到一些高级或者说是复杂一些的功能时就无能为力了，并且使用命令行自己也知晓每一步都在干啥，所以使用命令行还是利大于弊的</p>\n<h4>Git基本命令</h4>\n<ul>\n<li>\n<p>git init/git clone 初始化git仓库</p>\n</li>\n<li>\n<p>git status 查看仓库的状态（没事就输下）</p>\n</li>\n<li>\n<p>git add xxx 然后git commit -m ‘test~‘进行提交</p>\n</li>\n<li>\n<p>git log 查看所有的commit记录</p>\n</li>\n<li>\n<p>git branch查看分支及所在分支情况（默认是主分支master），新建分支为git branch xxx。删除分支为git branch -d xxx，强制删除为git branch -D xxx（分支还没合并就想直接删除就得用这个）. 注意：find . -name “.git” | xargs rm -Rf 可以删除git仓库。</p>\n</li>\n<li>\n<p>git checkout xxx。切换到xxx分支。5和6可以一步到位：git checkout -b xxx，新建并切换分支。</p>\n</li>\n<li>\n<p>git merge xxx。把xxx分支合并过来（合并到你输入这行命令时你所在的分支，如果是要合并到master分支你首先就要切换到master分支下再输入这行命令）</p>\n</li>\n<li>\n<p>git tag V1.xxx。新建一个标签，便于版本切换。（也就相当于版本库的一个快照）.git tag V1.xxx commitId(默认的是把标签打到最新提交的commit上的，也可以像这样指定commitId来打tag)。git show tagname可以查看标签信息。还可以创建带有说明的标签：-a指定标签吗，-m指定说明文字：git tag -a v1.0 -m ‘test~~’。-d还可以删除标签，至于更复杂的就先不提了，用到了再说。</p>\n</li>\n</ul>\n<h4>Github</h4>\n<ul>\n<li>\n<p>Git/Github先配好SSH，之后：git remote add origin git@server-name:path/repo-name.git 关联一个远程库(后面的一串可以从github获得，origin是默认的名字)</p>\n</li>\n<li>\n<p>git pull origin master。将远程代码更新到本地，一般在push之前都先pull，这样不容易冲突。</p>\n</li>\n<li>\n<p>git push origin master。将本地代码推送到远程master分支。（第一次git push -u origin master推送master分支的所有内容）</p>\n</li>\n</ul>\n<h4>其他操作</h4>\n<ul>\n<li>\n<p>每次commit都会产生一条log，log记录提交者的姓名和邮箱，这两条信息时可以更改的：git config —global user.name ‘xxx’/git config —global user.email’xxx’.</p>\n</li>\n<li>\n<p>alias git config —global alias.xx xxxxx 可以进行简写。</p>\n</li>\n<li>\n<p>git config —global alias.lg “log —graph —pretty=format:‘%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&#x3C;%an>%Creset’ —abbrev-commit —date=relative” 之后输入git lg，重新排版的git log</p>\n</li>\n<li>\n<p>git config —global core.editor “vim” # 设置Editor使用vim（默认是Vi）</p>\n</li>\n<li>\n<p>git config —global color.ui true Git着色（好像默认就是着色的）</p>\n</li>\n<li>\n<p>git config —global core.quotepath false # 设置显示中文文件名</p>\n</li>\n<li>\n<p>git diff。查看修改的内容（以Unix同样的diff格式显示），直接输入git diff只能显示当前文件和暂存区文件的差别（也就是没有执行git add的文件），当然也还可以有其他的比较用法：git diff &#x3C;$id1> &#x3C;$id2>比较两次commit之间的差异、git diff <branch1> <branch2>比较两个分支之间差异、git diff —staged 比较暂存区和版本库之间的差异。</p>\n</li>\n<li>\n<p>git checkout — index.html(这个—怎么有没有都可以啊？？)。checkout除了切换分支还有个作用是撤销（即使是文件删除了也可以撤销回来），对于还没有进行git add的更改，可以使用checkout进行撤销改动，直接把文件还原(若是已经add了的，则用：git reset HEAD index.html)。</p>\n</li>\n<li>\n<p>git stash。将当前分支还没有commit的代码先暂存起来，这个时候git status就啥也没了，git stash list可以查看暂存的记录。这时候你就可以在源代码上直接修改并发布啥的而不用删除最开始写在上面的代码了。git stash apply即可还原代码，git stash drop删掉stash记录，就当一切都没有发生过。一部到位的是git stash pop可以代替apply和drop。git stash clear是直接清空。</p>\n</li>\n<li>\n<p>merge/rebase，两者都是合并，前者便于分清楚合并来源，后者按顺序重新排序整理改动，但是自然也就很难清晰的知道合并来源了。</p>\n</li>\n<li>\n<p>git commit -a —allow-empty-message -m ” 提交的时候输入空的说明。这个哈哈哈哈老爽了（客户端本来默认是必要参数）</p>\n</li>\n</ul>\n<h4>版本回退</h4>\n<ul>\n<li>\n<p>git lg显示出所有从开始道现在的所有commit记录，有了commitId在各个版本之间就可以随意串行了。</p>\n</li>\n<li>\n<p>git reset —hard。HEAD 回退到上一个版本</p>\n</li>\n<li>\n<p>git reflag。记录每一次的命令，可以看到之前版本的commitId，免得回到上一个版本之后回不去了（git log不会只会显示之前的版本信息）</p>\n</li>\n<li>\n<p>git reset —hard xxxxx。通过commitId就可以在任意版本之间自由切换了，这里commitId也不用输全，输个几位git自己就找到了。</p>\n</li>\n<li>\n<p>没git add可以git checkout撤销，git add了还可以git reset — file把暂存区的修改退回工作区，git commit了也还可以git reset —hard xxxxx进行版本回退，但是要是你git push到远程仓库了，那就只能gg了。</p>\n</li>\n</ul>\n<h1>正则表达式基础</h1>\n<blockquote>\n<p>正则表达式是用于匹配字符串中字符组合的模式。嗷嗷有用。在 JavaScript中，正则表达式也是对象。</p>\n</blockquote>\n<p>这些模式被用于 RegExp的</p>\n<ul>\n<li>\n<p>exec()（一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。）</p>\n</li>\n<li>\n<p>test() （一个在字符串中测试是否匹配的RegExp方法，它返回true或false。）。</p>\n</li>\n</ul>\n<p>以及 String 的</p>\n<ul>\n<li>\n<p>match()（一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。）</p>\n</li>\n<li>\n<p>replace()（一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。）</p>\n</li>\n<li>\n<p>search()（一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。）</p>\n</li>\n<li>\n<p>split() （一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。）</p>\n</li>\n</ul>\n<h3>创建正则表达式</h3>\n<p>在JavaScript中可以通过两种方法来创建一个正则表达式：</p>\n<p>1.使用一个正则表达式字面量</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>pattern<span class=\"token operator\">/</span>flags<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/ab+c/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^[a-zA-Z]+[0-9]*\\W?_$/gi</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>2.调用RegExp对象的构造函数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pattern\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"flags\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab+c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>\\<span class=\"token constant\">W</span><span class=\"token operator\">?</span>_$<span class=\"token punctuation\">,</span> <span class=\"token string\">\"gi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^[a-zA-Z]+[0-9]*\\W?_$\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中的flags代表正则表达式标志，正则表达式有四个可选参数进行全局和不分大小写搜索。这些参数既可以单独使用也可以一起使用在任何顺序和包含正则表达式的部分中。</p>\n<ul>\n<li>\n<p>g：全局搜索</p>\n</li>\n<li>\n<p>i：不区分大小写搜索</p>\n</li>\n<li>\n<p>m：多行搜索</p>\n</li>\n<li>\n<p>y：/y标识让一个未锚定的正则只在目标字符串的当前位置匹配成功或匹配失败./g或其他东西也会影响当前位置具体在哪里.但比起其他因素,/y是完全独立的(更底层)…(粘滞的意思就是”使用隐式的^锚点把正则锚定在了lastIndex所指定的偏移位置处”)</p>\n</li>\n</ul>\n<h3>简单的模式匹配</h3>\n<p>1.匹配字符串字面值</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> val <span class=\"token operator\">=</span> <span class=\"token string\">\"LG\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/LG/</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//就是简单的用字符串字面量查找</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'验证通过'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'验证未通过'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>2.匹配数字</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\\d\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">[</span><span class=\"token number\">0123456789</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">//虽然语法不一样，但是效果是一样的</span></code></pre></div>\n<p>3.匹配非数字</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\\<span class=\"token constant\">D</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">^</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token operator\">^</span>\\d<span class=\"token punctuation\">]</span></code></pre></div>\n<p>4.匹配单词和非单词</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\\w    <span class=\"token comment\">// \\w只匹配字母数字和下划线  \\D还会匹配空格、标点符号等字符  \\w在英语环境下相当于 [_a-zA-Z0-9]</span>\n\\<span class=\"token constant\">W</span>    <span class=\"token comment\">// \\W匹配非单词字符 相当于[^_a-zA-Z0-9]</span></code></pre></div>\n<p>5.匹配空白符</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\\s    <span class=\"token comment\">// \\s相当于 [ \\t\\n\\r] 也就是说\\s会匹配空格、制表符、换行符、回车符 (不匹配换页符（\\f）、水平空白符（\\h）等特殊的空白字符)</span>\n\\<span class=\"token constant\">S</span></code></pre></div>\n<p>6.匹配任意字符</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span>    <span class=\"token comment\">//单个点号匹配任意字符</span>\n<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>    <span class=\"token comment\">//匹配零个或者多个字符</span></code></pre></div>\n<h3>边界</h3>\n<p>1.行的起始和结束</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">^</span>    <span class=\"token comment\">//^会匹配行或者字符串的起始位置</span>\n$    <span class=\"token comment\">//$会匹配行或者字符串的结束位置</span>\n举个例子：\n<span class=\"token keyword\">var</span> val <span class=\"token operator\">=</span> <span class=\"token string\">\"LGdsadsadEnd.end\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/^LG.*End\\.end$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'验证通过'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'验证未通过'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>2.单词边界与非单词边界</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\\b    <span class=\"token comment\">//\\b匹配单词边界  比如\\bLG\\b \\b和^与$一样是个零宽度断言</span>\n\\<span class=\"token constant\">B</span>    <span class=\"token comment\">//匹配非单词边界</span></code></pre></div>\n<p>3.\\A和\\Z匹配主题词的起始和结束（？？？）</p>\n<p>4.使用元字符的字面值</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token constant\">Q</span>和\\<span class=\"token constant\">E</span>之间的任意字符都会被解释为普通字符\n\\<span class=\"token constant\">Q</span>$\\<span class=\"token constant\">E</span>    <span class=\"token comment\">//会匹配$  （其实也可以在$前加\\进行转义也是可以的）  //测试这个\\Q和\\E在JavaScript正则并不好使，还是用\\进行转义吧</span></code></pre></div>\n<h4>选择、分组和后向引用</h4>\n<p>1.选择操作</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>the<span class=\"token operator\">|</span>The<span class=\"token operator\">|</span><span class=\"token constant\">THE</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//其实直接设置flag为i，即可忽略大小写的区别了j</span></code></pre></div>\n<p>2.子模式</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//其实(the|The|THE)也算是三个模式，但是这种情况下匹配第二个子模式不依赖于是否匹配第一个</span>\n<span class=\"token punctuation\">(</span>t<span class=\"token operator\">|</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">|</span>eir<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//这个情况第二个子模式(e|eir)就依赖于第一个子模式（tT）,它会匹配the The their Their</span>\n\\b<span class=\"token punctuation\">[</span>tT<span class=\"token punctuation\">]</span>h<span class=\"token punctuation\">[</span>ceintry<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>\\b    <span class=\"token comment\">//则匹配the thee thy等单词</span></code></pre></div>\n<p>3.捕获分组和后向引用</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">一个正则表达式模式使用括号，将导致相应的子匹配被记住。例如，<span class=\"token operator\">/</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>c <span class=\"token operator\">/</span>可以匹配字符串“abc”，并且记得“b”。回调这些括号中匹配的子串使用数组元素<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>……<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w+)\\s(\\w+)/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"John Smith\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">\"$2, $1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//[1]、\\1都不好使</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这个表达式输出 \"Smith, John\"。</span></code></pre></div>\n<p>4.非捕获分组</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//不需要任何后向引用时</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//匹配x但是不记住匹配项</span></code></pre></div>\n<h4>字符组</h4>\n<p>字符组就是[]，也叫方括号表达式。使用字符组可以匹配某个范围的字符：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span>、<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>\\w\\s<span class=\"token punctuation\">]</span>    <span class=\"token comment\">//匹配空格和单词字符  等同于[_a-zAA-Z \\t\\n\\r]</span></code></pre></div>\n<p>1.字符组取反</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span>a<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span>    <span class=\"token comment\">//^在字符组里的意义为取反</span></code></pre></div>\n<p>2.并集与差集</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">//匹配0到3之间的数字或者6到9之间的数字     //测试JavaScript不支持</span>\n<span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>z<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">[</span><span class=\"token operator\">^</span>m<span class=\"token operator\">-</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">//匹配a到z之间的字符，但是其中m到r之间的字符除外    //测试JavaScript不支持</span></code></pre></div>\n<h4>量词</h4>\n<p>1.贪心、懒惰和占用</p>\n<p>量词自身是贪心的。贪心的量词会首先匹配整个字符串。尝试匹配时，它会选定尽可能多的内容，也就是整个输入量词首次尝试匹配整个字符串，如果失败则回退一个字符后再尝试。这个过程叫做回溯。它会每次回退一个字符，直到找到匹配的内容或者没有字符可尝试了为止。懒惰的量词则使用另一种策略，它从目标的起始位置开始尝试寻找匹配，每次检查字符串的一个字符，寻找它要匹配的内容。最后它会尝试匹配整个字符串。占有量词会覆盖整个目标然后尝试寻找匹配内容，但是它只尝试一次，不会回溯。</p>\n<p>2.用*、+、？进行匹配（基本量词）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>    <span class=\"token comment\">//它会以贪心的方式匹配主文本中的所有字符 正则表达式之后加*表示该正则表达式所匹配的文本接连出现任意次（包括零次）</span>\n<span class=\"token number\">9</span><span class=\"token operator\">+</span>    <span class=\"token comment\">//+和*的区别在于+会寻找至少一个9，而*会寻找零个或者多个9</span>\n<span class=\"token number\">9</span>？    <span class=\"token comment\">//匹配零次或一次</span></code></pre></div>\n<p>3.匹配特定次数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">7</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>    <span class=\"token comment\">//使用花括号可以限制某个模式在某个范围内匹配的次数，未经修饰的量词就是贪心量词。 会匹配第一次出现的7</span>\n<span class=\"token number\">7</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>    <span class=\"token comment\">//匹配一个或者多个7    相当于7+    同理7{0,}和7*也是相同的、7{0,1}和7？是相同的  还可以m到n次：7{3,5}匹配3到5个7</span></code></pre></div>\n<p>4.懒惰量词</p>\n<p>如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪的（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">9</span><span class=\"token operator\">+</span>    <span class=\"token comment\">//匹配一个或者多个9</span>\n<span class=\"token number\">9</span><span class=\"token operator\">+</span><span class=\"token operator\">?</span>    <span class=\"token comment\">//变懒了，只匹配一个    //加了黑人问号（?）都变懒了，能不干就不干（匹配最少）</span>\n\n<span class=\"token number\">9</span>？    <span class=\"token comment\">//匹配零次或一次</span>\n<span class=\"token number\">9</span>？？    <span class=\"token comment\">//变懒了，一个都不匹配了</span></code></pre></div>\n<p>5.占用量词</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">0.</span><span class=\"token operator\">*</span><span class=\"token operator\">+</span>    <span class=\"token comment\">//000xxx  可以匹配到，和贪婪好像一样</span>\n<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">+</span><span class=\"token number\">0</span>    <span class=\"token comment\">//000xxx  不可以匹配到，因为不会回溯，一下就选定了所有输入，第一下没找到就不找了。</span></code></pre></div>\n<p>JavaScript正则表达式没有占有模式，只有贪婪和非贪婪（懒惰）模式，占有模式反而会报错。\n很多其他语言支持的正则表达式功能在JavaScript中不支持。\n​</p>","fields":{"slug":"/sass/","prefix":"2017-07-11"},"frontmatter":{"title":"基础备忘汇总","author":"todaylg","category":"基础备忘","cover":{"childImageSharp":{"resize":{"src":"/static/bg-3b698becc063f67c561f255394c06560-ada8c.jpg"}}}}},"authornote":{"id":"20cdfd79-00b3-57fb-a29f-bb96dcd133a8","html":"<p><strong>todaylg</strong> </p>"},"site":{"siteMetadata":{"facebook":{"appId":""}}}},"pageContext":{"slug":"/sass/","prev":{"id":"f7f5ecf8-d684-5231-bc06-b09087e46e03","fields":{"slug":"/http/","prefix":"2017-06-25","source":"posts"},"frontmatter":{"title":"《图解HTTP》读书笔记","category":"读书流水"}},"next":{"id":"b04523b8-64ef-540b-b6a8-775bc37c8064","fields":{"slug":"/svg-outlineAnimation/","prefix":"2017-09-28","source":"posts"},"frontmatter":{"title":"SVG动画制作小结","category":"小结"}},"source":"posts"}}