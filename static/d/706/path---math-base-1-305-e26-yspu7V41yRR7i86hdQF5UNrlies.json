{"data":{"post":{"id":"b8aed044-582f-5d11-9517-c4fab217d955","html":"<p>学习的过程中深感自己的地基不够牢固，决定补习巩固一波基础知识。</p>\n<p>这本书涵盖了图形学相关的各方面数学知识，希望通过阅读这本书籍能补回丢掉的数学知识，也可以提高自己英语书籍的<del>疯狂查词典</del>阅读能力。</p>\n<p>本着实践为主的目的，尽量能实践的就搂个Example，慢慢整吧～</p>\n<p>公式编辑使用<a href=\"https://blog.csdn.net/qingdujun/article/details/80805613\">LateX</a>，在线预览可在<a href=\"https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn\">这里</a>，养成好习惯从现在开始，强烈推荐。</p>\n<h2>Chapter 1：渲染管线</h2>\n<p>首先复习一波最重要的渲染管线（From：RTR4）：</p>\n<p>定义：给定虚拟摄像机、三维物体、光源等的条件下，生成或者渲染出一幅二维图像的过程。</p>\n<p>阶段划分：</p>\n<ul>\n<li>\n<p>应用程序阶段(Application) ：开发者能够完全控制的阶段，通常在此阶段实现视椎体裁剪、碰撞检测、输入检测、加速算法、动画等。</p>\n</li>\n<li>\n<p>几何处理阶段(Geometry Processing)</p>\n</li>\n<li>\n<ul>\n<li>\n<p>顶点处理（不同坐标系的转换）</p>\n</li>\n<li>\n<p>图元装配（顶点组成图元）</p>\n</li>\n<li>\n<p>裁剪（对图元进行视体裁剪，舍弃无法成像的图元）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>光栅化阶段(Rasterization)：由图元输出片元，三维顶点转二维像素</p>\n</li>\n<li>\n<ul>\n<li>\n<p>三角形设定阶段(Triangle Setup)：计算三角形表面到差异和三角形表面到其他相关数据</p>\n</li>\n<li>\n<p>三角形遍历阶段(Triangle Traversal)：进行逐像素检查操作，找到哪些采样点或者像素位于三角形中到过程</p>\n</li>\n</ul>\n</li>\n<li>\n<p>像素处理阶段(Pixel Processing)</p>\n</li>\n<li>\n<ul>\n<li>\n<p>像素着色(Pixel Shading)：所有逐像素的着色计算都在像素着色阶段进行</p>\n</li>\n<li>\n<p>融合阶段(Merging)：合成当前缓冲区中由之前的像素着色阶段产生的信息（颜色/深度/Alpha/模板/帧缓存）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>图形处理</h3>\n<p>OpenGL支持绘制的图元有10种：</p>\n<ul>\n<li>\n<p>Points</p>\n</li>\n<li>\n<p>Lines、Line Strip、Line Loop</p>\n</li>\n<li>\n<p>Triangles、Triangle Strip、Triangle Fan</p>\n</li>\n<li>\n<p>Quads、Quad Strip、Polygon</p>\n</li>\n</ul>\n<p>WebGL只支持其中的7种图元（除开Quads、Quad Strip、Polygon）</p>\n<p><strong>CPU与GPU间的通信：</strong></p>\n<p>CPU => App（Rendering Commands） => OpenGL/DX => Graphics Driver （Command Buffer）=> GPU</p>\n<p><strong>CPU内存与GPU内存的通信</strong></p>\n<p>CPU内存 => Vertex/Texture Data、Shader Parameters => GPU内存 VRAM(Video Random Access Memory)，存储例如Image Buffer、Depth/Stencil Buffer、Texture Maps、Vertex Buffers等数据，并支持front/back buffer swap</p>\n<h3>顶点变换</h3>\n<p>坐标空间：</p>\n<ul>\n<li>\n<p>局部空间(Local Space/Object Space)：局部坐标是对象相对于局部原点的坐标</p>\n</li>\n<li>\n<p>世界空间(World Space)：世界空间坐标相对于世界的全局原点</p>\n</li>\n<li>\n<p>观察空间(View Space/Eye Space)：使每个坐标都是从摄像机角度进行观察得到的</p>\n</li>\n<li>\n<p>裁剪空间(Clip Space)：裁剪坐标会被处理至-1.0到1.0的范围内，并判断哪些顶点将会出现在屏幕上</p>\n</li>\n<li>\n<p>屏幕空间(Window Space/Screen Space)：视口变换将位于-1.0到1.0范围的坐标变换到由glViewport函数所定义的坐标范围内</p>\n</li>\n</ul>\n<p>坐标变换：</p>\n<ul>\n<li>\n<p>模型(Model)矩阵：局部空间=>世界空间</p>\n</li>\n<li>\n<p>观察(View)矩阵：世界空间=>观察空间</p>\n</li>\n<li>\n<p>投影(Projection)矩阵：观察空间=>裁剪空间</p>\n</li>\n</ul>\n<p>MVP矩阵将Object Space转为齐次的Clip Space之后，最后经过视口变换（Viewport transform）最终转到 Window Space：</p>\n<ul>\n<li>\n<p>齐次的Clip Space中顶点需转换为NDC(Normalized Device Coordinates) 即x、y、z =>  [-1,1]</p>\n</li>\n<li>\n<p>最终的viewPort Transform将规范化坐标映射到视图所覆盖的像素坐标实际范围，z坐标映射到浮点范围 => [0,1]</p>\n</li>\n</ul>\n<h3>片元计算</h3>\n<p>片元集合了经过GPU计算的深度信息、插值后的顶点信息、插值后的UV坐标信息、像素本身的位置信息。</p>\n<p>Face Culling =>  Rasterization => Fragment Shading => Fragment Operations</p>\n<p><strong>Fragment Operations：</strong></p>\n<ul>\n<li>\n<p>像素所有权测试（pixel ownership test）：像素所有权测试只是确定片元是否位于当前可见的viewport区域内，比如其他窗口挡住了当前viewPort的一部分的情况，此测试不可diable</p>\n</li>\n<li>\n<p>裁剪测试（scissor test）：应用程序可以在视图端口中指定一个矩形，称为剪切矩形，任何落在剪切矩形外的碎片都将被丢弃。</p>\n</li>\n<li>\n<p>透明度测试（alpha test）：alpha测试将片段的最终alpha值与应用程序预先设置的常量值进行比较</p>\n</li>\n<li>\n<p>模板测试（stencil test）：根据模板缓冲的值决定是否通过</p>\n</li>\n<li>\n<p>深度测试（depth test）：比对当前片元的深度值与深度缓冲中的深度值</p>\n</li>\n<li>\n<p>混合（Blending）：当所有的测试通过后，片元的最终颜色经过混合（Blending）最终输出到 Image Buffer。Blending操作会通过结合当前片元的最终颜色和片段所在位置的图像缓冲区中已经存储的颜色来计算新的颜色（可以实现透明度效果之类的效果），Alpha值也是如此。</p>\n</li>\n</ul>\n<h2>Chapter 2：向量</h2>\n<h3>点乘</h3>\n<p><strong>点乘公式：</strong></p>\n<p>$$\nP \\cdot Q = \\sum<em>{i=1}^{n}P</em>{i}Q_{i}\n$$</p>\n<p>$$\nP \\cdot Q = |P||Q|cos(\\alpha)\n$$</p>\n<p><strong>证明过程：</strong></p>\n<p>由三角函数公式：</p>\n<p>$$\nc^2 = a^2+b^2-2abcos(\\alpha)\n$$</p>\n<p>可得：</p>\n<p>$$\n|P - Q |^{2}= \\left | P \\right |^{2}+\\left | Q \\right |^{2}-2\\left | P \\right |\\left | Q \\right |cos\\left [ \\alpha  \\right ]\n$$</p>\n<p>化简即可得。</p>\n<p><strong>常用作用：</strong></p>\n<p>1.点乘结果正负表示两个向量的相对方向</p>\n<ul>\n<li>\n<p>PQ = 0 : 二者互相垂直</p>\n</li>\n<li>\n<p>PQ > 0 : 二者同向</p>\n</li>\n<li>\n<p>PQ > 0 : 二者反向</p>\n<p>2.点乘结果表明两个向量角度的接近程度 （即cos(a)的大小）</p>\n</li>\n</ul>\n<p><strong>向量投影</strong></p>\n<p>P在Q上的投影(projection)向量：</p>\n<p>$$\n{proj_{Q}}^{P}= \\frac{P \\cdot Q}{|Q|}\\times \\frac {Q}{|Q|} =\\frac{P \\cdot Q}{|Q|^2}Q\n$$</p>\n<p>其中Q/|Q|代表Q向量的单位长度。</p>\n<p>向量相减可得垂线(perpendicular)向量：</p>\n<p>$$\n{perp<em>{Q}}^{P}= P - {proj</em>{Q}}^{P}  =P-\\frac{P \\cdot Q}{|Q|^2}Q\n$$</p>\n<h4>叉乘</h4>\n<p>叉乘公式：</p>\n<p>$$\nP\\times Q = \\langle P<em>{y}Q</em>{z}-P<em>{z}Q</em>{y}, P<em>{z}Q</em>{x}-P<em>{x}Q</em>{z}, P<em>{x}Q</em>{y}-P<em>{y}Q</em>{x} \\rangle\n$$</p>\n<p>$$\nP \\times Q = |P||Q|sin(\\alpha)\n$$</p>\n<p>也可写作：</p>\n<p>$$\nP\\times Q = \\begin{bmatrix}\n0 &#x26;-P<em>{z} &#x26;P</em>{y} \\</p>\n<p>P<em>{z} &#x26;0 &#x26;-P</em>{x} \\ </p>\n<p>-P<em>{y} &#x26;P</em>{x}  &#x26; 0</p>\n<p>\\end{bmatrix}\\begin{bmatrix}\nQ_{x}\\ </p>\n<p>Q_{y}\\ </p>\n<p>Q_{z}</p>\n<p>\\end{bmatrix}\n$$</p>\n<p>或伪行列式（好记）：</p>\n<p>$$\nP\\times Q = \\begin{vmatrix}\ni &#x26;j &#x26;k \\\nP<em>{x} &#x26;P</em>{y} &#x26;P<em>{z} \\\nQ</em>{x} &#x26;Q<em>{y} &#x26; Q</em>{z}\n\\end{vmatrix}\n$$</p>\n<p>其中i=(1,0,0)、j=(0,1,0)、k=(0,0,1)</p>\n<p><strong>常用作用：</strong></p>\n<p>叉乘返回垂直于两个向量的新向量，常用与求解表面法线。</p>\n<h4>向量空间</h4>\n<p><a href=\"https://www.zhihu.com/question/60689540\">施密特正交化</a>（暂时没有发现要用到施密特正交化的地方。。）</p>\n<h2>Chapter 3：矩阵</h2>\n<p><strong>矩阵相乘：</strong></p>\n<p>$$\n(FG)<em>{ij} = \\sum</em>{k=1}^{m}F<em>{ik}G</em>{kj}\n$$</p>\n<ul>\n<li>\n<p>列行：左列=右行为相乘前提条件</p>\n</li>\n<li>\n<p>行列：左i行 * 右j列 = Cij</p>\n</li>\n</ul>\n<p><strong>最简形矩阵条件：</strong></p>\n<ul>\n<li>\n<p>对于每一个非零行，最左边的非零项（前导项）为 1</p>\n</li>\n<li>\n<p>无零行在有零行之前</p>\n</li>\n<li>\n<p>前导项所在的列上不再有其他的非零项</p>\n</li>\n<li>\n<p>任意一对非零行i1，i2（i2>i1）对应的包含其前导项的列j1，j2需要满足j2>j1（即列位置在右方）</p>\n</li>\n</ul>\n<p><strong>初等行变换：</strong></p>\n<ul>\n<li>\n<p>交换矩阵的某两行</p>\n</li>\n<li>\n<p>矩阵的某一行乘以非零数</p>\n</li>\n<li>\n<p>将矩阵的某一行的倍数加到另一行</p>\n</li>\n</ul>\n<p><strong>初等变换化简矩阵步骤</strong></p>\n<ul>\n<li>\n<p>A.将第一列中最大数值（绝对值）的行交换至第一行</p>\n</li>\n<li>\n<p>B.将第一行的先导项化为1（乘系数）</p>\n</li>\n<li>\n<p>C.通过相乘相加第一列的方法将其他行的首个元素化为0</p>\n</li>\n<li>\n<p>D.继续将第二行的先导项化为1</p>\n</li>\n<li>\n<p>F.通过相乘相加第二列的方法将其他行的第二个元素化为0（包括第一行）</p>\n</li>\n<li>\n<p>G.如此循环</p>\n</li>\n</ul>\n<p><strong>求逆矩阵：</strong></p>\n<p>前提：含有全零行的矩阵不可逆</p>\n<ul>\n<li>\n<p>A.构造分块矩阵（A|E），E为单位阵 </p>\n</li>\n<li>\n<p>B.对矩阵（A|E）实施初等行变换，将其化为行最简形矩阵（即A=>E）</p>\n</li>\n<li>\n<p>C.如果A不能行等价于E，则A不可逆。若A能行等价于E，则A可逆，且E就行等价于A^-1 </p>\n</li>\n</ul>\n<p><strong>行列式</strong></p>\n<p>计算公式：</p>\n<p>$$\ndetM = \\sum<em>{i=1}^{n}M</em>{ik}C_{ik}(M)\n$$</p>\n<p>其中：</p>\n<p>$$\nC_{ij}(M) = (-1)^{i+j}detM^{{i,j}}\n$$</p>\n<p>M^{i,j}表示从矩阵M中去掉第i行和第j列后的矩阵。</p>\n<p>上面两个式子递归即可求得结果，比如2x2矩阵：</p>\n<p>$$\n\\begin{vmatrix}\na &#x26;b \\\nc &#x26;d\n\\end{vmatrix} = ad-bc\n$$</p>\n<p>3x3矩阵：</p>\n<p>$$\n\\begin{vmatrix}\na<em>{11} &#x26;a</em>{12} &#x26;a<em>{13} \\\na</em>{21} &#x26;a<em>{22} &#x26;a</em>{23} \\\na<em>{31} &#x26;a</em>{32} &#x26;a<em>{33} \\\n\\end{vmatrix} = a</em>{11}(a<em>{22}a</em>{33}-a<em>{23}a</em>{32})-a<em>{12}(a</em>{21}a<em>{33}-a</em>{23}a<em>{31})+a</em>{13}(a<em>{21}a</em>{32}-a<em>{22}a</em>{31})\n$$</p>\n<p>矩阵可逆的充分必要条件为：</p>\n<p>$$\ndetM \\neq 0\n$$</p>\n<p>方程组有非零解的充分必要条件是</p>\n<p>使用行列式计算逆矩阵的方法：</p>\n<p>$$\nG<em>{ij} = \\frac{C</em>{ij}(F)}{detF}\n$$</p>\n<p>初等行变换对行列式结果的影响：</p>\n<ul>\n<li>\n<p>交换两行 => 行列式结果取反</p>\n</li>\n<li>\n<p>行乘系数a => 行列式结果也乘系数a</p>\n</li>\n<li>\n<p>行与行之间相加对行列式结果没有影响</p>\n</li>\n</ul>\n<p><strong>特征值与特征向量：</strong></p>\n<p>n阶矩阵M，若数λ和n维非零列向量α使下列的关系式成立：</p>\n<p>$$\nM\\alpha = \\lambda \\alpha\n$$</p>\n<p>那么数λ称为矩阵M的<strong>特征值</strong>，非零向量α称为M对应于特征值λ的<strong>特征向量</strong>，比如：</p>\n<p>$$\nM\\alpha = \\begin{bmatrix}\n-1 &#x26;2 &#x26;0 \\\n0 &#x26;3 &#x26;0 \\\n2 &#x26;1 &#x26;-1 \\\n\\end{bmatrix}\\begin{bmatrix}\n1  \\\n2  \\\n1  \\\n\\end{bmatrix} = \\begin{bmatrix}\n3 \\\n6 \\\n3 \\\n\\end{bmatrix} = 3\\begin{bmatrix}\n1 \\\n2 \\\n1 \\\n\\end{bmatrix}\n$$</p>\n<p>那3就是矩阵M的特征值，α是M对应于特征值3的特征向量。</p>\n<p>将式子移到左边可得：</p>\n<p>$$\n(M-\\lambda I) \\alpha= 0\n$$</p>\n<p>α为非零向量的话，(M-λI)必须不可逆，即：</p>\n<p>$$\ndet(M-\\lambda I) = 0\n$$</p>\n<p>求得非零解λ后重新代入方程：</p>\n<p>$$\n(M-\\lambda I) \\alpha= 0\n$$</p>\n<p>即可求得特征向量α。</p>\n<p>举例说明，例如：</p>\n<p>$$\nM = \\begin{bmatrix}\n1 &#x26;1 \\\n3 &#x26;-1 \\\n\\end{bmatrix}\n$$</p>\n<p>矩阵M-λI即为：</p>\n<p>$$\nM-\\lambda I = \\begin{bmatrix}\n1-\\lambda &#x26;1 \\\n3 &#x26;-1-\\lambda \\\n\\end{bmatrix}\n$$</p>\n<p>可得：</p>\n<p>$$\ndet(M-\\lambda I) = (1-\\lambda)(-1-\\lambda)-3 = \\lambda ^2 -4 = 0\n$$</p>\n<p>所以矩阵M的特征值为λ1=2、λ2=-2。将其代入方程求特征向量可得：</p>\n<p>$$\n\\begin{bmatrix}\n3 &#x26;1 \\\n3 &#x26;1 \\\n\\end{bmatrix} \\alpha_{1} = \\begin{bmatrix}\n0 \\\n0 \\\n\\end{bmatrix}\n$$</p>\n<p>$$\n\\begin{bmatrix}\n-1 &#x26;1 \\\n3 &#x26;-3 \\\n\\end{bmatrix} \\alpha_{2} = \\begin{bmatrix}\n0 \\\n0 \\\n\\end{bmatrix}\n$$</p>\n<p>可求得特征向量α1与α2：</p>\n<p>$$\n\\alpha_{1} = \\begin{bmatrix}\n1 \\\n-3 \\\n\\end{bmatrix}\n$$</p>\n<p>$$\n\\alpha_{2} = \\begin{bmatrix}\n1 \\\n1 \\\n\\end{bmatrix}\n$$</p>\n<p><strong>对角化</strong></p>\n<p>如果V1,V2,…Vn是一个n×n矩阵M的线性无关特征向量，那么相似变换矩阵A可以表示为：</p>\n<p>$$\nA = \\begin{vmatrix}\nV<em>{1} &#x26;V</em>{2} &#x26;…&#x26;V_{n}\n\\end{vmatrix}\n$$</p>\n<p>相似对角化矩阵M为：</p>\n<p>$$\nA^{-1}MA = \\begin{vmatrix}\n\\lambda<em>{1} &#x26;0 &#x26;…&#x26;0\\\n0 &#x26;\\lambda</em>{2} &#x26;…&#x26;0\\\n… &#x26;… &#x26;…&#x26;…\\\n0 &#x26;0 &#x26;…&#x26;\\lambda_{n}\\\n\\end{vmatrix}\n$$</p>\n<p>其中λ1、λ2…λn为矩阵M的特征值。</p>\n<h2>Chapter 4：变换</h2>\n<p><strong>正交矩阵</strong></p>\n<p>正交矩阵的条件：</p>\n<p>$$\nM^{-1} = M^{T}\n$$</p>\n<p>正交矩阵保持其长度和角度，所以只受旋转和反射变换影响。？</p>\n<p><strong>平移(Translate)矩阵：</strong></p>\n<p>$$\n\\begin{bmatrix}\n1 &#x26;0 &#x26;0, &#x26;a \\\n0 &#x26;1 &#x26;0, &#x26;b \\\n0 &#x26;0 &#x26;1, &#x26;c \\\n0 &#x26;0 &#x26;0, &#x26;1 \\\n\\end{bmatrix}\n$$</p>\n<p><strong>缩放(Scale)矩阵：</strong></p>\n<p>$$\n\\begin{bmatrix}\na &#x26;0 &#x26;0, &#x26;0 \\\n0 &#x26;b &#x26;0, &#x26;0 \\\n0 &#x26;0 &#x26;c, &#x26;0 \\\n0 &#x26;0 &#x26;0, &#x26;1 \\\n\\end{bmatrix}\n$$</p>\n<p><strong>旋转(Rotation)矩阵：</strong></p>\n<p>首先求二维旋转矩阵，由球坐标系公式：</p>\n<p>$$\nx=rcos(\\varphi )\n\\space y = rsin(\\varphi )\n$$</p>\n<p>假设旋转的角度为θ，由三角函数正弦余弦公式可得：</p>\n<p>$$\n{x}’ = rcos(\\theta+\\varphi) = rcos(\\theta)cos(\\varphi)-rsin(\\theta)sin(\\varphi)\n$$</p>\n<p>$$\n{y}’ = rsin(\\theta+\\varphi) = rsin(\\theta)cos(\\varphi)+rcos(\\theta)sin(\\varphi)\n$$</p>\n<p>代入x、y可得：</p>\n<p>$$\n{x}’ = xcos(\\theta)-ysin(\\theta)\n$$</p>\n<p>$$\n{y}’ = xsin(\\theta)+ycos(\\theta)\n$$</p>\n<p>使用矩阵表示即为：</p>\n<p>$$\n\\begin{bmatrix}\n{x}’ \\\n{y}’ \\\n\\end{bmatrix} = \\begin{bmatrix}\ncos(\\theta) &#x26;-sin(\\theta)\\\nsin(\\theta) &#x26;cos(\\theta)\\\n\\end{bmatrix}\\begin{bmatrix}\n{x} \\\n{y} \\\n\\end{bmatrix}\n$$</p>\n<p>绕任意点的二维旋转可以通过级联两次位移矩阵计算（旋转点位移至原点 => 绕原点旋转 => 旋转点移回原位）</p>\n<p>通过齐次坐标引入绕三个轴的三维旋转矩阵：</p>\n<p>$$\nR_x(\\theta) = \\begin{bmatrix}\n1&#x26;0 &#x26;0\\\n0 &#x26;cos(\\theta)&#x26;-sin(\\theta)\\\n0&#x26;sin(\\theta) &#x26;cos(\\theta)\\\n\\end{bmatrix}\n$$</p>\n<p>$$\nR_y(\\theta) = \\begin{bmatrix}\ncos(\\theta) &#x26;0&#x26;-sin(\\theta)\\\n0&#x26;1 &#x26;0\\\n-sin(\\theta)&#x26;0 &#x26;cos(\\theta)\\\n\\end{bmatrix}\n$$</p>\n<p>$$\nR_z(\\theta) = \\begin{bmatrix}\ncos(\\theta) &#x26;-sin(\\theta)&#x26;0\\\nsin(\\theta)&#x26;cos(\\theta)&#x26;0\\\n0&#x26;0 &#x26;1\\\n\\end{bmatrix}\n$$</p>\n<p><strong>围绕任意轴的旋转：</strong></p>\n<p>有两种思路：</p>\n<ul>\n<li>\n<p>通过将旋转轴旋转到与X/Y/Z某一轴重合，再执行基本旋转，之后再执行反向旋转恢复旋转轴方向。</p>\n</li>\n<li>\n<p>计算旋转点在旋转轴上的平行和垂直分量，再分别计算分量绕A轴旋转角度后的所增加的分量</p>\n</li>\n</ul>\n<p>求点P绕任意轴A（单位向量，|A|=1）旋转的旋转矩阵：</p>\n<p>首先求得在轴A上的投影及垂线分量：</p>\n<p>$$\n{proj_{A}}^{P}= \\frac{P \\cdot A}{|A|}\\times \\frac {A}{|A|} = (A\\cdot P)A\n$$</p>\n<p>$$\n{perp<em>{A}}^{P}= P - {proj</em>{A}}^{P} =P-(A \\cdot P)A\n$$</p>\n<p>垂线分量（与A垂直）绕A旋转θ后的结果为：</p>\n<p>$$\n[P-(A \\cdot P)A]cos(\\theta) + (A \\times P)sin(\\theta)\n$$</p>\n<p>再加上A轴上的投影分量：</p>\n<p>$$\n{P}’ = A(A \\cdot P) + [P-(A \\cdot P)A]cos(\\theta) + (A \\times P)sin(\\theta) = Pcos(\\theta) + (A \\times P)sin(\\theta) + A(A \\cdot P)(1-cos(\\theta))\n$$</p>\n<p>最后代入前面的点乘叉乘的矩阵表示可得：</p>\n<p>$$\n{P}’ = \\begin{bmatrix}\n1&#x26;0 &#x26;0\\\n0 &#x26;1&#x26;0\\\n0&#x26;0 &#x26;1\\\n\\end{bmatrix}Pcos(\\theta) + \\begin{bmatrix}\n0&#x26;-A<em>{z} &#x26;A</em>{y}\\\nA<em>{z}&#x26;0 &#x26;-A</em>{x}\\\n-A<em>{y}&#x26;A</em>{x} &#x26;0\\\n\\end{bmatrix}Psin(\\theta) + \\begin{bmatrix}\nA<em>{x}^2&#x26;A</em>{x}A<em>{y} &#x26;A</em>{x}A<em>{z}\\\nA</em>{x}A<em>{y}&#x26;A</em>{y}^2 &#x26;A<em>{y}A</em>{z}\\\nA<em>{x}A</em>{z}&#x26;A<em>{y}A</em>{z} &#x26;A_{z}^2\\\n\\end{bmatrix}P(1-cos(\\theta))\n$$</p>\n<p>最终围绕任意旋转轴A的旋转矩阵：</p>\n<p>$$\nR<em>A(\\theta) = \\begin{bmatrix}\nc+(1-c)A</em>{x}^2&#x26;(1-c)A<em>{x}A</em>{y}-sA<em>{z} &#x26;(1-c)A</em>{x}A<em>{z}+sA</em>{y}\\\n(1-c)A<em>{x}A</em>{y}+sA<em>{z}&#x26;c+(1-c)A</em>{y}^2 &#x26;(1-c)A<em>{y}A</em>{z}-sA<em>{x}\\\n(1-c)A</em>{x}A<em>{z}-sA</em>{y}&#x26;(1-c)A<em>{y}A</em>{z}+sA<em>{x} &#x26;c+(1-c)A</em>{z}^2\\\n\\end{bmatrix}\n$$</p>\n<p>转换为Shader代码在顶点着色器中使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">mat4 <span class=\"token function\">rotationMatrix</span><span class=\"token punctuation\">(</span>vec3 axis<span class=\"token punctuation\">,</span> float angle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    axis <span class=\"token operator\">=</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    float s <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    float c <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    float oc <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> c<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">mat4</span><span class=\"token punctuation\">(</span>oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> c<span class=\"token punctuation\">,</span>           oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> axis<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span>  oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> axis<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n                oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> axis<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span>  oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> c<span class=\"token punctuation\">,</span>           oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>z <span class=\"token operator\">-</span> axis<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n                oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> axis<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span>  oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> axis<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span>  oc <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>z <span class=\"token operator\">*</span> axis<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> c<span class=\"token punctuation\">,</span>           <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>                                <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>                                <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>                                <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nvec3 <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>vec3 v<span class=\"token punctuation\">,</span> vec3 axis<span class=\"token punctuation\">,</span> float angle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mat4 m <span class=\"token operator\">=</span> <span class=\"token function\">rotationMatrix</span><span class=\"token punctuation\">(</span>axis<span class=\"token punctuation\">,</span> angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>齐次坐标：</strong></p>\n<p>三维表示的点和向量可能会被搞混，齐次坐标可以解决这个问题，其对三维空间中的点和向量的表示都是四维的：</p>\n<p>任意点(w分量为1)：</p>\n<p>$$\n\\begin{bmatrix}\na<em>{1}\\\na</em>{2}\\\na_{3}\\\n1\\\n\\end{bmatrix}\n$$</p>\n<p>任意向量(w分量为0)：</p>\n<p>$$\n\\begin{bmatrix}\nb<em>{1}\\\nb</em>{2}\\\nb_{3}\\\n0\\\n\\end{bmatrix}\n$$</p>\n<p>两点相减即表示向量（w分量变为0，不受平移矩阵影响）。</p>\n<p>所有仿射变换（具有保持直线的特性）都可以借助齐次坐标表示成矩阵相乘的形式。</p>\n<p>比如三维表示的平移变换为矩阵加法，采样齐次坐标的话就可以统一表示为矩阵乘法。</p>\n<p>3X3的变换矩阵M和3维平移矩阵T可以结合为4X4的变换矩阵F：</p>\n<p>$$\nF=\\begin{bmatrix}\nM<em>{11}&#x26;M</em>{12}&#x26;M<em>{13}&#x26;T</em>{x}\\\nM<em>{21}&#x26;M</em>{22}&#x26;M<em>{23}&#x26;T</em>{y}\\\nM<em>{31}&#x26;M</em>{32}&#x26;M<em>{33}&#x26;T</em>{z}\\\n0&#x26;0&#x26;0&#x26;1\\\n\\end{bmatrix}\n$$</p>\n<p><strong>法向量矩阵：</strong></p>\n<p>在经过非正交矩阵变换之后，法向量通常会不再垂直于表面。</p>\n<p>法向量(N)与切向量(T)互相垂直，而切向量经过变换后仍是切向量，则可得：</p>\n<p>$$\n{N}‘\\cdot{T}’ = (GN)\\cdot(MT) = (GN)^{T}(MT) = N^{T}G^{T}MT = 0\n$$</p>\n<p>由N·T=0（互相垂直）=> G·MT = T => G·M = I(I为单位阵) =></p>\n<p>$$\nG=(M^{-1})^{T}\n$$</p>\n<p>因此<strong>法线变换矩阵应该使用变换矩阵的逆转置矩阵</strong>。</p>\n<p><strong>四元数：</strong></p>\n<p>介绍可看之前<a href=\"http://todaylg.com/LG-Blog-Gatsby/lgl/\">LGL总结的Math部分</a>，这里不再重复，了解一下就好..</p>\n<p>绕A轴旋转角度θ的四元数表示（没有对比就没有伤害…）：</p>\n<p>$$\nq = cos\\frac{\\theta}{2}+Asin\\frac{\\theta}{2}\n$$</p>\n<p>应用到点P：</p>\n<p>$$\n{P}’ = qPq^{-1}\n$$</p>\n<p>相当于3x3矩阵：</p>\n<p>$$\nR_{q} = \\begin{bmatrix}\n1-2y^2-2z^2&#x26;2xy-2wz&#x26;2xz+2wy\\\n2xy+2wz&#x26;1-2x^2-2z^2&#x26;2yz-2wx\\\n2xz-2wy&#x26;2yz+2wx&#x26;1-2x^2-2y^2\\\n\\end{bmatrix}\n$$</p>\n<p>球内插值（0&#x3C;=t&#x3C;=1）：</p>\n<p>$$\nq(t) = \\frac{sin(1-\\theta)}{sin(\\theta)}q<em>{1}+\\frac{sin(\\theta t)}{sin(\\theta)}q</em>{2}\n$$</p>\n<h3>Chapter 5：几何体</h3>\n<p><strong>点线距离</strong>(直接计算其垂直分量即可)：</p>\n<p>$$\nd^2 = (Q-S)^2 - [proj_{v}(Q-S)]^2 = (Q-S)^2 - [\\frac{(Q-S)\\cdot V}{V^2}V]^2\n$$</p>\n<p><strong>面：</strong></p>\n<p>给定法线向量N和点P，则由二者确定的平面需满足（Q为面内点）：</p>\n<p>$$\nN\\cdot (Q-P) = 0\n$$</p>\n<p>再由平面方程：</p>\n<p>$$\nAx+By+Cz+D=0\n$$</p>\n<p>可知：A、B、C为法向量N的xyz分量，D=-N·P：</p>\n<p>$$\nd=N\\cdot Q+D\n$$</p>\n<p>当：</p>\n<ul>\n<li>\n<p>d=0时：点Q在平面中</p>\n</li>\n<li>\n<p>d>0时，点Q在正面上</p>\n</li>\n<li>\n<p>d&#x3C;0时，点Q在背面下</p>\n</li>\n</ul>\n<p><strong>线面交点：</strong></p>\n<p>设直线过点S，平行于向量V，则直线方程可以表示为：P(t) = S + tV，可得与面交点方程：</p>\n<p>$$\nN\\cdot P(t) + D = 0\n$$</p>\n<p>可得：</p>\n<p>$$\nt=\\frac{-(N \\cdot S+D)}{N\\cdot V}\n$$</p>\n<p><strong>视椎体:</strong></p>\n<p>假设水平视野的角度为α，相机到视椎体近平面的距离e为：</p>\n<p>$$\ne= \\frac{1}{tan(\\frac{a}{2})}\n$$</p>\n<p>垂直视野角度β可以表示为：</p>\n<p>$$\n\\beta = 2tan^{-1}(\\frac{\\alpha}{e})\n$$</p>\n<p><strong>透视插值校正：</strong></p>\n<p>深度插值公式：</p>\n<p>$$\n\\frac{1}{z<em>3} = \\frac{1}{z</em>1}(1-y) + \\frac{1}{z_2}t\n$$</p>\n<p>结果表明在透视投影中，深度值z1和z2需要通过对它们的<strong>倒数</strong>进行线性插值来正确地插值:。</p>\n<p>顶点插值校正：</p>\n<p>$$\n\\frac{b<em>3}{z</em>3} = [\\frac{b<em>1}{z</em>1}(1-t) + \\frac{b<em>2}{z</em>2}t]\n$$</p>\n<p><strong>透视矩阵：</strong></p>\n<p>假设点P(Px,Py,Pz,1)是在视椎体中的一个点（视椎体中n为负)，可得在视椎体近平面的坐标x,y：</p>\n<p>$$\n\\frac{x}{P<em>x} = -\\frac{n}{P</em>z} \\Rightarrow x = -\\frac{n}{P<em>z}P</em>x\n$$</p>\n<p>同理y：</p>\n<p>$$\n\\frac{y}{P<em>y} = -\\frac{n}{P</em>z} \\Rightarrow y = -\\frac{n}{P<em>z}P</em>y\n$$</p>\n<p>透视矩阵需要将视椎体映射成齐次裁剪空间的立方体，即需要将X轴[l,r] => [-1,1]、Y轴[b,t]=>[-1,1]，可得关系式：</p>\n<p>$$\n{x}’ = 2\\frac{(x-l)}{r-l}-1\n$$</p>\n<p>$$\n{y}’ = 2\\frac{(y-b)}{t-b}-1\n$$</p>\n<p>代入近平面上点xy的关系式并化简后可得：</p>\n<p>$$\n{x}’ = \\frac{2n}{r-l}(-\\frac{P<em>{x}}{P</em>{z}})-\\frac{r+l}{r-l}\n$$</p>\n<p>$$\n{y}’ = \\frac{2n}{t-b}(-\\frac{P<em>{y}}{P</em>{z}})-\\frac{t+b}{t-b}\n$$</p>\n<p>Z轴坐标的变换复杂一些，为了保证线性，我们需要构造z的倒数关系式：</p>\n<p>$$\n{z}’ = A\\frac{1}{z}+B\n$$</p>\n<p>由-n => -1、-f => 1可得：</p>\n<p>$$\n-1 = \\frac{A}{-n}+B \\space and\\space 1 = \\frac{A}{-f}+B\n$$</p>\n<p>可计算出A、B：</p>\n<p>$$\nA = \\frac{2nf}{f-n} \\space and \\space B = \\frac{f+n}{f-n}\n$$</p>\n<p>最终z坐标的变换公式：</p>\n<p>$$\n{z}’ = -\\frac{2nf}{f-n}(-\\frac{1}{P_z})+\\frac{f+n}{f-n}\n$$</p>\n<p>对xyz化简后可得：</p>\n<p>$$\n-{x}‘P<em>z = \\frac{2n}{r-l}P</em>{x}-\\frac{r+l}{r-l}P_{z}\n$$</p>\n<p>$$\n-{y}‘P<em>z = \\frac{2n}{t-b}P</em>{y}-\\frac{t+b}{t-b}P_{z}\n$$</p>\n<p>$$\n-{z}‘P<em>z = \\frac{f+n}{f-n}P</em>z-\\frac{2nf}{f-n}\n$$</p>\n<p>使用矩阵表示即为：</p>\n<p>$$\nP’ = M<em>{frustum}P = \\begin{bmatrix}\n\\frac{2n}{r-l}&#x26;0&#x26;\\frac{r+l}{r-l}&#x26;0\\\n0&#x26;\\frac{2n}{t-b}&#x26;\\frac{t+b}{t-b}&#x26;0\\\n0&#x26;0&#x26;-\\frac{f+n}{f-n}&#x26;-\\frac{2nf}{f-n}\\\n0&#x26;0&#x26;-1&#x26;0\\\n\\end{bmatrix}\\begin{bmatrix}\nP</em>{x}\\\nP<em>{y}\\\nP</em>{z}\\\n1\\\n\\end{bmatrix}\n$$</p>\n<p><strong>正交矩阵：</strong></p>\n<p>与投影矩阵同理，只不过x’/y/’z’与x/y/z之间的关系在正交投影下的关系式是直接相等的：</p>\n<p>$$\n{x}’ = \\frac{2}{r-l}{x}-\\frac{r+l}{r-l}\n$$</p>\n<p>$$\n{y}’ = \\frac{2}{t-b}{y}-\\frac{t+b}{t-b}\n$$</p>\n<p>Z轴也是同理：</p>\n<p>$$\n{z}’ = \\frac{-2}{f-n}{z}-\\frac{f+n}{f-n}\n$$</p>\n<p>最终的变换矩阵即为：</p>\n<p>$$\nP’ = M<em>{ortho}P = \\begin{bmatrix}\n\\frac{2}{r-l}&#x26;0&#x26;0&#x26;-\\frac{r+l}{r-l}\\\n0&#x26;\\frac{2}{t-b}&#x26;0&#x26;\\frac{t+b}{t-b}\\\n0&#x26;0&#x26;-\\frac{2}{f-n}&#x26;-\\frac{f+n}{f-n}\\\n0&#x26;0&#x26;0&#x26;1\\\n\\end{bmatrix}\\begin{bmatrix}\nP</em>{x}\\\nP<em>{y}\\\nP</em>{z}\\\n1\\\n\\end{bmatrix}\n$$</p>\n<p><strong>斜视锥体深度投影和裁剪：</strong></p>\n<p>涉及反射场景的情况一般是通过一个反射平面，反射主相机生成一个虚拟相机对场景进行渲染。</p>\n<p>反射的虚拟相机首先会颠倒右手坐标系为左手坐标系，我们可以通过改变glFrontFace()来抵消。？</p>\n<p>需要注意的是当有物体横跨反射平面的时候，渲染反射的虚拟相机中的场景就会出现问题（会把平面以下的部分渲染到反射结果中）。</p>\n<p>最简单的解决方法是让GPU暴露一个自定义选定剪切平面的方法，截断反射表面下的所有几何体。但是很不幸的是并不是所有GPU都支持这个自定义的剪切选项，并且即使支持改起来也会很麻烦（因为要改动代码）。</p>\n<p>这时候斜视锥体裁剪的办法就派上用场了，对视椎体进行裁剪，用反射平面替代原来的近裁剪面（即新的斜视椎体），这样反射平面以下的物体都不会渲染（因为在视椎体以外了），其中变换后的新投影矩阵M’与原投影矩阵M的关系：</p>\n<p>$$\nM’ = \\begin{bmatrix}\nM<em>1\\\nM</em>2\\\n\\frac{-2Q<em>{z}}{C\\cdot Q}C+&#x3C;0,0,1,0>\\\nM</em>4\\\n\\end{bmatrix}\n$$</p>\n<p>其中:</p>\n<p>$$\nQ = M^{-1}Q’\n$$</p>\n<p>$$\nQ’ = &#x3C;sgn(C<em>x’,C</em>y’,1,1)>\n$$</p>\n<p>$$\nC’ = (M^{-1})^{T}C\n$$</p>\n<p>代码实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//reflectorPlane.setFromNormalAndCoplanarPoint</span>\nreflectorPlane<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreflectorPlane<span class=\"token punctuation\">.</span>constant <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>reflectorWorldPosition<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>reflectorPlane<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//reflectorPlane.applyMatrix4</span>\nreflectorPlane<span class=\"token punctuation\">.</span>m1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalMatrix</span><span class=\"token punctuation\">(</span>virtualCamera<span class=\"token punctuation\">.</span>viewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreflectorPlane<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>reflectorPlane<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>reflectorPlane<span class=\"token punctuation\">.</span>constant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreflectorPlane<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">applyMatrix4</span><span class=\"token punctuation\">(</span>virtualCamera<span class=\"token punctuation\">.</span>viewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreflectorPlane<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">.</span><span class=\"token function\">applyMatrix3</span><span class=\"token punctuation\">(</span>reflectorPlane<span class=\"token punctuation\">.</span>m1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreflectorPlane<span class=\"token punctuation\">.</span>constant <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>reflectorPlane<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>reflectorPlane<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//C'</span>\nclipPlane<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>reflectorPlane<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> reflectorPlane<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> reflectorPlane<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> reflectorPlane<span class=\"token punctuation\">.</span>constant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> projectionMatrix <span class=\"token operator\">=</span> virtualCamera<span class=\"token punctuation\">.</span>projectionMatrix<span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>clipPlane<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> projectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> projectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>clipPlane<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> projectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> projectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\nq<span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">+</span> projectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> projectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Calculate the scaled plane vector</span>\n<span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">/</span> clipPlane<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclipPlane<span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Replacing the third row of the projection matrix</span>\nprojectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clipPlane<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\nprojectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clipPlane<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\nprojectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clipPlane<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> clipBias<span class=\"token punctuation\">;</span>\nprojectionMatrix<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clipPlane<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span></code></pre></div>\n<p>实践反射场景：</p>\n<p><a href=\"http://todaylg.com/LGL/examples/?src=reflector.html\">Examples: Reflector</a></p>\n<p>相关文章：</p>\n<p><a href=\"http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\">Paper</a></p>\n<p><a href=\"https://blog.csdn.net/yinhun2012/article/details/79466517\">reflect向量计算</a></p>\n<h2>Chapter 6：光线追踪</h2>\n<p><a href=\"https://zhuanlan.zhihu.com/p/41269520\">相关介绍文章</a></p>\n<p>//Todo：待实践 + WebWorker</p>\n<h2>Chapter 7：光照与着色</h2>\n<h3>Light</h3>\n<p><strong>点光源(Point Light)：</strong></p>\n<p>$$\nC=\\frac{1}{k<em>c+k</em>{l}d+k<em>qd^2}C</em>0\n$$</p>\n<p>其中光源强度为C，d为距离光源的距离，C0为灯原点颜色，常量Kc、Kl、Kq控制衰减。</p>\n<p><strong>聚光灯(Spot Light)：</strong></p>\n<p>$$\nC=\\frac{max{-R\\cdot L,0}^p}{k<em>c+k</em>{l}d+k<em>qd^2}C</em>0\n$$</p>\n<p>其中R为聚光灯方向，L为照射点指向光源的单位向量，指数p控制强度随R和- L夹角的增大而减小的速率。</p>\n<p><strong>环境光与漫反射光(Ambient and Diffuse Light)：</strong></p>\n<p>漫反射(Lambertian)指入射光在表面某一点上的光的一部分向随机方向散射，因为光在每个方向上都是均匀反射的，所以朗伯反射的计算不要考虑观察者的位置因素。</p>\n<p>考虑环境光强度与n个光源的贡献，可以将漫反射分量表示为：</p>\n<p>$$\nK<em>{diffuce} = DA+D\\sum</em>{i=1}^{n}C<em>imax{N\\cdot L</em>i,0}\n$$</p>\n<p>其中D是表面的漫反射颜色，A代表环境光的颜色，N是反射表面的法向量，L是指向第i个光源的单位向量，Ci是第i个光源的光照强度。</p>\n<p><strong>镜面光照(Specular Lighting)：</strong></p>\n<p>$$\nK<em>{specular} = S\\sum</em>{i=1}^{n}C<em>imax{N\\cdot H</em>i,0}^m\\space(N\\cdot L_i > 0)\n$$</p>\n<p>其中S表面的镜面反射颜色，Hi观察者与光源Li的半角向量，m控制反射的锐度，N与Li的点乘结果决定表面是正对光源还是背对光源（背对的话都不用算了）。</p>\n<p><strong>纹理映射(Texture Mapping)</strong></p>\n<p>Projective Texture Maps：</p>\n<p>投射纹理映射的一个应用是模拟聚光灯将图像投射到环境中，随着与聚光灯距离的增加，投影图像变大。这种效果是通过使用一个4×4纹理矩阵将一个物体的顶点位置映射到纹理坐标（s, t, 0, q），这样除以q就得到了正确的二维纹理坐标（s，t），用于对投影图像进行采样。</p>\n<p>首先需要乘以转换矩阵，将每个顶点的坐标先转换为以聚光灯位置为原点的坐标系下的坐标，再乘以投影矩阵（仅xy）</p>\n<p>//Todo: 实践</p>\n<p>Cube Texture Maps：</p>\n<p>//Todo: Add Example</p>\n<p>Filtering and Mipmaps：</p>\n<p>//Todo: Add Example</p>\n<p><strong>着色模型(Shading Models)：</strong></p>\n<ul>\n<li>\n<p>Calculating Normal Vectors</p>\n</li>\n<li>\n<p>Gouraud Shading</p>\n</li>\n<li>\n<p>Blinn-Phong Shading</p>\n</li>\n</ul>\n<p><strong>凹凸映射(Bump Mapping)：</strong></p>\n<ul>\n<li>\n<p>Bump Map Construction</p>\n</li>\n<li>\n<p>Tangent Space</p>\n</li>\n<li>\n<p>Calculating Tangent Vectors</p>\n</li>\n<li>\n<p>Implementation</p>\n</li>\n</ul>\n<p><strong>物理反射模型</strong></p>\n<ul>\n<li>\n<p>Bidirectional Reflectance Distribution Functions</p>\n</li>\n<li>\n<p>Cook-Torrance Illumination</p>\n</li>\n<li>\n<p>The Fresnel Factor</p>\n</li>\n<li>\n<p>The Microfacet Distribution Function</p>\n</li>\n<li>\n<p>The Geometrical Attenuation Factor</p>\n</li>\n<li>\n<p>Implementation</p>\n</li>\n</ul>\n<h3>可见性检测</h3>\n<p>Principal Components</p>\n<p>边界盒</p>\n<p>边界球</p>\n<p>边界椭圆</p>\n<p>边界圆筒</p>\n<p>BSP Tree</p>\n<p>Portal Systems</p>\n<p>各个边界模型的测试方法</p>\n<h3>多边形技术</h3>\n<p>Depth Value Offset 深度值偏移</p>\n<p>Decal Application</p>\n<p>Billboarding</p>\n<p>T-Junction Elimination</p>\n<p>Triangulation</p>\n<h3>阴影</h3>\n<p>ShadowMapping</p>\n<p>Silhouette Determination</p>\n<p>Shadow Volume Construction</p>\n<p>Determining Cap Necessity</p>\n<h3>曲线与曲面</h3>\n<p>Cubic Curves</p>\n<p>Nonuniform B-Splines</p>\n<p>NURBS</p>\n<p>Bicubic Surfaces</p>\n<p>Curvature and Torsion</p>\n<h3>碰撞检测</h3>\n<p>Collision of a Sphere and a Plane</p>\n<p>Collision of a Box and a Plane</p>\n<p>General Sphere Collisions</p>\n<p>Sliding</p>\n<p>Collision of Two Spheres</p>\n<h3>线性物理</h3>\n<p>Force Equation</p>\n<p>Second-Order Differential Equations</p>\n<p>Projectile Motion</p>\n<p>Resisted Motion</p>\n<p>Friction</p>\n<h3>旋转物理</h3>\n<p>Centrifugal Force </p>\n<p>Coriolis Force </p>\n<p>Center of Mass </p>\n<p>Angular Momentum </p>\n<p>Torque</p>\n<p>Inertia Tensor</p>\n<p>Spring Motion</p>\n<p>Pendulum Motion</p>\n<h3>流体及布料模拟</h3>\n<p>The Wave Equation</p>\n<p>Approximating Derivatives for a Fluid Surface</p>\n<p>Evaluating Fluid Surface Displacement</p>\n<p>Stability of the Numerical Method for a Fluid</p>\n<p>Internal Forces for a Cloth Particle</p>\n<p>External Forces for a Cloth Particle</p>\n<h3>数值方法</h3>\n<p>Linear Systems </p>\n<p>Eigenvalues and Eigenvectors </p>\n<p>Ordinary Differential Equations </p>","fields":{"slug":"/math-base-1/","prefix":"2019-07-08"},"frontmatter":{"title":"《Mathematics for 3D Game Programming and Computer Graphics》读书笔记 (上)","author":"todaylg","category":"大结","cover":{"childImageSharp":{"resize":{"src":"/static/bg-0f989bf59531c06d1be6221cfaa54c0a-ada8c.jpg"}}}}},"authornote":{"id":"20cdfd79-00b3-57fb-a29f-bb96dcd133a8","html":"<p><strong>todaylg</strong> </p>"},"site":{"siteMetadata":{"facebook":{"appId":""}}}},"pageContext":{"slug":"/math-base-1/","prev":{"id":"61a14835-14df-558d-8f49-8993a1165a01","fields":{"slug":"/post-processing/","prefix":"2019-06-08","source":"posts"},"frontmatter":{"title":"Post-Processing学习笔记","category":"小结"}},"next":{"id":"3624bb3d-b205-581b-9907-b0db584b7430","fields":{"slug":"/shadow-map/","prefix":"2019-07-20","source":"posts"},"frontmatter":{"title":"ShadowMap学习笔记","category":"大结"}},"source":"posts"}}