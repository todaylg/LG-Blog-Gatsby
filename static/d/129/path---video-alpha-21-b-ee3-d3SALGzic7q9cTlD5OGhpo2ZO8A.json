{"data":{"post":{"id":"4fe7c723-56d7-558f-b35d-f4965d63630a","html":"<h3>前言</h3>\n<p>在平时的工作中我们会遇到一些动画师设计的动效需要在Web实现，大多数情况下我们使用CSS3就可以搞定了，但对于一些复杂的动效（比如粒子效果）用我们就得另寻他法了。那在考虑性能与完成效果的前提下，我们该哪种方案复现这些复杂的动效呢？</p>\n<h3>方案对比</h3>\n<p><strong>动态图片（gif）</strong></p>\n<p>使用gif图自然是我们想到的第一个解决方法，但是其缺陷在于应用于一些场景时会导致导出的gif图大小过大：</p>\n<ul>\n<li>\n<p>动效时长若较长时</p>\n</li>\n<li>\n<p>需要考虑移动端IOS或PC Retina屏时（即画质有要求时）</p>\n</li>\n</ul>\n<p><strong>序列帧动画</strong></p>\n<p>我们还可以使用 animation + sprite 的方式实现序列帧动画，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span>test <span class=\"token punctuation\">{</span>\n  animation<span class=\"token punctuation\">:</span> testAnimation <span class=\"token number\">0.2</span>s forwards <span class=\"token number\">1.5</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@keyframes testAnimation<span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0.000</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">6.667</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">168</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">13.333</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">336</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">20.000</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">504</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">26.667</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">672</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">33.333</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">840</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">40.000</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1008</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">46.667</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1176</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">53.333</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1344</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">60.000</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1512</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">66.667</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1680</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">73.333</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1848</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">80.000</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2016</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">86.667</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2184</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">93.333</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2352</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token number\">100.000</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> background<span class=\"token operator\">-</span>position<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方法的缺陷同样也是在文件大小上，实测在保证基本帧数的情况下，导出的雪碧图较之gif图还要更大。。</p>\n<p><strong>Lottie/SVGA</strong></p>\n<p>可以参考<a href=\"https://www.jianshu.com/p/60d28d7bab48\">这篇</a>文章，文章有较为详细的介绍Lottie与SVGA，不再赘述。</p>\n<p><strong>Scene Loader</strong></p>\n<p>动画师在3D建模软件中制作动画场景 => 导出附带动画参数的模型格式 => 模型格式Loader => Web中还原场景。</p>\n<p>此方法动画师的制作成本很高，且最后导出的模型文件大小也会很大。 （当然也可以让动画师只提供纹理素材，其他全由我们自己写，这样制作依旧很高，只不过是转到了开发这边。）</p>\n<p>总结：</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方案</th>\n<th align=\"left\">制作成本</th>\n<th>性能</th>\n<th>还原效果</th>\n<th>文件体积</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">动态图</td>\n<td align=\"left\">低</td>\n<td>中</td>\n<td>全还原</td>\n<td>大</td>\n</tr>\n<tr>\n<td align=\"left\">序列帧</td>\n<td align=\"left\">低</td>\n<td>中</td>\n<td>全还原</td>\n<td>大</td>\n</tr>\n<tr>\n<td align=\"left\">Lottie</td>\n<td align=\"left\">中（依赖AE）</td>\n<td>优</td>\n<td>部分插件效果不支持</td>\n<td>小</td>\n</tr>\n<tr>\n<td align=\"left\">SVGA</td>\n<td align=\"left\">中（依赖AE、Animate CC）</td>\n<td>优</td>\n<td>全还原</td>\n<td>中</td>\n</tr>\n<tr>\n<td align=\"left\">Scene Loader</td>\n<td align=\"left\">高（依赖Blender/3DMax/Maya等）</td>\n<td>中</td>\n<td>全还原</td>\n<td>大</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>那还有没有更好的解决方案呢？</p>\n<p>我们知道视频的体积和编解码效率都要优于图片，我们以视频为切入点，探讨通过播放视频的方式复现动效的方法。</p>\n<h3>Video实现方案</h3>\n<p>通过播放Video来复现动效，首先需要解决如何支持动效中的透明度的问题。mp4并不支持Alpha通道，<a href=\"https://lsvih.com/2017/06/30/%E5%9C%A8html%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%83%8C%E6%99%AF%E9%80%8F%E6%98%8E%E7%9A%84video%E8%A7%86%E9%A2%91/\">webM</a>的视频格式虽然支持Alpha通道，但是其堪忧的<a href=\"https://caniuse.com/#search=webM\">兼容性</a>（特别是移动端）让人不得不另寻他法。</p>\n<p>好在早有珠玉在前，透明视频的处理方法可以参考<a href=\"http://dopro.io/animation-solution-alpha-video.html\">这篇</a>文章。简而言之就是通过划定区域的方法分别对Video的RGB及Alpha通道进行提取，最后在进行拼合。</p>\n<p>这里总结下基于该文章实践及拓展过程中遇到的一些问题和解决方案。</p>\n<h3>多量动效</h3>\n<p><strong>canvas2D：</strong></p>\n<p>上面那篇文章介绍了单个动效复现的步骤及方法，但是对于需要同时出现多个动效的情况（比如每次位置随机且多数量的烟花动效），需要进行一些优化处理：</p>\n<p>因为若是每次动效渲染都经过一遍对Video的RGB、Alpha通道的提取及拼合的过程（drawImageData => getImageData => putImageData），当同时展示的动效数量较多时会导致CPU占用过高。</p>\n<p>瓶颈既然是在<strong>每个效果都需要走一遍Video处理流程</strong>造成的，那在首次处理Video的时候缓存拼合RGBA后的imageData数据，再次展示该动效时直接使用对应缓存的数据即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//首次播放视频缓存Canvas帧数据</span>\nvideo<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncanplay</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">drawVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nvideo<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onended</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>rafId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">drawVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n rafId <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token operator\">...</span> <span class=\"token comment\">//省略拼合RGBA色值数据(image)的过程</span>\n firDrawCanvasContext<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> showWidth<span class=\"token punctuation\">,</span> showHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//保存帧数据</span>\n imgCacheDataArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>firDrawCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//重复绘制时直接使用缓存数据（以Pixi为例）</span>\n<span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PIXI<span class=\"token punctuation\">.</span>Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n width<span class=\"token punctuation\">:</span> showWidth<span class=\"token punctuation\">,</span>\n height<span class=\"token punctuation\">:</span> showHeight<span class=\"token punctuation\">,</span>\n transparent<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">drawCanvasFromCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">//构建Group</span>\n <span class=\"token keyword\">let</span> spriteGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PIXI<span class=\"token punctuation\">.</span>extras<span class=\"token punctuation\">.</span>AnimatedSprite<span class=\"token punctuation\">.</span>fromImages</span><span class=\"token punctuation\">(</span>imgCacheDataArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token operator\">...</span> <span class=\"token comment\">//设置此Group的缩放大小及位置信息</span>\n spriteGroup<span class=\"token punctuation\">.</span>animationSpeed <span class=\"token operator\">=</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//保持与Video帧率一致</span>\n spriteGroup<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n app<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>spriteGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>缓存的办法可以省掉播放重复动画资源时绘制及提取的过程，缺陷在于每种不同的动画都需要对应保存整个视频动画每一帧的色值数据，后期动效数量上升后，需要关心内存/本地存储的占用量问题。但不失为Canvas2D渲染下切实可行的办法。</p>\n<p><strong>WebGL：</strong></p>\n<p>使用WebGL完成动效复现的话，就可以借助GPU来进一步优化性能。</p>\n<p>在不顾及<a href=\"https://caniuse.com/#search=webgl\">兼容性</a>的情况下，显然这个解决方案会更好。</p>\n<p>将Video RGB及Alpha通道的提取与拼合部分直接在片元着色器中完成，实现也并不复杂，只需要变换一下采样Texture时的UV坐标（RGB值采样上半部分，Alpha值采样下半部分）即可：</p>\n<p>需要注意纹理坐标系的原点(0,0)位于左下角，取值在[0,1]之间。我们将上半部分的采样坐标传入着色器用于采样RGB值，下半部分的采样坐标可通过上半部分采样坐标减去vec2(0, 0.5)得到，从而采样Alpha值。</p>\n<p>相关JS代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 上半部分纹理坐标</span>\n<span class=\"token keyword\">let</span> uvCoord <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//即(0,1)、(1,1)、(0,0.5)、(1,0.5)四个坐标</span>\n<span class=\"token keyword\">const</span> videoGeometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Plane</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvideoGeometry<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topUv\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n size<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n data<span class=\"token punctuation\">:</span> uvCoord\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>相关Shader代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> vertex <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`#version 300 es\nprecision highp float;\nprecision highp int;\n\nin vec2 uv;\nin vec3 position;\n\nin vec2 topUv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nout vec2 vUv;\n\nvoid main() {\n vUv = topUv;\n gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform sampler2D tMap;\n\nin vec2 vUv;\n\nout vec4 FragColor;\n\nvoid main() {\n vec3 rgbColor = texture(tMap, vUv).rgb;\n float alphaColor = texture(tMap, vUv - vec2(0, 0.5)).r;\n FragColor = vec4(rgbColor, alphaColor);\n}\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>vertex<span class=\"token punctuation\">,</span> fragment<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>WebGL Renderer</h4>\n<p>实际接入到项目中最好引入一个WebGL Renderer。</p>\n<p>裸写只针对一个动效的话还好。。但是考虑到后面的扩展性，要么自己从WebGL API开始封装，要么就是引入一个开源Renderer了。</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>框架</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pixi.min.js(V4.8.5)</td>\n<td>428 kb</td>\n</tr>\n<tr>\n<td>Three.min.js(V104)</td>\n<td>558 kb</td>\n</tr>\n<tr>\n<td>Claygl.min.js(V1.03)</td>\n<td>413 kb</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><strong>引入Pixi</strong></p>\n<p>引入Pixi应该是这种场景下的最优解，可以简化当前Canvas 2D渲染的同时，又提供了WebGL的渲染支持，接入和改造成本也相对较小。</p>\n<p>但是实践通过Pixi的Filter实现自定义Shader的过程中，发现其并不支持自定义顶点变量(attribute)的传入：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//SpriteRenderer中render的方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token operator\">...</span>\n <span class=\"token comment\">// build the vao object that will render..</span>\n <span class=\"token comment\">// 创建VAO之后写死了传入Sprite的三个attribute变量，没有封装和暴露添加自定义attribute的方法</span>\n <span class=\"token keyword\">const</span> vao <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span><span class=\"token function\">createVao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>indexBuffer<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span>vertexBuffer<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">.</span>aVertexPosition<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertByteSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span>vertexBuffer<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">.</span>aTextureCoord<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">UNSIGNED_SHORT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertByteSize<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span>vertexBuffer<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">.</span>aColor<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">UNSIGNED_BYTE</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertByteSize<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们需要将上半部分的UV坐标从顶点着色器传送至片元着色器，但是Pixi又没有暴露自由添加顶点变量的方法，所以我们只能：</p>\n<p>1.改造Pixi：由固定的几个顶点变量输入改为读取传参并遍历的方式输入顶点变量，并添加一个特定处理RGBA拼合的Filter。</p>\n<p>2.不修改PIxi的前提下，可尝试一些妖路子：比如重写掉Pixi提供的封装好的Filter的Shader，并且在顶点着色器中直接将当前顶点映射的纹理坐标直接暴力的除以2，得到下半部分的映射纹理坐标，代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> vertex <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n attribute vec2 aVertexPosition;\n attribute vec2 aTextureCoord;\n uniform mat3 projectionMatrix;\n varying vec2 vTextureCoord;\n void main(void)\n {\n vTextureCoord = vec2(aTextureCoord.x, aTextureCoord.y/2.0);\n gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n }\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n varying vec2 vTextureCoord;\n uniform sampler2D uSampler;\n void main(void)\n {\n vec3 rgbColor = texture2D(uSampler, vTextureCoord).rgb;\n float alphaColor = texture2D(uSampler, vTextureCoord + vec2(0, 0.5)).r;\n gl_FragColor = vec4(rgbColor, alphaColor);\n }\n `</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">videoPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">let</span> texture <span class=\"token operator\">=</span> Texture<span class=\"token punctuation\">.</span><span class=\"token function\">fromVideo</span><span class=\"token punctuation\">(</span>videoPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> videoSprite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span>texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//以改写AlphaFilter为例</span>\n <span class=\"token keyword\">let</span> myFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filters<span class=\"token punctuation\">.</span>AlphaFilter</span><span class=\"token punctuation\">(</span>uvCoord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//覆盖原Shader</span>\n myFilter<span class=\"token punctuation\">.</span>vertexSrc <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">;</span>\n myFilter<span class=\"token punctuation\">.</span>fragmentSrc <span class=\"token operator\">=</span> fragment<span class=\"token punctuation\">;</span>\n videoSprite<span class=\"token punctuation\">.</span>filters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>myFilter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n videoSprite<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> showWidth<span class=\"token punctuation\">;</span>\n videoSprite<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> showHeight<span class=\"token punctuation\">;</span>\n app<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>videoSprite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>实测这样暴力的处理方法在最后的采样坐标上会和理论数值有所偏差（0.5 => 0.477）//Todo 具体原因还没研究明白，并且实现过程丑陋不堪，不建议使用</p>\n<p><strong>引入其他的3D框架</strong></p>\n<p>引入一个3D后实现过程倒是没啥问题了。只是如果单纯只是为了写一个Shader而引入Three.js或者Claygl之类的这种大而全的3D框架，有种杀鸡用牛刀的感觉。</p>\n<p>所以这时候，<a href=\"https://github.com/todaylg/LGL\">LGL</a> 就可以了解一下啦~</p>","fields":{"slug":"/video-alpha/","prefix":"2019-04-28"},"frontmatter":{"title":"Web动效通用实现方案探究","author":"todaylg","category":"大结","cover":{"childImageSharp":{"resize":{"src":"/static/bg-4f9c8d11c3518f84b7efac6f8f28394b-ada8c.jpg"}}}}},"authornote":{"id":"20cdfd79-00b3-57fb-a29f-bb96dcd133a8","html":"<p><strong>todaylg</strong> </p>"},"site":{"siteMetadata":{"facebook":{"appId":""}}}},"pageContext":{"slug":"/video-alpha/","prev":{"id":"992e71b9-1028-5179-8023-0d81dbcacb82","fields":{"slug":"/lgl/","prefix":"2019-03-04","source":"posts"},"frontmatter":{"title":"LGL","category":"大结"}},"next":{"id":"7dbae1bb-1cc5-51c7-91c4-b4fafb12d908","fields":{"slug":"/problem-record/","prefix":"2019-05-04","source":"posts"},"frontmatter":{"title":"日常踩坑小记","category":"小结"}},"source":"posts"}}