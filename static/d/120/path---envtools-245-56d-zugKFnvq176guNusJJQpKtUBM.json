{"data":{"post":{"id":"3fe523cd-4c14-5c50-8257-3d982470fcb8","html":"<p>我们知道实时PBR渲染中的IBL部分是可以预计算的，主要包括：</p>\n<ul>\n<li>\n<p>Diffuse部分：辐照度图(irradiance map)或SH(Spherical Harmonics)</p>\n</li>\n<li>\n<p>Specular部分：不同粗糙度级别对应的环境贴图、BRDF积分(LUT)</p>\n</li>\n</ul>\n<p>一些部分也可通过近似来达到实时计算：</p>\n<p>比如LUT可以通过数学曲线来近似：</p>\n<div class=\"gatsby-highlight\" data-language=\"glsl\"><pre class=\"language-glsl\"><code class=\"language-glsl\"><span class=\"token comment\">// https://www.unrealengine.com/blog/physically-based-shading-on-mobile</span>\n<span class=\"token keyword\">vec3</span> <span class=\"token function\">integrateBRDF</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">vec3</span> specular<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">float</span> roughness<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">float</span> NoV<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">float</span> f90<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">vec4</span> c0 <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.0275</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.572</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.022</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">vec4</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0425</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.04</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.04</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">vec4</span> r <span class=\"token operator\">=</span> roughness <span class=\"token operator\">*</span> c0 <span class=\"token operator\">+</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> a004 <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">exp2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">9.28</span> <span class=\"token operator\">*</span> NoV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> r<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">vec2</span> AB <span class=\"token operator\">=</span> <span class=\"token keyword\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.04</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> a004 <span class=\"token operator\">+</span> r<span class=\"token punctuation\">.</span>zw<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> specular <span class=\"token operator\">*</span> AB<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> AB<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> f90<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以及Three R112以后直接纳入核心API的PMREM(Prefiltered Mipmapped Radiance Environment Map)</p>\n<p>这里又歪出来跪一会，R112之前的PMREM是由Prashant Sharma老哥实现的，和这位印度老哥有过一些交流，其已是自由职业，不仅Shader写得惊为天人，甚至还保持着晨练的健康习惯，代码好又身体壮，xmsl。。。</p>\n<p>近似和简化毕竟还是会造成一定的效果损失，所以一个好的离线预计算Envtools其实很关键。</p>\n<p>现有的一些处理工具包括:</p>\n<ul>\n<li>\n<p>babylon使用的<a href=\"https://github.com/derkreature/IBLBaker\">IBLBaker</a></p>\n</li>\n<li>\n<p>filament的<a href=\"https://github.com/google/filament/tree/master/filament\">cmgen</a></p>\n</li>\n<li>\n<p>ogl使用的<a href=\"https://github.com/oframe/ibl-converter\">ibl-converter</a></p>\n</li>\n<li>\n<p>osg.js使用的<a href=\"https://github.com/cedricpinson/envtools\">envtools</a></p>\n</li>\n</ul>\n<p>但要数其中功能最多最强大的，那还得看envtools。</p>\n<p>毕竟宇宙最强Web渲染SketchFab便是基于osg.js的。</p>\n<h2>Envtools</h2>\n<p>在简单的学习一些涉及的知识后（Docker、Cmake、C++、Python）后，便可以一窥强大的envtools到底都干了啥啦。。</p>\n<p><a href=\"https://github.com/todaylg/envTools\">envTools</a></p>\n<p>核心指令：</p>\n<h3>envremap</h3>\n<p>提供任意两种格式之间的转换，包括：</p>\n<p><strong>rect</strong></p>\n<p>极坐标映射，入射方向r(x,y,z)对应的纹理坐标为：</p>\n<ul>\n<li>\n<p>cube</p>\n</li>\n<li>\n<p>dome</p>\n</li>\n<li>\n<p>hemi</p>\n</li>\n<li>\n<p>ball</p>\n</li>\n<li>\n<p>rect </p>\n</li>\n</ul>\n<p>各个格式的基本介绍、所具有的优缺点（可参考全局光照技术介绍）</p>\n<p>还可以控制转换过程中的超采样方法：</p>\n<ul>\n<li>\n<p>cent</p>\n</li>\n<li>\n<p>rgss</p>\n</li>\n<li>\n<p>box2</p>\n</li>\n<li>\n<p>box3</p>\n</li>\n<li>\n<p>box4</p>\n</li>\n</ul>\n<p>Three中也提供了实时的直方转CubeMap方法，即WebGLRenderTargetCube.fromEquirectangularTexture（R110之前为EquirectangularToCubeGenerator），其在采样贴图的UV上做变换，原理是一致的。</p>\n<h3>envIrradiance</h3>\n<p>生成irradiance map并输出SH，计算全局光照中的间接光照</p>\n<p>SH可以用作近似irradiance map，通过SH coefficients可重建低频的环境光</p>\n<p>相关文章：</p>\n<ul>\n<li>\n<p><a href=\"https://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\">https://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf</a></p>\n</li>\n<li>\n<p><a href=\"https://zhuanlan.zhihu.com/p/63755519\">https://zhuanlan.zhihu.com/p/63755519</a></p>\n</li>\n<li>\n<p><a href=\"https://zhuanlan.zhihu.com/p/50208005\">https://zhuanlan.zhihu.com/p/50208005</a></p>\n</li>\n</ul>\n<p>以及全局光照技术介绍</p>\n<p>Three目前对IBL的间接光照部分计算用的是环境贴图的最低一级的mipmap（见函数getLightProbeIndirectIrradiance）</p>\n<p>对SH的相关的讨论：</p>\n<ul>\n<li><a href=\"https://github.com/mrdoob/three.js/pull/13115\">https://github.com/mrdoob/three.js/pull/13115</a></li>\n</ul>\n<p>关于<a href=\"https://www.khronos.org/opengl/wiki/Cubemap_Texture#Seamless_cubemap\">seamless CubeMap</a>的问题，CubeMap采样时需要考虑其他面，即额外采样相邻的几个面进行插值得到结果</p>\n<p>WebGL的API提供支持，但一些浏览器并不支持seamless CubeMap，解决方法：</p>\n<p>Nvidia的texture-tools实现方法: </p>\n<ul>\n<li><a href=\"https://github.com/castano/nvidia-texture-tools/blob/master/src/nvtt/CubeSurface.cpp\">https://github.com/castano/nvidia-texture-tools/blob/master/src/nvtt/CubeSurface.cpp</a></li>\n</ul>\n<h3>envPrefilter</h3>\n<p>不同粗糙度对应预计算得到的CubeMap，相关文章:</p>\n<ul>\n<li>\n<p><a href=\"https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\">https://seblagarde.files.wordpress.com/2015/07/course<em>notes</em>moving<em>frostbite</em>to<em>pbr</em>v32.pdf</a> p67</p>\n</li>\n<li>\n<p><a href=\"https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/\">https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/</a></p>\n</li>\n</ul>\n<p>Three PMREM(^R112)的实现，直接上的高斯模糊（应用在极坐标系），Hack？参考一下全局光照技术的实时PMREM介绍</p>\n<h3>envBRDF</h3>\n<p>单独计算并输出BRDF的LUT, 相关文章:</p>\n<ul>\n<li><a href=\"http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\">http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013<em>pbs</em>epic<em>notes</em>v2.pdf</a></li>\n</ul>\n<h3>envBackground</h3>\n<p>采用高斯模糊进行背景模糊计算，也是耗时最长的一步，</p>\n<ul>\n<li>\n<p><a href=\"http://stackoverflow.com/questions/17841098/gaussian-blur-standard-deviation-radius-and-kernel-size\">http://stackoverflow.com/questions/17841098/gaussian-blur-standard-deviation-radius-and-kernel-size</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-40-incremental-computation-gaussian\">https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-40-incremental-computation-gaussian</a></p>\n</li>\n</ul>\n<p>filament则是直接延用粗糙度模糊的方法，速度相对较快，但是作为背景的效果感觉不太行。。</p>\n<h3>extractLights</h3>\n<p>分析环境贴图中的明亮区域，从而提取出方向光的方向及亮度等信息</p>\n<p>一般用于提取环境贴图中的日光信息</p>\n<p>相关文章：</p>\n<ul>\n<li>\n<p><a href=\"http://gl.ict.usc.edu/Research/MedianCut/\">http://gl.ict.usc.edu/Research/MedianCut/</a></p>\n</li>\n<li>\n<p><a href=\"https://gist.github.com/Kuranes/fa7466291c9fad3cdfb845f80fabe646\">https://gist.github.com/Kuranes/fa7466291c9fad3cdfb845f80fabe646</a></p>\n</li>\n</ul>\n<h3>process_environment</h3>\n<p>串联起所有模块的控制入口，除了上面的模块外还添加了：</p>\n<ul>\n<li>\n<p>压缩打包</p>\n</li>\n<li>\n<p>缩略图生成</p>\n</li>\n<li>\n<p>GPU计算加速</p>\n</li>\n</ul>\n<p>其基本流程为：</p>\n<h4>initBaseTexture</h4>\n<p>通过oiiotool(OpenImageIO)将输入文件转化为tiff格式的panorama<em>highres，调用envremap</em>cmd生成cubemap_highres</p>\n<p>输入文件格式支持rgbe/rgbm/luv/</p>\n<h4>thumbnail_create</h4>\n<p>通过oiiotool将cubemap_highres缩放到所需缩小的尺寸即可</p>\n<h4>cubemap<em>specular</em>create_mipmap</h4>\n<p>调用envremap<em>cmd将cubemap</em>highres按mipmap级数进行resize，加速后面的预处理</p>\n<h4>specular<em>create</em>prefilter</h4>\n<p>调用envPrefilter_cmd进行预处理(panorama、cubeMap)，有mipmap的话则直接加载mipmap</p>\n<h4>extract_lights</h4>\n<p>通过oiiotool将panorama<em>highres缩放1024x512，再调用extractLights</em>cmd输出灯光信息</p>\n<h4>background_create</h4>\n<p>按传入的background<em>size复用对应尺寸的mipmap(没有则取第一层)，再调用envBackground</em>cmd进行背景模糊处理</p>\n<h4>compute_irradiance</h4>\n<p>调用envIrradiance<em>cmd对cubemap</em>highres分析输出irradiance Map及输出shCoef</p>\n<h4>compute<em>brdf</em>lut_ue4</h4>\n<p>调用envIntegrateBRDF_cmd输出lut</p>\n<h4>cubemap_packer</h4>\n<p>调用cubemap<em>packer</em>cmd将mipmap数据打包为二进制，在viewer中再进行解包</p>\n<h4>compress</h4>\n<p>调用compress<em>7Zip</em>cmd对图片资源进行压缩</p>\n<h4>writeConfig</h4>\n<p>将所有相关信息输出到config.json</p>\n<h4>zip</h4>\n<p>最后调用compress<em>zip</em>cmd将整个文件进行zip打包</p>\n<p><a href=\"https://github.com/todaylg/envTools\">envTools</a></p>\n<h3>Todo</h3>\n<ul>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 升级Unbutu及相关依赖包，删除一些冗余依赖</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 多级背景模糊直接输出</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> OpenCL/Cuda计算加速</p>\n</li>\n</ul>","fields":{"slug":"/envtools/","prefix":"2020-3-3"},"frontmatter":{"title":"EnvTools","author":"todaylg","category":"大结","cover":null}},"authornote":{"id":"20cdfd79-00b3-57fb-a29f-bb96dcd133a8","html":"<p><strong>todaylg</strong> </p>"},"site":{"siteMetadata":{"facebook":{"appId":""}}}},"pageContext":{"slug":"/envtools/","prev":{"id":"dbb2deb5-1764-52c5-9309-c591f53e4b0e","fields":{"slug":"/zelda/","prefix":"2020-2-18","source":"posts"},"frontmatter":{"title":"海拉鲁之旅","category":"废话集"}},"source":"posts"}}